
Drive_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bfd  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025a  00000000  00000000  00000e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000223  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000658  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d7 e2       	ldi	r29, 0x27	; 39
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  bc:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <_Z4initv>:
	}
}

void init(void)
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	80 93 50 00 	sts	0x0050, r24
	
	//OSC.XOSCCTRL = 0b11010000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	//_delay_ms(500);
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
  ca:	e0 e5       	ldi	r30, 0x50	; 80
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	81 ff       	sbrs	r24, 1
  d2:	fd cf       	rjmp	.-6      	; 0xce <_Z4initv+0xa>
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
  d4:	88 ed       	ldi	r24, 0xD8	; 216
  d6:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
  d8:	e0 e4       	ldi	r30, 0x40	; 64
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
  de:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b00001100; // DAC1 and DAC0 outputs (PA2 and PA3)
  e4:	e0 e0       	ldi	r30, 0x00	; 0
  e6:	f6 e0       	ldi	r31, 0x06	; 6
  e8:	8c e0       	ldi	r24, 0x0C	; 12
  ea:	80 83       	st	Z, r24
	
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b2 e0       	ldi	r27, 0x02	; 2
  f0:	1c 92       	st	X, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	1c 92       	st	X, r1
  f6:	11 97       	sbiw	r26, 0x01	; 1
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
  f8:	12 96       	adiw	r26, 0x02	; 2
  fa:	1c 92       	st	X, r1
	
	DACA.CTRLA = 0x00; // Enable the ADC on PORT A
  fc:	a0 e0       	ldi	r26, 0x00	; 0
  fe:	b3 e0       	ldi	r27, 0x03	; 3
 100:	1c 92       	st	X, r1
	DACA.CTRLB = 0x00; // Disable ADC stuff
 102:	11 96       	adiw	r26, 0x01	; 1
 104:	1c 92       	st	X, r1
 106:	11 97       	sbiw	r26, 0x01	; 1
	DACA.CTRLC = 0x00; // Disable the AREF pins
 108:	12 96       	adiw	r26, 0x02	; 2
 10a:	1c 92       	st	X, r1
	
	PORTC.DIR = 0b00000011; // i2C lines SCL and SDA (PC1 and PC0)
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 40 06 	sts	0x0640, r24
	PORTD.DIR = 0b00001000; // All inputs except PD3 (SPI TX)
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	80 93 60 06 	sts	0x0660, r24
	
	PORTA.PIN2CTRL = 0b00111000; // Wired AND configuration with internal pull-up
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = 0b00111000; // Wired AND configuration with internal pull-up
 11c:	83 8b       	std	Z+19, r24	; 0x13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	87 ea       	ldi	r24, 0xA7	; 167
 122:	91 e6       	ldi	r25, 0x61	; 97
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <_Z4initv+0x60>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_Z4initv+0x6a>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x06; // BSEL = 6
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f9 e0       	ldi	r31, 0x09	; 9
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	86 83       	std	Z+6, r24	; 0x06
	//USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 13e:	12 82       	std	Z+2, r1	; 0x02
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLD = 0b00000000; // Asynchronous, No parity, 1 stop bit, 8 data bits
 148:	15 82       	std	Z+5, r1	; 0x05
 14a:	08 95       	ret

0000014c <main>:
int main(void)
{
	bool x = false;
	char temp;
	
	init();
 14c:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z4initv>
	initUSART();
 150:	0e 94 99 00 	call	0x132	; 0x132 <_Z9initUSARTv>
		if(USARTD0_STATUS & USART_RXCIF_bm) // If there is unread data from Main CPU...
		{
			temp = getByte(0);
			sendChar(temp, 0);
		}*/
		PORTA.OUT = 0x00;
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f6 e0       	ldi	r31, 0x06	; 6
		_delay_ms(1000);
		PORTA.OUT = 0b00001100;
 158:	8c e0       	ldi	r24, 0x0C	; 12
		if(USARTD0_STATUS & USART_RXCIF_bm) // If there is unread data from Main CPU...
		{
			temp = getByte(0);
			sendChar(temp, 0);
		}*/
		PORTA.OUT = 0x00;
 15a:	14 82       	std	Z+4, r1	; 0x04
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	37 ea       	ldi	r19, 0xA7	; 167
 160:	91 e6       	ldi	r25, 0x61	; 97
 162:	21 50       	subi	r18, 0x01	; 1
 164:	30 40       	sbci	r19, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x16>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x20>
 16c:	00 00       	nop
		_delay_ms(1000);
		PORTA.OUT = 0b00001100;
 16e:	84 83       	std	Z+4, r24	; 0x04
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	37 ea       	ldi	r19, 0xA7	; 167
 174:	91 e6       	ldi	r25, 0x61	; 97
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x2a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x34>
 180:	00 00       	nop
 182:	eb cf       	rjmp	.-42     	; 0x15a <main+0xe>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
