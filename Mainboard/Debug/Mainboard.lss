
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000528  00802000  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802528  00802528  00000d96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b69  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000330  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00002d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bf  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf3  00000000  00000000  00003b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	15 e2       	ldi	r17, 0x25	; 37
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ea ed       	ldi	r30, 0xDA	; 218
 214:	f7 e0       	ldi	r31, 0x07	; 7
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 32       	cpi	r26, 0x28	; 40
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	25 e2       	ldi	r18, 0x25	; 37
 228:	a8 e2       	ldi	r26, 0x28	; 40
 22a:	b5 e2       	ldi	r27, 0x25	; 37
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	aa 32       	cpi	r26, 0x2A	; 42
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 37 03 	call	0x66e	; 0x66e <main>
 23a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_Z4initv>:
	drawString("HELLOWORLD", 100, 100, char_color);
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 248:	e0 e5       	ldi	r30, 0x50	; 80
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	81 ff       	sbrs	r24, 1
 250:	fd cf       	rjmp	.-6      	; 0x24c <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	88 ef       	ldi	r24, 0xF8	; 248
 268:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 270:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 272:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 274:	14 96       	adiw	r26, 0x04	; 4
 276:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 278:	e0 e2       	ldi	r30, 0x20	; 32
 27a:	f6 e0       	ldi	r31, 0x06	; 6
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 280:	a0 e4       	ldi	r26, 0x40	; 64
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	1c 92       	st	X, r1
 28a:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 290:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 292:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 294:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 296:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 298:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 29a:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 29c:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2a0:	9b eb       	ldi	r25, 0xBB	; 187
 2a2:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2a6:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2b0:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z4initv+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z4initv+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f9 e0       	ldi	r31, 0x09	; 9
 2ca:	2c e0       	ldi	r18, 0x0C	; 12
 2cc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2d2:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2e2:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 2e4:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2e6:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 2e8:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	fa e0       	ldi	r31, 0x0A	; 10
 2ee:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f0:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 2f2:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2f4:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 2fa:	e0 eb       	ldi	r30, 0xB0	; 176
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 300:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 302:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 304:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 306:	35 83       	std	Z+5, r19	; 0x05
 308:	08 95       	ret

0000030a <_Z8xmitDATAh>:
}
*/

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 30a:	e0 e2       	ldi	r30, 0x20	; 32
 30c:	f6 e0       	ldi	r31, 0x06	; 6
 30e:	90 e2       	ldi	r25, 0x20	; 32
 310:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 312:	80 93 a4 06 	sts	0x06A4, r24
	//lcdDelay(1);
	PORTB.OUTCLR = 0b01000000; // WR goes low
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	86 83       	std	Z+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 31a:	85 83       	std	Z+5, r24	; 0x05
 31c:	08 95       	ret

0000031e <_Z12getCharIndexh>:
		xmitDATA(colorL);
	}
}

int getCharIndex(unsigned char c) {
	int c_val = (int)(c);
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
	if (c >= 'A' && c <= 'Z') c_val -= ('A' + 10);
 322:	9f eb       	ldi	r25, 0xBF	; 191
 324:	98 0f       	add	r25, r24
 326:	9a 31       	cpi	r25, 0x1A	; 26
 328:	18 f4       	brcc	.+6      	; 0x330 <_Z12getCharIndexh+0x12>
 32a:	2b 54       	subi	r18, 0x4B	; 75
 32c:	31 09       	sbc	r19, r1
 32e:	06 c0       	rjmp	.+12     	; 0x33c <_Z12getCharIndexh+0x1e>
	else if (c >= '0' && c <= '9') c_val -= '0';
 330:	90 ed       	ldi	r25, 0xD0	; 208
 332:	98 0f       	add	r25, r24
 334:	9a 30       	cpi	r25, 0x0A	; 10
 336:	10 f4       	brcc	.+4      	; 0x33c <_Z12getCharIndexh+0x1e>
 338:	20 53       	subi	r18, 0x30	; 48
 33a:	31 09       	sbc	r19, r1
	return c_val;
}
 33c:	c9 01       	movw	r24, r18
 33e:	08 95       	ret

00000340 <_Z8lcdDelayh>:
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 340:	88 23       	and	r24, r24
 342:	29 f0       	breq	.+10     	; 0x34e <_Z8lcdDelayh+0xe>
 344:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 346:	00 00       	nop
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 348:	9f 5f       	subi	r25, 0xFF	; 255
 34a:	98 13       	cpse	r25, r24
 34c:	fc cf       	rjmp	.-8      	; 0x346 <_Z8lcdDelayh+0x6>
 34e:	08 95       	ret

00000350 <_Z7xmitCMDh>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitCMD(unsigned char cmdByte)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 354:	c0 e2       	ldi	r28, 0x20	; 32
 356:	d6 e0       	ldi	r29, 0x06	; 6
 358:	90 e2       	ldi	r25, 0x20	; 32
 35a:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 35c:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	0e 94 a0 01 	call	0x340	; 0x340 <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 366:	80 e4       	ldi	r24, 0x40	; 64
 368:	8e 83       	std	Y+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 36a:	8d 83       	std	Y+5, r24	; 0x05
	//lcdDelay(1);
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 378:	81 e1       	ldi	r24, 0x11	; 17
 37a:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 37e:	86 e3       	ldi	r24, 0x36	; 54
 380:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 38a:	8a e3       	ldi	r24, 0x3A	; 58
 38c:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 390:	85 e5       	ldi	r24, 0x55	; 85
 392:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 396:	82 eb       	ldi	r24, 0xB2	; 178
 398:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 3a2:	8c e0       	ldi	r24, 0x0C	; 12
 3a4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 3ae:	83 e3       	ldi	r24, 0x33	; 51
 3b0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 3b4:	83 e3       	ldi	r24, 0x33	; 51
 3b6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 3ba:	87 eb       	ldi	r24, 0xB7	; 183
 3bc:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x35); //
 3c0:	85 e3       	ldi	r24, 0x35	; 53
 3c2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 3c6:	8b eb       	ldi	r24, 0xBB	; 187
 3c8:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 3cc:	8b e2       	ldi	r24, 0x2B	; 43
 3ce:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 3d2:	80 ec       	ldi	r24, 0xC0	; 192
 3d4:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 3d8:	8c e2       	ldi	r24, 0x2C	; 44
 3da:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 3de:	82 ec       	ldi	r24, 0xC2	; 194
 3e0:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x01); //
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 3f0:	83 ec       	ldi	r24, 0xC3	; 195
 3f2:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x11); //
 3f6:	81 e1       	ldi	r24, 0x11	; 17
 3f8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 3fc:	84 ec       	ldi	r24, 0xC4	; 196
 3fe:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x20); //
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 408:	86 ec       	ldi	r24, 0xC6	; 198
 40a:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 40e:	8f e0       	ldi	r24, 0x0F	; 15
 410:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 414:	80 ed       	ldi	r24, 0xD0	; 208
 416:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 41a:	84 ea       	ldi	r24, 0xA4	; 164
 41c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 420:	81 ea       	ldi	r24, 0xA1	; 161
 422:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 426:	80 ee       	ldi	r24, 0xE0	; 224
 428:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 42c:	80 ed       	ldi	r24, 0xD0	; 208
 42e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 43e:	8e e0       	ldi	r24, 0x0E	; 14
 440:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 444:	85 e1       	ldi	r24, 0x15	; 21
 446:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 44a:	8d e0       	ldi	r24, 0x0D	; 13
 44c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x37); //
 450:	87 e3       	ldi	r24, 0x37	; 55
 452:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x43); //
 456:	83 e4       	ldi	r24, 0x43	; 67
 458:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x47); //
 45c:	87 e4       	ldi	r24, 0x47	; 71
 45e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x09); //
 462:	89 e0       	ldi	r24, 0x09	; 9
 464:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 468:	85 e1       	ldi	r24, 0x15	; 21
 46a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x12); //
 46e:	82 e1       	ldi	r24, 0x12	; 18
 470:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 474:	86 e1       	ldi	r24, 0x16	; 22
 476:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 47a:	89 e1       	ldi	r24, 0x19	; 25
 47c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 480:	81 ee       	ldi	r24, 0xE1	; 225
 482:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 486:	80 ed       	ldi	r24, 0xD0	; 208
 488:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 498:	8d e0       	ldi	r24, 0x0D	; 13
 49a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 49e:	8c e0       	ldi	r24, 0x0C	; 12
 4a0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x06); //
 4a4:	86 e0       	ldi	r24, 0x06	; 6
 4a6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 4aa:	8d e2       	ldi	r24, 0x2D	; 45
 4ac:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x44); //
 4b0:	84 e4       	ldi	r24, 0x44	; 68
 4b2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x40); //
 4b6:	80 e4       	ldi	r24, 0x40	; 64
 4b8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 4bc:	8e e0       	ldi	r24, 0x0E	; 14
 4be:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 4c2:	8c e1       	ldi	r24, 0x1C	; 28
 4c4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x18); //
 4c8:	88 e1       	ldi	r24, 0x18	; 24
 4ca:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 4ce:	86 e1       	ldi	r24, 0x16	; 22
 4d0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 4d4:	89 e1       	ldi	r24, 0x19	; 25
 4d6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 4da:	8a e2       	ldi	r24, 0x2A	; 42
 4dc:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 4f2:	8f ee       	ldi	r24, 0xEF	; 239
 4f4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 4f8:	8b e2       	ldi	r24, 0x2B	; 43
 4fa:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x01); //
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 510:	8f e3       	ldi	r24, 0x3F	; 63
 512:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 516:	89 e2       	ldi	r24, 0x29	; 41
 518:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	81 ee       	ldi	r24, 0xE1	; 225
 520:	94 e0       	ldi	r25, 0x04	; 4
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <_Z7initLCDv+0x1b0>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <_Z7initLCDv+0x1ba>
 52c:	00 00       	nop
 52e:	08 95       	ret

00000530 <_Z8drawCharhsss>:
	else if (c >= '0' && c <= '9') c_val -= '0';
	return c_val;
}

void drawChar(unsigned char c, short int xStart, short int yStart, short int color)
{
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	08 2f       	mov	r16, r24
 542:	eb 01       	movw	r28, r22
 544:	14 2f       	mov	r17, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 546:	e3 2e       	mov	r14, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 548:	f2 2e       	mov	r15, r18
	unsigned char xEndH = (unsigned char)((xStart + 16) >> 8);
	unsigned char xEndL = (unsigned char)((xStart + 16) & 0x00FF);
	unsigned char yStartL = (unsigned char)yStart;
	unsigned char yEnd = (unsigned char)(yStart + 16);
	
	xmitCMD(0x36); // Memory access control
 54a:	86 e3       	ldi	r24, 0x36	; 54
 54c:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 550:	80 ea       	ldi	r24, 0xA0	; 160
 552:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2A); // X Address Set
 556:	8a e2       	ldi	r24, 0x2A	; 42
 558:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 55c:	8d 2f       	mov	r24, r29
 55e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 562:	8c 2f       	mov	r24, r28
 564:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
{
	unsigned char colorH = (unsigned char)(color >> 8);
	unsigned char colorL = (unsigned char)(color & 0x00FF);
	unsigned char xStartH = (unsigned char)(xStart >> 8);
	unsigned char xStartL = (unsigned char)(xStart & 0x00FF);
	unsigned char xEndH = (unsigned char)((xStart + 16) >> 8);
 568:	ce 01       	movw	r24, r28
 56a:	40 96       	adiw	r24, 0x10	; 16
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 56c:	89 2f       	mov	r24, r25
 56e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 572:	8c 2f       	mov	r24, r28
 574:	80 5f       	subi	r24, 0xF0	; 240
 576:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 57a:	8b e2       	ldi	r24, 0x2B	; 43
 57c:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStartL); // Start 0
 586:	81 2f       	mov	r24, r17
 588:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 592:	80 e1       	ldi	r24, 0x10	; 16
 594:	81 0f       	add	r24, r17
 596:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	int c_index = getCharIndex(c);
 59a:	80 2f       	mov	r24, r16
 59c:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z12getCharIndexh>
	const short int* chr = font[c_index];
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	82 95       	swap	r24
 5a6:	92 95       	swap	r25
 5a8:	90 7f       	andi	r25, 0xF0	; 240
 5aa:	98 27       	eor	r25, r24
 5ac:	80 7f       	andi	r24, 0xF0	; 240
 5ae:	98 27       	eor	r25, r24
 5b0:	ec 01       	movw	r28, r24
 5b2:	c9 5d       	subi	r28, 0xD9	; 217
 5b4:	df 4d       	sbci	r29, 0xDF	; 223
	//const short int* chr = font[c_index];
	
	xmitCMD(0x2C); // Start writing pixels
 5b6:	8c e2       	ldi	r24, 0x2C	; 44
 5b8:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7xmitCMDh>
 5bc:	8e 01       	movw	r16, r28
 5be:	6e 01       	movw	r12, r28
 5c0:	80 e2       	ldi	r24, 0x20	; 32
 5c2:	c8 0e       	add	r12, r24
 5c4:	d1 1c       	adc	r13, r1
 5c6:	21 c0       	rjmp	.+66     	; 0x60a <_Z8drawCharhsss+0xda>
	for(int i=0; i<16; i++) {
		for(int j=0; j<16; j++) {
			if(chr[i] & (1<<j)){
 5c8:	f8 01       	movw	r30, r16
 5ca:	40 81       	ld	r20, Z
 5cc:	51 81       	ldd	r21, Z+1	; 0x01
 5ce:	0c 2e       	mov	r0, r28
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <_Z8drawCharhsss+0xa6>
 5d2:	55 95       	asr	r21
 5d4:	47 95       	ror	r20
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <_Z8drawCharhsss+0xa2>
 5da:	40 ff       	sbrs	r20, 0
 5dc:	07 c0       	rjmp	.+14     	; 0x5ec <_Z8drawCharhsss+0xbc>
				xmitDATA(colorH);
 5de:	8e 2d       	mov	r24, r14
 5e0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
				xmitDATA(colorL);
 5e4:	8f 2d       	mov	r24, r15
 5e6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
 5ea:	06 c0       	rjmp	.+12     	; 0x5f8 <_Z8drawCharhsss+0xc8>
			}
			else{
				xmitDATA(0x00);
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
				xmitDATA(0x00);
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	const short int* chr = font[c_index];
	//const short int* chr = font[c_index];
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<16; i++) {
		for(int j=0; j<16; j++) {
 5f8:	21 96       	adiw	r28, 0x01	; 1
 5fa:	c0 31       	cpi	r28, 0x10	; 16
 5fc:	d1 05       	cpc	r29, r1
 5fe:	21 f7       	brne	.-56     	; 0x5c8 <_Z8drawCharhsss+0x98>
 600:	0e 5f       	subi	r16, 0xFE	; 254
 602:	1f 4f       	sbci	r17, 0xFF	; 255
	int c_index = getCharIndex(c);
	const short int* chr = font[c_index];
	//const short int* chr = font[c_index];
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<16; i++) {
 604:	0c 15       	cp	r16, r12
 606:	1d 05       	cpc	r17, r13
 608:	19 f0       	breq	.+6      	; 0x610 <_Z8drawCharhsss+0xe0>
	else if (c >= '0' && c <= '9') c_val -= '0';
	return c_val;
}

void drawChar(unsigned char c, short int xStart, short int yStart, short int color)
{
 60a:	c0 e0       	ldi	r28, 0x00	; 0
 60c:	d0 e0       	ldi	r29, 0x00	; 0
 60e:	dc cf       	rjmp	.-72     	; 0x5c8 <_Z8drawCharhsss+0x98>
				xmitDATA(0x00);
				xmitDATA(0x00);
			}
		}
	}	
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	df 90       	pop	r13
 61e:	cf 90       	pop	r12
 620:	08 95       	ret

00000622 <_Z10drawStringPKcsss>:

void drawString(const char* str, short int xStart, short int yStart, short int color) {
 622:	cf 92       	push	r12
 624:	df 92       	push	r13
 626:	ef 92       	push	r14
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	fc 01       	movw	r30, r24
 634:	eb 01       	movw	r28, r22
 636:	7a 01       	movw	r14, r20
 638:	69 01       	movw	r12, r18
	while (*str) {
 63a:	80 81       	ld	r24, Z
 63c:	88 23       	and	r24, r24
 63e:	71 f0       	breq	.+28     	; 0x65c <_Z10drawStringPKcsss+0x3a>
 640:	8f 01       	movw	r16, r30
 642:	0f 5f       	subi	r16, 0xFF	; 255
 644:	1f 4f       	sbci	r17, 0xFF	; 255
		drawChar(*str++, xStart, yStart, color);
 646:	96 01       	movw	r18, r12
 648:	a7 01       	movw	r20, r14
 64a:	be 01       	movw	r22, r28
 64c:	0e 94 98 02 	call	0x530	; 0x530 <_Z8drawCharhsss>
		xStart += CHAR_WIDTH;
 650:	60 96       	adiw	r28, 0x10	; 16
		}
	}	
}

void drawString(const char* str, short int xStart, short int yStart, short int color) {
	while (*str) {
 652:	f8 01       	movw	r30, r16
 654:	81 91       	ld	r24, Z+
 656:	8f 01       	movw	r16, r30
 658:	81 11       	cpse	r24, r1
 65a:	f5 cf       	rjmp	.-22     	; 0x646 <_Z10drawStringPKcsss+0x24>
		drawChar(*str++, xStart, yStart, color);
		xStart += CHAR_WIDTH;
	}
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	df 90       	pop	r13
 66a:	cf 90       	pop	r12
 66c:	08 95       	ret

0000066e <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 66e:	2f 92       	push	r2
 670:	3f 92       	push	r3
 672:	5f 92       	push	r5
 674:	6f 92       	push	r6
 676:	7f 92       	push	r7
 678:	8f 92       	push	r8
 67a:	9f 92       	push	r9
 67c:	af 92       	push	r10
 67e:	bf 92       	push	r11
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
		while(1);
	}
	*/
	short int char_color = WHITE;
	drawString("HELLOWORLD", 100, 100, char_color);
}
 694:	6d b6       	in	r6, 0x3d	; 61
 696:	7e b6       	in	r7, 0x3e	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 698:	8d b7       	in	r24, 0x3d	; 61
 69a:	9e b7       	in	r25, 0x3e	; 62
 69c:	86 5e       	subi	r24, 0xE6	; 230
 69e:	91 09       	sbc	r25, r1
 6a0:	8d bf       	out	0x3d, r24	; 61
 6a2:	9e bf       	out	0x3e, r25	; 62
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	4c 01       	movw	r8, r24
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 6a8:	80 91 28 25 	lds	r24, 0x2528
 6ac:	90 91 29 25 	lds	r25, 0x2529
 6b0:	0f 2e       	mov	r0, r31
 6b2:	f7 e1       	ldi	r31, 0x17	; 23
 6b4:	5f 2e       	mov	r5, r31
 6b6:	f0 2d       	mov	r31, r0
 6b8:	58 9e       	mul	r5, r24
 6ba:	f0 01       	movw	r30, r0
 6bc:	59 9e       	mul	r5, r25
 6be:	f0 0d       	add	r31, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	e8 0d       	add	r30, r8
 6c4:	f9 1d       	adc	r31, r9
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e2       	ldi	r19, 0x20	; 32
 6ca:	20 83       	st	Z, r18
 6cc:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 6ce:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 6d0:	2b e4       	ldi	r18, 0x4B	; 75
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	22 87       	std	Z+10, r18	; 0x0a
 6d6:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 6d8:	45 e5       	ldi	r20, 0x55	; 85
 6da:	50 e0       	ldi	r21, 0x00	; 0
 6dc:	46 87       	std	Z+14, r20	; 0x0e
 6de:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 6e0:	24 87       	std	Z+12, r18	; 0x0c
 6e2:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 6e4:	42 83       	std	Z+2, r20	; 0x02
 6e6:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 6e8:	0f 2e       	mov	r0, r31
 6ea:	fc e8       	ldi	r31, 0x8C	; 140
 6ec:	ef 2e       	mov	r14, r31
 6ee:	f1 2c       	mov	r15, r1
 6f0:	f0 2d       	mov	r31, r0
 6f2:	e1 8a       	std	Z+17, r14	; 0x11
 6f4:	f2 8a       	std	Z+18, r15	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 6f6:	0b e9       	ldi	r16, 0x9B	; 155
 6f8:	10 e0       	ldi	r17, 0x00	; 0
 6fa:	03 8b       	std	Z+19, r16	; 0x13
 6fc:	14 8b       	std	Z+20, r17	; 0x14
	userQueue[numConfig].auxVol = 0;
 6fe:	16 82       	std	Z+6, r1	; 0x06
 700:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 702:	10 86       	std	Z+8, r1	; 0x08
 704:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 706:	a2 e3       	ldi	r26, 0x32	; 50
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	a4 83       	std	Z+4, r26	; 0x04
 70c:	b5 83       	std	Z+5, r27	; 0x05
	userQueue[numConfig].v_Valve = 180;
 70e:	0f 2e       	mov	r0, r31
 710:	f4 eb       	ldi	r31, 0xB4	; 180
 712:	2f 2e       	mov	r2, r31
 714:	31 2c       	mov	r3, r1
 716:	f0 2d       	mov	r31, r0
 718:	25 8a       	std	Z+21, r2	; 0x15
 71a:	36 8a       	std	Z+22, r3	; 0x16
	numConfig++;	
 71c:	6c 01       	movw	r12, r24
 71e:	6f ef       	ldi	r22, 0xFF	; 255
 720:	c6 1a       	sub	r12, r22
 722:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 724:	0f 2e       	mov	r0, r31
 726:	fd e0       	ldi	r31, 0x0D	; 13
 728:	af 2e       	mov	r10, r31
 72a:	f0 e2       	ldi	r31, 0x20	; 32
 72c:	bf 2e       	mov	r11, r31
 72e:	f0 2d       	mov	r31, r0
 730:	a7 8a       	std	Z+23, r10	; 0x17
 732:	b0 8e       	std	Z+24, r11	; 0x18
	userQueue[numConfig].cleanOn = true;
 734:	5c 9c       	mul	r5, r12
 736:	f0 01       	movw	r30, r0
 738:	5d 9c       	mul	r5, r13
 73a:	f0 0d       	add	r31, r0
 73c:	11 24       	eor	r1, r1
 73e:	e8 0d       	add	r30, r8
 740:	f9 1d       	adc	r31, r9
 742:	dd 24       	eor	r13, r13
 744:	d3 94       	inc	r13
 746:	d0 8a       	std	Z+16, r13	; 0x10
	userQueue[numConfig].bass = 85;
 748:	42 87       	std	Z+10, r20	; 0x0a
 74a:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 74c:	26 87       	std	Z+14, r18	; 0x0e
 74e:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 750:	24 87       	std	Z+12, r18	; 0x0c
 752:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 754:	29 e1       	ldi	r18, 0x19	; 25
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	22 83       	std	Z+2, r18	; 0x02
 75a:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 75c:	e1 8a       	std	Z+17, r14	; 0x11
 75e:	f2 8a       	std	Z+18, r15	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 760:	03 8b       	std	Z+19, r16	; 0x13
 762:	14 8b       	std	Z+20, r17	; 0x14
	userQueue[numConfig].auxVol = 0;
 764:	16 82       	std	Z+6, r1	; 0x06
 766:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 768:	10 86       	std	Z+8, r1	; 0x08
 76a:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 76c:	a4 83       	std	Z+4, r26	; 0x04
 76e:	b5 83       	std	Z+5, r27	; 0x05
	userQueue[numConfig].v_Valve = 180;
 770:	25 8a       	std	Z+21, r2	; 0x15
 772:	36 8a       	std	Z+22, r3	; 0x16
	numConfig++;
 774:	02 96       	adiw	r24, 0x02	; 2
 776:	80 93 28 25 	sts	0x2528, r24
 77a:	90 93 29 25 	sts	0x2529, r25
	
	init();
 77e:	0e 94 21 01 	call	0x242	; 0x242 <_Z4initv>
	initUSART();
 782:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z9initUSARTv>
	initLCD();
 786:	0e 94 b9 01 	call	0x372	; 0x372 <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 78a:	e0 e2       	ldi	r30, 0x20	; 32
 78c:	f6 e0       	ldi	r31, 0x06	; 6
 78e:	80 e1       	ldi	r24, 0x10	; 16
 790:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	85 83       	std	Z+5, r24	; 0x05
		//xmitPlaid();
		while(1);
	}
	*/
	short int char_color = WHITE;
	drawString("HELLOWORLD", 100, 100, char_color);
 796:	2f ef       	ldi	r18, 0xFF	; 255
 798:	3f ef       	ldi	r19, 0xFF	; 255
 79a:	44 e6       	ldi	r20, 0x64	; 100
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	64 e6       	ldi	r22, 0x64	; 100
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	8c e1       	ldi	r24, 0x1C	; 28
 7a4:	90 e2       	ldi	r25, 0x20	; 32
 7a6:	0e 94 11 03 	call	0x622	; 0x622 <_Z10drawStringPKcsss>
}
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	6d be       	out	0x3d, r6	; 61
 7b0:	7e be       	out	0x3e, r7	; 62
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	1f 91       	pop	r17
 7b8:	0f 91       	pop	r16
 7ba:	ff 90       	pop	r15
 7bc:	ef 90       	pop	r14
 7be:	df 90       	pop	r13
 7c0:	cf 90       	pop	r12
 7c2:	bf 90       	pop	r11
 7c4:	af 90       	pop	r10
 7c6:	9f 90       	pop	r9
 7c8:	8f 90       	pop	r8
 7ca:	7f 90       	pop	r7
 7cc:	6f 90       	pop	r6
 7ce:	5f 90       	pop	r5
 7d0:	3f 90       	pop	r3
 7d2:	2f 90       	pop	r2
 7d4:	08 95       	ret

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
