
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000055c  00802000  00000dea  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080255c  0080255c  000013da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002873  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000039b  00000000  00000000  00003d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  00004122  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000045f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e8  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d0  00000000  00000000  00005234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	15 e2       	ldi	r17, 0x25	; 37
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ea ee       	ldi	r30, 0xEA	; 234
 214:	fd e0       	ldi	r31, 0x0D	; 13
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ac 35       	cpi	r26, 0x5C	; 92
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	25 e2       	ldi	r18, 0x25	; 37
 228:	ac e5       	ldi	r26, 0x5C	; 92
 22a:	b5 e2       	ldi	r27, 0x25	; 37
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 35       	cpi	r26, 0x5E	; 94
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 34 06 	call	0xc68	; 0xc68 <main>
 23a:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_Z4initv>:
	}
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 248:	e0 e5       	ldi	r30, 0x50	; 80
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	81 ff       	sbrs	r24, 1
 250:	fd cf       	rjmp	.-6      	; 0x24c <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	88 ef       	ldi	r24, 0xF8	; 248
 268:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 270:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 272:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 274:	14 96       	adiw	r26, 0x04	; 4
 276:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 278:	e0 e2       	ldi	r30, 0x20	; 32
 27a:	f6 e0       	ldi	r31, 0x06	; 6
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 280:	a0 e4       	ldi	r26, 0x40	; 64
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	1c 92       	st	X, r1
 28a:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 290:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 292:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 294:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 296:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 298:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 29a:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 29c:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2a0:	9b eb       	ldi	r25, 0xBB	; 187
 2a2:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2a6:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2b0:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z4initv+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z4initv+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f9 e0       	ldi	r31, 0x09	; 9
 2ca:	2c e0       	ldi	r18, 0x0C	; 12
 2cc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2d2:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2e2:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 2e4:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2e6:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 2e8:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	fa e0       	ldi	r31, 0x0A	; 10
 2ee:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f0:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 2f2:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2f4:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 2fa:	e0 eb       	ldi	r30, 0xB0	; 176
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 300:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 302:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 304:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 306:	35 83       	std	Z+5, r19	; 0x05
 308:	08 95       	ret

0000030a <_Z7getBytei>:
}

char getByte(int chanNum)
{
	char temp = 0x00;
	switch(chanNum)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	91 05       	cpc	r25, r1
 30e:	91 f0       	breq	.+36     	; 0x334 <_Z7getBytei+0x2a>
 310:	1c f4       	brge	.+6      	; 0x318 <_Z7getBytei+0xe>
 312:	89 2b       	or	r24, r25
 314:	39 f0       	breq	.+14     	; 0x324 <_Z7getBytei+0x1a>
 316:	26 c0       	rjmp	.+76     	; 0x364 <_Z7getBytei+0x5a>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	91 05       	cpc	r25, r1
 31c:	99 f0       	breq	.+38     	; 0x344 <_Z7getBytei+0x3a>
 31e:	03 97       	sbiw	r24, 0x03	; 3
 320:	c9 f0       	breq	.+50     	; 0x354 <_Z7getBytei+0x4a>
 322:	20 c0       	rjmp	.+64     	; 0x364 <_Z7getBytei+0x5a>
	{
		case 0:
			while(!(USARTD0_STATUS & USART_RXCIF_bm));
 324:	e1 ea       	ldi	r30, 0xA1	; 161
 326:	f9 e0       	ldi	r31, 0x09	; 9
 328:	80 81       	ld	r24, Z
 32a:	88 23       	and	r24, r24
 32c:	ec f7       	brge	.-6      	; 0x328 <_Z7getBytei+0x1e>
			temp = USARTD0_DATA;
 32e:	80 91 a0 09 	lds	r24, 0x09A0
			break;
 332:	08 95       	ret
		case 1:
			while(!(USARTD1_STATUS & USART_RXCIF_bm));
 334:	e1 eb       	ldi	r30, 0xB1	; 177
 336:	f9 e0       	ldi	r31, 0x09	; 9
 338:	80 81       	ld	r24, Z
 33a:	88 23       	and	r24, r24
 33c:	ec f7       	brge	.-6      	; 0x338 <_Z7getBytei+0x2e>
			temp = USARTD1_DATA;
 33e:	80 91 b0 09 	lds	r24, 0x09B0
			break;
 342:	08 95       	ret
		
		case 2:
			while(!(USARTE0_STATUS & USART_RXCIF_bm));
 344:	e1 ea       	ldi	r30, 0xA1	; 161
 346:	fa e0       	ldi	r31, 0x0A	; 10
 348:	80 81       	ld	r24, Z
 34a:	88 23       	and	r24, r24
 34c:	ec f7       	brge	.-6      	; 0x348 <_Z7getBytei+0x3e>
			temp = USARTE0_DATA;
 34e:	80 91 a0 0a 	lds	r24, 0x0AA0
			break;
 352:	08 95       	ret
		case 3:
			while(!(USARTE1_STATUS & USART_RXCIF_bm));
 354:	e1 eb       	ldi	r30, 0xB1	; 177
 356:	fa e0       	ldi	r31, 0x0A	; 10
 358:	80 81       	ld	r24, Z
 35a:	88 23       	and	r24, r24
 35c:	ec f7       	brge	.-6      	; 0x358 <_Z7getBytei+0x4e>
			temp = USARTE1_DATA;
 35e:	80 91 b0 0a 	lds	r24, 0x0AB0
			break;
 362:	08 95       	ret
	sendChar(*sToSend++, chanNum);
}

char getByte(int chanNum)
{
	char temp = 0x00;
 364:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return temp;
}
 366:	08 95       	ret

00000368 <_Z8xmitDATAh>:
}
*/

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 368:	e0 e2       	ldi	r30, 0x20	; 32
 36a:	f6 e0       	ldi	r31, 0x06	; 6
 36c:	90 e2       	ldi	r25, 0x20	; 32
 36e:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 370:	80 93 a4 06 	sts	0x06A4, r24
	//lcdDelay(1);
	PORTB.OUTCLR = 0b01000000; // WR goes low
 374:	80 e4       	ldi	r24, 0x40	; 64
 376:	86 83       	std	Z+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 378:	85 83       	std	Z+5, r24	; 0x05
 37a:	08 95       	ret

0000037c <_Z12getCharIndexh>:
		xmitDATA(colorL);
	}
}

int getCharIndex(unsigned char c) {
	int c_val = (int)(c);
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
	if (c >= 'A' && c <= 'Z') c_val -= ('A' - 10);
 380:	9f eb       	ldi	r25, 0xBF	; 191
 382:	98 0f       	add	r25, r24
 384:	9a 31       	cpi	r25, 0x1A	; 26
 386:	18 f4       	brcc	.+6      	; 0x38e <_Z12getCharIndexh+0x12>
 388:	27 53       	subi	r18, 0x37	; 55
 38a:	31 09       	sbc	r19, r1
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <_Z12getCharIndexh+0x28>
	else if (c >= '0' && c <= '9') c_val -= '0';
 38e:	90 ed       	ldi	r25, 0xD0	; 208
 390:	98 0f       	add	r25, r24
 392:	9a 30       	cpi	r25, 0x0A	; 10
 394:	18 f4       	brcc	.+6      	; 0x39c <_Z12getCharIndexh+0x20>
 396:	20 53       	subi	r18, 0x30	; 48
 398:	31 09       	sbc	r19, r1
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <_Z12getCharIndexh+0x28>
	else if (c == ' ') c_val = 40;
 39c:	80 32       	cpi	r24, 0x20	; 32
 39e:	11 f4       	brne	.+4      	; 0x3a4 <_Z12getCharIndexh+0x28>
 3a0:	28 e2       	ldi	r18, 0x28	; 40
 3a2:	30 e0       	ldi	r19, 0x00	; 0
	return c_val;
}
 3a4:	c9 01       	movw	r24, r18
 3a6:	08 95       	ret

000003a8 <_Z8lcdDelayh>:
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 3a8:	88 23       	and	r24, r24
 3aa:	29 f0       	breq	.+10     	; 0x3b6 <_Z8lcdDelayh+0xe>
 3ac:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 3ae:	00 00       	nop
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 3b0:	9f 5f       	subi	r25, 0xFF	; 255
 3b2:	98 13       	cpse	r25, r24
 3b4:	fc cf       	rjmp	.-8      	; 0x3ae <_Z8lcdDelayh+0x6>
 3b6:	08 95       	ret

000003b8 <_Z7xmitCMDh>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitCMD(unsigned char cmdByte)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 3bc:	c0 e2       	ldi	r28, 0x20	; 32
 3be:	d6 e0       	ldi	r29, 0x06	; 6
 3c0:	90 e2       	ldi	r25, 0x20	; 32
 3c2:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 3c4:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 3ce:	80 e4       	ldi	r24, 0x40	; 64
 3d0:	8e 83       	std	Y+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 3d2:	8d 83       	std	Y+5, r24	; 0x05
	//lcdDelay(1);
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 3da:	88 e2       	ldi	r24, 0x28	; 40
 3dc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 3e0:	81 e1       	ldi	r24, 0x11	; 17
 3e2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 3e6:	86 e3       	ldi	r24, 0x36	; 54
 3e8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 3f2:	8a e3       	ldi	r24, 0x3A	; 58
 3f4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 3f8:	85 e5       	ldi	r24, 0x55	; 85
 3fa:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 3fe:	82 eb       	ldi	r24, 0xB2	; 178
 400:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 404:	8c e0       	ldi	r24, 0x0C	; 12
 406:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 40a:	8c e0       	ldi	r24, 0x0C	; 12
 40c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x33); //
 416:	83 e3       	ldi	r24, 0x33	; 51
 418:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x33); //
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 422:	87 eb       	ldi	r24, 0xB7	; 183
 424:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x35); //
 428:	85 e3       	ldi	r24, 0x35	; 53
 42a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 42e:	8b eb       	ldi	r24, 0xBB	; 187
 430:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 434:	8b e2       	ldi	r24, 0x2B	; 43
 436:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 440:	8c e2       	ldi	r24, 0x2C	; 44
 442:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 446:	82 ec       	ldi	r24, 0xC2	; 194
 448:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x01); //
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 458:	83 ec       	ldi	r24, 0xC3	; 195
 45a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x11); //
 45e:	81 e1       	ldi	r24, 0x11	; 17
 460:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 464:	84 ec       	ldi	r24, 0xC4	; 196
 466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x20); //
 46a:	80 e2       	ldi	r24, 0x20	; 32
 46c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 470:	86 ec       	ldi	r24, 0xC6	; 198
 472:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 476:	8f e0       	ldi	r24, 0x0F	; 15
 478:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 47c:	80 ed       	ldi	r24, 0xD0	; 208
 47e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 482:	84 ea       	ldi	r24, 0xA4	; 164
 484:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 488:	81 ea       	ldi	r24, 0xA1	; 161
 48a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 48e:	80 ee       	ldi	r24, 0xE0	; 224
 490:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 494:	80 ed       	ldi	r24, 0xD0	; 208
 496:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x05); //
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x15); //
 4ac:	85 e1       	ldi	r24, 0x15	; 21
 4ae:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 4b2:	8d e0       	ldi	r24, 0x0D	; 13
 4b4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x37); //
 4b8:	87 e3       	ldi	r24, 0x37	; 55
 4ba:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x43); //
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x47); //
 4c4:	87 e4       	ldi	r24, 0x47	; 71
 4c6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x09); //
 4ca:	89 e0       	ldi	r24, 0x09	; 9
 4cc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x15); //
 4d0:	85 e1       	ldi	r24, 0x15	; 21
 4d2:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x12); //
 4d6:	82 e1       	ldi	r24, 0x12	; 18
 4d8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x16); //
 4dc:	86 e1       	ldi	r24, 0x16	; 22
 4de:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x19); //
 4e2:	89 e1       	ldi	r24, 0x19	; 25
 4e4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 4e8:	81 ee       	ldi	r24, 0xE1	; 225
 4ea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 4ee:	80 ed       	ldi	r24, 0xD0	; 208
 4f0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x05); //
 4fa:	85 e0       	ldi	r24, 0x05	; 5
 4fc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 500:	8d e0       	ldi	r24, 0x0D	; 13
 502:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 506:	8c e0       	ldi	r24, 0x0C	; 12
 508:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x06); //
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 512:	8d e2       	ldi	r24, 0x2D	; 45
 514:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x44); //
 518:	84 e4       	ldi	r24, 0x44	; 68
 51a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x40); //
 51e:	80 e4       	ldi	r24, 0x40	; 64
 520:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 524:	8e e0       	ldi	r24, 0x0E	; 14
 526:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 52a:	8c e1       	ldi	r24, 0x1C	; 28
 52c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x18); //
 530:	88 e1       	ldi	r24, 0x18	; 24
 532:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x16); //
 536:	86 e1       	ldi	r24, 0x16	; 22
 538:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x19); //
 53c:	89 e1       	ldi	r24, 0x19	; 25
 53e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 542:	8a e2       	ldi	r24, 0x2A	; 42
 544:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 55a:	8f ee       	ldi	r24, 0xEF	; 239
 55c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 560:	8b e2       	ldi	r24, 0x2B	; 43
 562:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x01); //
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 578:	8f e3       	ldi	r24, 0x3F	; 63
 57a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 57e:	89 e2       	ldi	r24, 0x29	; 41
 580:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	81 ee       	ldi	r24, 0xE1	; 225
 588:	94 e0       	ldi	r25, 0x04	; 4
 58a:	21 50       	subi	r18, 0x01	; 1
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	90 40       	sbci	r25, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <_Z7initLCDv+0x1b0>
 592:	00 c0       	rjmp	.+0      	; 0x594 <_Z7initLCDv+0x1ba>
 594:	00 00       	nop
 596:	08 95       	ret

00000598 <_Z9xmitHLinessss>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitHLine(short int xPos, short int yPos, short int length, short int color)
{
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ec 01       	movw	r28, r24
 5aa:	d6 2e       	mov	r13, r22
 5ac:	8a 01       	movw	r16, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 5ae:	f3 2e       	mov	r15, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 5b0:	e2 2e       	mov	r14, r18
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
	unsigned char xEndL = (unsigned char)((xPos + length) & 0x00FF);
 5b2:	c8 2e       	mov	r12, r24
 5b4:	c4 0e       	add	r12, r20
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = yStart;
		
	xmitCMD(0x36); // Memory access control
 5b6:	86 e3       	ldi	r24, 0x36	; 54
 5b8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 5bc:	80 e8       	ldi	r24, 0x80	; 128
 5be:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		
	xmitCMD(0x2A); // X Address Set
 5c2:	8a e2       	ldi	r24, 0x2A	; 42
 5c4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 5ce:	8d 2d       	mov	r24, r13
 5d0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 5da:	8d 2d       	mov	r24, r13
 5dc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 5e0:	8b e2       	ldi	r24, 0x2B	; 43
 5e2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 5e6:	8d 2f       	mov	r24, r29
 5e8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 5ec:	8c 2f       	mov	r24, r28
 5ee:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	unsigned char colorH = (unsigned char)(color >> 8);
	unsigned char colorL = (unsigned char)(color & 0x00FF);
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
 5f2:	c0 0f       	add	r28, r16
 5f4:	d1 1f       	adc	r29, r17
	xmitDATA(yEnd); // Finish 239
		
	xmitCMD(0x2B); // Y Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 5f6:	8d 2f       	mov	r24, r29
 5f8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 5fc:	8c 2d       	mov	r24, r12
 5fe:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels
 602:	8c e2       	ldi	r24, 0x2C	; 44
 604:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	for(int i=0; i<=length; i++) {
 608:	11 23       	and	r17, r17
 60a:	64 f0       	brlt	.+24     	; 0x624 <_Z9xmitHLinessss+0x8c>
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 610:	8f 2d       	mov	r24, r15
 612:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(colorL);
 616:	8e 2d       	mov	r24, r14
 618:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
	xmitDATA(xEndL); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<=length; i++) {
 61c:	21 96       	adiw	r28, 0x01	; 1
 61e:	0c 17       	cp	r16, r28
 620:	1d 07       	cpc	r17, r29
 622:	b4 f7       	brge	.-20     	; 0x610 <_Z9xmitHLinessss+0x78>
		xmitDATA(colorH);
		xmitDATA(colorL);
			
	}
}
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	df 90       	pop	r13
 632:	cf 90       	pop	r12
 634:	08 95       	ret

00000636 <_Z9xmitVLinessss>:
	
}

// 60, 160, 120, RED
void xmitVLine(short int xPos, short int yPos, short int length, short int color)
{
 636:	cf 92       	push	r12
 638:	df 92       	push	r13
 63a:	ef 92       	push	r14
 63c:	ff 92       	push	r15
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	d8 2f       	mov	r29, r24
 648:	d9 2e       	mov	r13, r25
 64a:	c6 2f       	mov	r28, r22
 64c:	7a 01       	movw	r14, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 64e:	13 2f       	mov	r17, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 650:	02 2f       	mov	r16, r18
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = xStartH;
	unsigned char xEndL = xStartL;
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = (unsigned char)yPos + (unsigned char)length;
 652:	c6 2e       	mov	r12, r22
 654:	c4 0e       	add	r12, r20
	
	xmitCMD(0x36); // Memory access control
 656:	86 e3       	ldi	r24, 0x36	; 54
 658:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 65c:	80 ea       	ldi	r24, 0xA0	; 160
 65e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2A); // X Address Set
 662:	8a e2       	ldi	r24, 0x2A	; 42
 664:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 668:	8d 2d       	mov	r24, r13
 66a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 66e:	8d 2f       	mov	r24, r29
 670:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xEndH); //
 674:	8d 2d       	mov	r24, r13
 676:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 67a:	8d 2f       	mov	r24, r29
 67c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 680:	8b e2       	ldi	r24, 0x2B	; 43
 682:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 68c:	8c 2f       	mov	r24, r28
 68e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 698:	8c 2d       	mov	r24, r12
 69a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0x2C); // Start writing pixels	
 69e:	8c e2       	ldi	r24, 0x2C	; 44
 6a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	for(int i=0; i<length; i++) {
 6a4:	1e 14       	cp	r1, r14
 6a6:	1f 04       	cpc	r1, r15
 6a8:	64 f4       	brge	.+24     	; 0x6c2 <_Z9xmitVLinessss+0x8c>
 6aa:	c0 e0       	ldi	r28, 0x00	; 0
 6ac:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 6ae:	81 2f       	mov	r24, r17
 6b0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(colorL);
 6b4:	80 2f       	mov	r24, r16
 6b6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239

	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<length; i++) {
 6ba:	21 96       	adiw	r28, 0x01	; 1
 6bc:	ce 15       	cp	r28, r14
 6be:	df 05       	cpc	r29, r15
 6c0:	b1 f7       	brne	.-20     	; 0x6ae <_Z9xmitVLinessss+0x78>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	08 95       	ret

000006d4 <_Z7drawBoxsssss>:
	xmitVLine(193, 16, 223, black);	// Low/Mid separator
	xmitVLine(257, 16, 223, black);	// Mid/High separator
	
}

void drawBox(short int topleft_x, short int topleft_y, short int botright_x, short int botright_y, short int color){
 6d4:	6f 92       	push	r6
 6d6:	7f 92       	push	r7
 6d8:	8f 92       	push	r8
 6da:	9f 92       	push	r9
 6dc:	af 92       	push	r10
 6de:	bf 92       	push	r11
 6e0:	cf 92       	push	r12
 6e2:	df 92       	push	r13
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	7c 01       	movw	r14, r24
 6f2:	eb 01       	movw	r28, r22
 6f4:	6a 01       	movw	r12, r20
 6f6:	59 01       	movw	r10, r18
 6f8:	38 01       	movw	r6, r16
	short int height = botright_y - topleft_y;
 6fa:	89 01       	movw	r16, r18
 6fc:	06 1b       	sub	r16, r22
 6fe:	17 0b       	sbc	r17, r23
	short int width = botright_x - topleft_x;
 700:	4a 01       	movw	r8, r20
 702:	88 1a       	sub	r8, r24
 704:	99 0a       	sbc	r9, r25
	xmitHLine(topleft_x, topleft_y, width, color);	// top
 706:	93 01       	movw	r18, r6
 708:	a4 01       	movw	r20, r8
 70a:	0e 94 cc 02 	call	0x598	; 0x598 <_Z9xmitHLinessss>
	xmitHLine(topleft_x, botright_y, width, color);	// bottom
 70e:	93 01       	movw	r18, r6
 710:	a4 01       	movw	r20, r8
 712:	b5 01       	movw	r22, r10
 714:	c7 01       	movw	r24, r14
 716:	0e 94 cc 02 	call	0x598	; 0x598 <_Z9xmitHLinessss>
	xmitVLine(topleft_x, topleft_y, height, color);	// left
 71a:	93 01       	movw	r18, r6
 71c:	a8 01       	movw	r20, r16
 71e:	be 01       	movw	r22, r28
 720:	c7 01       	movw	r24, r14
 722:	0e 94 1b 03 	call	0x636	; 0x636 <_Z9xmitVLinessss>
	xmitVLine(botright_x, topleft_y, height, color);	// right
 726:	93 01       	movw	r18, r6
 728:	a8 01       	movw	r20, r16
 72a:	be 01       	movw	r22, r28
 72c:	c6 01       	movw	r24, r12
 72e:	0e 94 1b 03 	call	0x636	; 0x636 <_Z9xmitVLinessss>
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	bf 90       	pop	r11
 744:	af 90       	pop	r10
 746:	9f 90       	pop	r9
 748:	8f 90       	pop	r8
 74a:	7f 90       	pop	r7
 74c:	6f 90       	pop	r6
 74e:	08 95       	ret

00000750 <_Z8drawCharhssss>:
	else if (c == ' ') c_val = 40;
	return c_val;
}

void drawChar(unsigned char c, short int xStart, short int yStart, short int text_color, short int bg_color)
{
 750:	8f 92       	push	r8
 752:	9f 92       	push	r9
 754:	af 92       	push	r10
 756:	bf 92       	push	r11
 758:	cf 92       	push	r12
 75a:	df 92       	push	r13
 75c:	ef 92       	push	r14
 75e:	ff 92       	push	r15
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	a0 97       	sbiw	r28, 0x20	; 32
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	de bf       	out	0x3e, r29	; 62
 772:	c8 2e       	mov	r12, r24
 774:	7b 01       	movw	r14, r22
 776:	d4 2e       	mov	r13, r20
	unsigned char tcolorH = (unsigned char)(text_color >> 8);
 778:	b3 2e       	mov	r11, r19
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
 77a:	a2 2e       	mov	r10, r18
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
 77c:	91 2e       	mov	r9, r17
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
 77e:	80 2e       	mov	r8, r16
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
	unsigned char xEndL = (unsigned char)((xStart + 15) & 0x00FF);
	unsigned char yStartL = (unsigned char)yStart;
	unsigned char yEnd = (unsigned char)(yStart + 15);	
	
	xmitCMD(0x36); // Memory access control
 780:	86 e3       	ldi	r24, 0x36	; 54
 782:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 786:	80 ea       	ldi	r24, 0xA0	; 160
 788:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	//xmitCMD(0x36); // Memory access control
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
 78c:	8a e2       	ldi	r24, 0x2A	; 42
 78e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 792:	8f 2d       	mov	r24, r15
 794:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 798:	8e 2d       	mov	r24, r14
 79a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
	unsigned char xStartH = (unsigned char)(xStart >> 8);
	unsigned char xStartL = (unsigned char)(xStart & 0x00FF);
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
 79e:	c7 01       	movw	r24, r14
 7a0:	0f 96       	adiw	r24, 0x0f	; 15
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 7a2:	89 2f       	mov	r24, r25
 7a4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 7a8:	8f e0       	ldi	r24, 0x0F	; 15
 7aa:	8e 0d       	add	r24, r14
 7ac:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 7b0:	8b e2       	ldi	r24, 0x2B	; 43
 7b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yStartL); // Start 0
 7bc:	8d 2d       	mov	r24, r13
 7be:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 7c8:	8f e0       	ldi	r24, 0x0F	; 15
 7ca:	8d 0d       	add	r24, r13
 7cc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	int c_index = getCharIndex(c);
 7d0:	8c 2d       	mov	r24, r12
 7d2:	0e 94 be 01 	call	0x37c	; 0x37c <_Z12getCharIndexh>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	82 95       	swap	r24
 7dc:	92 95       	swap	r25
 7de:	90 7f       	andi	r25, 0xF0	; 240
 7e0:	98 27       	eor	r25, r24
 7e2:	80 7f       	andi	r24, 0xF0	; 240
 7e4:	98 27       	eor	r25, r24
 7e6:	fc 01       	movw	r30, r24
 7e8:	e0 50       	subi	r30, 0x00	; 0
 7ea:	f0 4e       	sbci	r31, 0xE0	; 224
 7ec:	9e 01       	movw	r18, r28
 7ee:	2f 5f       	subi	r18, 0xFF	; 255
 7f0:	3f 4f       	sbci	r19, 0xFF	; 255
 7f2:	79 01       	movw	r14, r18
 7f4:	80 5e       	subi	r24, 0xE0	; 224
 7f6:	9f 4d       	sbci	r25, 0xDF	; 223
 7f8:	d9 01       	movw	r26, r18
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
 7fa:	21 91       	ld	r18, Z+
 7fc:	31 91       	ld	r19, Z+
 7fe:	2d 93       	st	X+, r18
 800:	3d 93       	st	X+, r19
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
	short int chr[16];
	for(int i=0; i<16; i++)
 802:	e8 17       	cp	r30, r24
 804:	f9 07       	cpc	r31, r25
 806:	c9 f7       	brne	.-14     	; 0x7fa <_Z8drawCharhssss+0xaa>
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
 808:	8c e2       	ldi	r24, 0x2C	; 44
 80a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
 80e:	6e 01       	movw	r12, r28
 810:	31 e2       	ldi	r19, 0x21	; 33
 812:	c3 0e       	add	r12, r19
 814:	d1 1c       	adc	r13, r1
 816:	21 c0       	rjmp	.+66     	; 0x85a <_Z8drawCharhssss+0x10a>
	for(int i=0; i<16; i++) {
		for(int j=0; j<16; j++) {
			
			if(chr[i] & (1<<(15-j))){
 818:	f7 01       	movw	r30, r14
 81a:	40 81       	ld	r20, Z
 81c:	51 81       	ldd	r21, Z+1	; 0x01
 81e:	00 2e       	mov	r0, r16
 820:	02 c0       	rjmp	.+4      	; 0x826 <_Z8drawCharhssss+0xd6>
 822:	55 95       	asr	r21
 824:	47 95       	ror	r20
 826:	0a 94       	dec	r0
 828:	e2 f7       	brpl	.-8      	; 0x822 <_Z8drawCharhssss+0xd2>
 82a:	40 ff       	sbrs	r20, 0
 82c:	07 c0       	rjmp	.+14     	; 0x83c <_Z8drawCharhssss+0xec>
				xmitDATA(tcolorH);
 82e:	8b 2d       	mov	r24, r11
 830:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
				xmitDATA(tcolorL);
 834:	8a 2d       	mov	r24, r10
 836:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
 83a:	06 c0       	rjmp	.+12     	; 0x848 <_Z8drawCharhssss+0xf8>
			}
			else{
				xmitDATA(bgcolorH);
 83c:	89 2d       	mov	r24, r9
 83e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
				xmitDATA(bgcolorL);
 842:	88 2d       	mov	r24, r8
 844:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
 848:	01 50       	subi	r16, 0x01	; 1
 84a:	11 09       	sbc	r17, r1
 84c:	28 f7       	brcc	.-54     	; 0x818 <_Z8drawCharhssss+0xc8>
 84e:	22 e0       	ldi	r18, 0x02	; 2
 850:	e2 0e       	add	r14, r18
 852:	f1 1c       	adc	r15, r1
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<16; i++) {
 854:	ec 14       	cp	r14, r12
 856:	fd 04       	cpc	r15, r13
 858:	19 f0       	breq	.+6      	; 0x860 <_Z8drawCharhssss+0x110>
	xmitDATA(0x00); //
	xmitDATA(yStartL); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
 85a:	0f e0       	ldi	r16, 0x0F	; 15
 85c:	10 e0       	ldi	r17, 0x00	; 0
 85e:	dc cf       	rjmp	.-72     	; 0x818 <_Z8drawCharhssss+0xc8>
				xmitDATA(bgcolorL);
			}
			
		}
	}	
}
 860:	a0 96       	adiw	r28, 0x20	; 32
 862:	cd bf       	out	0x3d, r28	; 61
 864:	de bf       	out	0x3e, r29	; 62
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	9f 90       	pop	r9
 87c:	8f 90       	pop	r8
 87e:	08 95       	ret

00000880 <_Z10drawStringPKcssss>:
	if(val<63){
		fillBox(x_left, y_top, x_right, level, (int)BLACK);	// Fill in empty space white
	}
}

void drawString(const char* str, short int xStart, short int yStart, short int text_color, short int bg_color) {
 880:	8f 92       	push	r8
 882:	9f 92       	push	r9
 884:	af 92       	push	r10
 886:	bf 92       	push	r11
 888:	cf 92       	push	r12
 88a:	df 92       	push	r13
 88c:	ef 92       	push	r14
 88e:	ff 92       	push	r15
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	fc 01       	movw	r30, r24
 89a:	eb 01       	movw	r28, r22
 89c:	6a 01       	movw	r12, r20
 89e:	59 01       	movw	r10, r18
 8a0:	48 01       	movw	r8, r16
	while (*str) {
 8a2:	80 81       	ld	r24, Z
 8a4:	88 23       	and	r24, r24
 8a6:	81 f0       	breq	.+32     	; 0x8c8 <_Z10drawStringPKcssss+0x48>
 8a8:	7f 01       	movw	r14, r30
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	e9 1a       	sub	r14, r25
 8ae:	f9 0a       	sbc	r15, r25
		drawChar(*str++, xStart, yStart, text_color, bg_color);
 8b0:	84 01       	movw	r16, r8
 8b2:	95 01       	movw	r18, r10
 8b4:	a6 01       	movw	r20, r12
 8b6:	be 01       	movw	r22, r28
 8b8:	0e 94 a8 03 	call	0x750	; 0x750 <_Z8drawCharhssss>
		xStart += 16;
 8bc:	60 96       	adiw	r28, 0x10	; 16
		fillBox(x_left, y_top, x_right, level, (int)BLACK);	// Fill in empty space white
	}
}

void drawString(const char* str, short int xStart, short int yStart, short int text_color, short int bg_color) {
	while (*str) {
 8be:	f7 01       	movw	r30, r14
 8c0:	81 91       	ld	r24, Z+
 8c2:	7f 01       	movw	r14, r30
 8c4:	81 11       	cpse	r24, r1
 8c6:	f4 cf       	rjmp	.-24     	; 0x8b0 <_Z10drawStringPKcssss+0x30>
		drawChar(*str++, xStart, yStart, text_color, bg_color);
		xStart += 16;
	}
}
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	ff 90       	pop	r15
 8d2:	ef 90       	pop	r14
 8d4:	df 90       	pop	r13
 8d6:	cf 90       	pop	r12
 8d8:	bf 90       	pop	r11
 8da:	af 90       	pop	r10
 8dc:	9f 90       	pop	r9
 8de:	8f 90       	pop	r8
 8e0:	08 95       	ret

000008e2 <_Z11drawDisplayh>:
			
		}
	}	
}

void drawDisplay(unsigned char preset_no) {
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
	short int white = BLACK;
	short int black = WHITE;
	
	// Current preset header
	drawString("PRESET 1", 0, 0, black, white);
 8e6:	00 e0       	ldi	r16, 0x00	; 0
 8e8:	10 e0       	ldi	r17, 0x00	; 0
 8ea:	2f ef       	ldi	r18, 0xFF	; 255
 8ec:	3f ef       	ldi	r19, 0xFF	; 255
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	95 e2       	ldi	r25, 0x25	; 37
 8fa:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	
	// Top channel labels
	drawString("VOL", 7, 30, black, white);
 8fe:	2f ef       	ldi	r18, 0xFF	; 255
 900:	3f ef       	ldi	r19, 0xFF	; 255
 902:	4e e1       	ldi	r20, 0x1E	; 30
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	67 e0       	ldi	r22, 0x07	; 7
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	89 e2       	ldi	r24, 0x29	; 41
 90c:	95 e2       	ldi	r25, 0x25	; 37
 90e:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("GAIN", 63, 30, black, white);
 912:	2f ef       	ldi	r18, 0xFF	; 255
 914:	3f ef       	ldi	r19, 0xFF	; 255
 916:	4e e1       	ldi	r20, 0x1E	; 30
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	6f e3       	ldi	r22, 0x3F	; 63
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	8d e2       	ldi	r24, 0x2D	; 45
 920:	95 e2       	ldi	r25, 0x25	; 37
 922:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("LOW", 136, 30, black, white);
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	3f ef       	ldi	r19, 0xFF	; 255
 92a:	4e e1       	ldi	r20, 0x1E	; 30
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	68 e8       	ldi	r22, 0x88	; 136
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	82 e3       	ldi	r24, 0x32	; 50
 934:	95 e2       	ldi	r25, 0x25	; 37
 936:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("MID", 201, 30, black, white);
 93a:	2f ef       	ldi	r18, 0xFF	; 255
 93c:	3f ef       	ldi	r19, 0xFF	; 255
 93e:	4e e1       	ldi	r20, 0x1E	; 30
 940:	50 e0       	ldi	r21, 0x00	; 0
 942:	69 ec       	ldi	r22, 0xC9	; 201
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	86 e3       	ldi	r24, 0x36	; 54
 948:	95 e2       	ldi	r25, 0x25	; 37
 94a:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("HIGH", 256, 30, black, white);
 94e:	2f ef       	ldi	r18, 0xFF	; 255
 950:	3f ef       	ldi	r19, 0xFF	; 255
 952:	4e e1       	ldi	r20, 0x1E	; 30
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	71 e0       	ldi	r23, 0x01	; 1
 95a:	8a e3       	ldi	r24, 0x3A	; 58
 95c:	95 e2       	ldi	r25, 0x25	; 37
 95e:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	
	// Bottom channel labels
	drawString("VOL", 7, 139, black, white);
 962:	2f ef       	ldi	r18, 0xFF	; 255
 964:	3f ef       	ldi	r19, 0xFF	; 255
 966:	4b e8       	ldi	r20, 0x8B	; 139
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	67 e0       	ldi	r22, 0x07	; 7
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	89 e2       	ldi	r24, 0x29	; 41
 970:	95 e2       	ldi	r25, 0x25	; 37
 972:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("GAIN", 63, 139, black, white);
 976:	2f ef       	ldi	r18, 0xFF	; 255
 978:	3f ef       	ldi	r19, 0xFF	; 255
 97a:	4b e8       	ldi	r20, 0x8B	; 139
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	6f e3       	ldi	r22, 0x3F	; 63
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	8d e2       	ldi	r24, 0x2D	; 45
 984:	95 e2       	ldi	r25, 0x25	; 37
 986:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("LOW", 136, 139, black, white);
 98a:	2f ef       	ldi	r18, 0xFF	; 255
 98c:	3f ef       	ldi	r19, 0xFF	; 255
 98e:	4b e8       	ldi	r20, 0x8B	; 139
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	68 e8       	ldi	r22, 0x88	; 136
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	82 e3       	ldi	r24, 0x32	; 50
 998:	95 e2       	ldi	r25, 0x25	; 37
 99a:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("MID", 201, 139, black, white);
 99e:	2f ef       	ldi	r18, 0xFF	; 255
 9a0:	3f ef       	ldi	r19, 0xFF	; 255
 9a2:	4b e8       	ldi	r20, 0x8B	; 139
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	69 ec       	ldi	r22, 0xC9	; 201
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	86 e3       	ldi	r24, 0x36	; 54
 9ac:	95 e2       	ldi	r25, 0x25	; 37
 9ae:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	drawString("HIGH", 256, 139, black, white);
 9b2:	2f ef       	ldi	r18, 0xFF	; 255
 9b4:	3f ef       	ldi	r19, 0xFF	; 255
 9b6:	4b e8       	ldi	r20, 0x8B	; 139
 9b8:	50 e0       	ldi	r21, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	71 e0       	ldi	r23, 0x01	; 1
 9be:	8a e3       	ldi	r24, 0x3A	; 58
 9c0:	95 e2       	ldi	r25, 0x25	; 37
 9c2:	0e 94 40 04 	call	0x880	; 0x880 <_Z10drawStringPKcssss>
	
	// Top channel levels
	drawBox(10, 50, 50, 115, black);	// Vol level
 9c6:	0f ef       	ldi	r16, 0xFF	; 255
 9c8:	1f ef       	ldi	r17, 0xFF	; 255
 9ca:	23 e7       	ldi	r18, 0x73	; 115
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	42 e3       	ldi	r20, 0x32	; 50
 9d0:	50 e0       	ldi	r21, 0x00	; 0
 9d2:	62 e3       	ldi	r22, 0x32	; 50
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	8a e0       	ldi	r24, 0x0A	; 10
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(75, 50, 115, 115, black);	// Gain level
 9de:	23 e7       	ldi	r18, 0x73	; 115
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	43 e7       	ldi	r20, 0x73	; 115
 9e4:	50 e0       	ldi	r21, 0x00	; 0
 9e6:	62 e3       	ldi	r22, 0x32	; 50
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	8b e4       	ldi	r24, 0x4B	; 75
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(140, 50, 180, 115, black);	// Low level
 9f2:	23 e7       	ldi	r18, 0x73	; 115
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	44 eb       	ldi	r20, 0xB4	; 180
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	62 e3       	ldi	r22, 0x32	; 50
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	8c e8       	ldi	r24, 0x8C	; 140
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(205, 50, 245, 115, black);	// Mid level
 a06:	23 e7       	ldi	r18, 0x73	; 115
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	45 ef       	ldi	r20, 0xF5	; 245
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	62 e3       	ldi	r22, 0x32	; 50
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	8d ec       	ldi	r24, 0xCD	; 205
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(270, 50, 310, 115, black);	// High level
 a1a:	23 e7       	ldi	r18, 0x73	; 115
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	46 e3       	ldi	r20, 0x36	; 54
 a20:	51 e0       	ldi	r21, 0x01	; 1
 a22:	62 e3       	ldi	r22, 0x32	; 50
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	8e e0       	ldi	r24, 0x0E	; 14
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	
	// Bottom channel levels
	drawBox(10, 159, 50, 224, black);	// Vol level
 a2e:	20 ee       	ldi	r18, 0xE0	; 224
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	42 e3       	ldi	r20, 0x32	; 50
 a34:	50 e0       	ldi	r21, 0x00	; 0
 a36:	6f e9       	ldi	r22, 0x9F	; 159
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	8a e0       	ldi	r24, 0x0A	; 10
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(75, 159, 115, 224, black);	// Gain level
 a42:	20 ee       	ldi	r18, 0xE0	; 224
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	43 e7       	ldi	r20, 0x73	; 115
 a48:	50 e0       	ldi	r21, 0x00	; 0
 a4a:	6f e9       	ldi	r22, 0x9F	; 159
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	8b e4       	ldi	r24, 0x4B	; 75
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(140, 159, 180, 224, black);	// Low level
 a56:	20 ee       	ldi	r18, 0xE0	; 224
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	44 eb       	ldi	r20, 0xB4	; 180
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	6f e9       	ldi	r22, 0x9F	; 159
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	8c e8       	ldi	r24, 0x8C	; 140
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(205, 159, 245, 224, black);	// Mid level
 a6a:	20 ee       	ldi	r18, 0xE0	; 224
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	45 ef       	ldi	r20, 0xF5	; 245
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	6f e9       	ldi	r22, 0x9F	; 159
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	8d ec       	ldi	r24, 0xCD	; 205
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	drawBox(270, 159, 310, 224, black);	// High level
 a7e:	20 ee       	ldi	r18, 0xE0	; 224
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	46 e3       	ldi	r20, 0x36	; 54
 a84:	51 e0       	ldi	r21, 0x01	; 1
 a86:	6f e9       	ldi	r22, 0x9F	; 159
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	8e e0       	ldi	r24, 0x0E	; 14
 a8c:	91 e0       	ldi	r25, 0x01	; 1
 a8e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_Z7drawBoxsssss>
	
	// Draw all lines last
	xmitHLine(0, 16, 319, black);	// Header separator
 a92:	2f ef       	ldi	r18, 0xFF	; 255
 a94:	3f ef       	ldi	r19, 0xFF	; 255
 a96:	4f e3       	ldi	r20, 0x3F	; 63
 a98:	51 e0       	ldi	r21, 0x01	; 1
 a9a:	60 e1       	ldi	r22, 0x10	; 16
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 cc 02 	call	0x598	; 0x598 <_Z9xmitHLinessss>
	xmitHLine(0, 125, 319, black);	// Top/Bottom Channel separator
 aa6:	2f ef       	ldi	r18, 0xFF	; 255
 aa8:	3f ef       	ldi	r19, 0xFF	; 255
 aaa:	4f e3       	ldi	r20, 0x3F	; 63
 aac:	51 e0       	ldi	r21, 0x01	; 1
 aae:	6d e7       	ldi	r22, 0x7D	; 125
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 cc 02 	call	0x598	; 0x598 <_Z9xmitHLinessss>
	
	xmitVLine(63, 16, 223, black);	// Vol/Gain separator
 aba:	2f ef       	ldi	r18, 0xFF	; 255
 abc:	3f ef       	ldi	r19, 0xFF	; 255
 abe:	4f ed       	ldi	r20, 0xDF	; 223
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	60 e1       	ldi	r22, 0x10	; 16
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	8f e3       	ldi	r24, 0x3F	; 63
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 1b 03 	call	0x636	; 0x636 <_Z9xmitVLinessss>
	xmitVLine(127, 16, 223, black);	// Gain/Low separator
 ace:	2f ef       	ldi	r18, 0xFF	; 255
 ad0:	3f ef       	ldi	r19, 0xFF	; 255
 ad2:	4f ed       	ldi	r20, 0xDF	; 223
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	60 e1       	ldi	r22, 0x10	; 16
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	8f e7       	ldi	r24, 0x7F	; 127
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 1b 03 	call	0x636	; 0x636 <_Z9xmitVLinessss>
	xmitVLine(193, 16, 223, black);	// Low/Mid separator
 ae2:	2f ef       	ldi	r18, 0xFF	; 255
 ae4:	3f ef       	ldi	r19, 0xFF	; 255
 ae6:	4f ed       	ldi	r20, 0xDF	; 223
 ae8:	50 e0       	ldi	r21, 0x00	; 0
 aea:	60 e1       	ldi	r22, 0x10	; 16
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	81 ec       	ldi	r24, 0xC1	; 193
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 1b 03 	call	0x636	; 0x636 <_Z9xmitVLinessss>
	xmitVLine(257, 16, 223, black);	// Mid/High separator
 af6:	2f ef       	ldi	r18, 0xFF	; 255
 af8:	3f ef       	ldi	r19, 0xFF	; 255
 afa:	4f ed       	ldi	r20, 0xDF	; 223
 afc:	50 e0       	ldi	r21, 0x00	; 0
 afe:	60 e1       	ldi	r22, 0x10	; 16
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	91 e0       	ldi	r25, 0x01	; 1
 b06:	0e 94 1b 03 	call	0x636	; 0x636 <_Z9xmitVLinessss>
	
}
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	08 95       	ret

00000b10 <_Z7fillBoxsssss>:
	xmitHLine(topleft_x, botright_y, width, color);	// bottom
	xmitVLine(topleft_x, topleft_y, height, color);	// left
	xmitVLine(botright_x, topleft_y, height, color);	// right
}

void fillBox(short int topleft_x, short int topleft_y, short int botright_x, short int botright_y, short int color){
 b10:	6f 92       	push	r6
 b12:	7f 92       	push	r7
 b14:	8f 92       	push	r8
 b16:	9f 92       	push	r9
 b18:	af 92       	push	r10
 b1a:	bf 92       	push	r11
 b1c:	cf 92       	push	r12
 b1e:	df 92       	push	r13
 b20:	ef 92       	push	r14
 b22:	ff 92       	push	r15
 b24:	0f 93       	push	r16
 b26:	1f 93       	push	r17
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	5c 01       	movw	r10, r24
 b2e:	3b 01       	movw	r6, r22
 b30:	ea 01       	movw	r28, r20
 b32:	49 01       	movw	r8, r18
	short int height = botright_y - topleft_y;
 b34:	79 01       	movw	r14, r18
 b36:	e6 1a       	sub	r14, r22
 b38:	f7 0a       	sbc	r15, r23
	short int width = botright_x - topleft_x;
 b3a:	6a 01       	movw	r12, r20
 b3c:	c8 1a       	sub	r12, r24
 b3e:	d9 0a       	sbc	r13, r25
	unsigned char xEndH = (unsigned char)(botright_x >> 8);
	unsigned char xEndL = (unsigned char)(botright_x & 0x00FF);
	unsigned char yStart = (unsigned char)topleft_y;
	unsigned char yEnd = (unsigned char)botright_y;
	
	xmitCMD(0x36); // Memory access control
 b40:	86 e3       	ldi	r24, 0x36	; 54
 b42:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 b46:	80 ea       	ldi	r24, 0xA0	; 160
 b48:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
		xmitCMD(0x2A); // X Address Set
 b4c:	8a e2       	ldi	r24, 0x2A	; 42
 b4e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
		xmitDATA(xStartH); //
 b52:	8b 2d       	mov	r24, r11
 b54:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(xStartL); // Start left x
 b58:	8a 2d       	mov	r24, r10
 b5a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(xEndH); //
 b5e:	8d 2f       	mov	r24, r29
 b60:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(xEndL); // Finish right x
 b64:	8c 2f       	mov	r24, r28
 b66:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		
		xmitCMD(0x2B); // /y Address Set
 b6a:	8b e2       	ldi	r24, 0x2B	; 43
 b6c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
		xmitDATA(0x00); //
 b70:	80 e0       	ldi	r24, 0x00	; 0
 b72:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(yStart); // Start top y
 b76:	86 2d       	mov	r24, r6
 b78:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(0x00); //
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(yEnd); // Finish bottom y
 b82:	88 2d       	mov	r24, r8
 b84:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2C); // Start writing pixels
 b88:	8c e2       	ldi	r24, 0x2C	; 44
 b8a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	for(int i=0; i<=width; i++)
 b8e:	dd 20       	and	r13, r13
 b90:	a4 f4       	brge	.+40     	; 0xbba <_Z7fillBoxsssss+0xaa>
 b92:	18 c0       	rjmp	.+48     	; 0xbc4 <_Z7fillBoxsssss+0xb4>
	for(int j=0; j<=height; j++) {
 b94:	c0 e0       	ldi	r28, 0x00	; 0
 b96:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 b98:	81 2f       	mov	r24, r17
 b9a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(colorL);
 b9e:	80 2f       	mov	r24, r16
 ba0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(0x00); //
		xmitDATA(yEnd); // Finish bottom y
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<=width; i++)
	for(int j=0; j<=height; j++) {
 ba4:	21 96       	adiw	r28, 0x01	; 1
 ba6:	ec 16       	cp	r14, r28
 ba8:	fd 06       	cpc	r15, r29
 baa:	b4 f7       	brge	.-20     	; 0xb98 <_Z7fillBoxsssss+0x88>
		xmitDATA(yStart); // Start top y
		xmitDATA(0x00); //
		xmitDATA(yEnd); // Finish bottom y
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<=width; i++)
 bac:	8f ef       	ldi	r24, 0xFF	; 255
 bae:	a8 1a       	sub	r10, r24
 bb0:	b8 0a       	sbc	r11, r24
 bb2:	ca 14       	cp	r12, r10
 bb4:	db 04       	cpc	r13, r11
 bb6:	1c f4       	brge	.+6      	; 0xbbe <_Z7fillBoxsssss+0xae>
 bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <_Z7fillBoxsssss+0xb4>
 bba:	a1 2c       	mov	r10, r1
 bbc:	b1 2c       	mov	r11, r1
	for(int j=0; j<=height; j++) {
 bbe:	ff 20       	and	r15, r15
 bc0:	4c f7       	brge	.-46     	; 0xb94 <_Z7fillBoxsssss+0x84>
 bc2:	f4 cf       	rjmp	.-24     	; 0xbac <_Z7fillBoxsssss+0x9c>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	ff 90       	pop	r15
 bce:	ef 90       	pop	r14
 bd0:	df 90       	pop	r13
 bd2:	cf 90       	pop	r12
 bd4:	bf 90       	pop	r11
 bd6:	af 90       	pop	r10
 bd8:	9f 90       	pop	r9
 bda:	8f 90       	pop	r8
 bdc:	7f 90       	pop	r7
 bde:	6f 90       	pop	r6
 be0:	08 95       	ret

00000be2 <_Z7fillLCDs>:
			
	}
}

void fillLCD(short int color)
{
 be2:	0f 93       	push	r16
 be4:	1f 93       	push	r17
	fillBox(0, 0, 320, 240, color);
 be6:	8c 01       	movw	r16, r24
 be8:	20 ef       	ldi	r18, 0xF0	; 240
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	40 e4       	ldi	r20, 0x40	; 64
 bee:	51 e0       	ldi	r21, 0x01	; 1
 bf0:	60 e0       	ldi	r22, 0x00	; 0
 bf2:	70 e0       	ldi	r23, 0x00	; 0
 bf4:	80 e0       	ldi	r24, 0x00	; 0
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	0e 94 88 05 	call	0xb10	; 0xb10 <_Z7fillBoxsssss>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
	*/
	
}
 bfc:	1f 91       	pop	r17
 bfe:	0f 91       	pop	r16
 c00:	08 95       	ret

00000c02 <_Z9drawLevelsssss>:
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}

void drawLevel(short int x_left, short int x_right, short int y_top, short int y_bot, short int val){
 c02:	8f 92       	push	r8
 c04:	9f 92       	push	r9
 c06:	af 92       	push	r10
 c08:	bf 92       	push	r11
 c0a:	cf 92       	push	r12
 c0c:	df 92       	push	r13
 c0e:	ef 92       	push	r14
 c10:	ff 92       	push	r15
 c12:	0f 93       	push	r16
 c14:	1f 93       	push	r17
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	7c 01       	movw	r14, r24
 c1c:	6b 01       	movw	r12, r22
 c1e:	4a 01       	movw	r8, r20
 c20:	e8 01       	movw	r28, r16
	short int blue = BLUE;
	short int black = BLACK;
	
	short int level = y_bot - val;			// Get height to draw level (value from 0-255 mapped to height of box)
 c22:	59 01       	movw	r10, r18
 c24:	a0 1a       	sub	r10, r16
 c26:	b1 0a       	sbc	r11, r17
	if(val>0){
 c28:	1c 16       	cp	r1, r28
 c2a:	1d 06       	cpc	r1, r29
 c2c:	34 f4       	brge	.+12     	; 0xc3a <_Z9drawLevelsssss+0x38>
		fillBox(x_left, level, x_right, y_bot, (int)RED);	// Fill in gain level blue
 c2e:	00 e0       	ldi	r16, 0x00	; 0
 c30:	18 ef       	ldi	r17, 0xF8	; 248
 c32:	ab 01       	movw	r20, r22
 c34:	b5 01       	movw	r22, r10
 c36:	0e 94 88 05 	call	0xb10	; 0xb10 <_Z7fillBoxsssss>
	}
	if(val<63){
 c3a:	ef 97       	sbiw	r28, 0x3f	; 63
 c3c:	44 f4       	brge	.+16     	; 0xc4e <_Z9drawLevelsssss+0x4c>
		fillBox(x_left, y_top, x_right, level, (int)BLACK);	// Fill in empty space white
 c3e:	00 e0       	ldi	r16, 0x00	; 0
 c40:	10 e0       	ldi	r17, 0x00	; 0
 c42:	95 01       	movw	r18, r10
 c44:	a6 01       	movw	r20, r12
 c46:	b4 01       	movw	r22, r8
 c48:	c7 01       	movw	r24, r14
 c4a:	0e 94 88 05 	call	0xb10	; 0xb10 <_Z7fillBoxsssss>
	}
}
 c4e:	df 91       	pop	r29
 c50:	cf 91       	pop	r28
 c52:	1f 91       	pop	r17
 c54:	0f 91       	pop	r16
 c56:	ff 90       	pop	r15
 c58:	ef 90       	pop	r14
 c5a:	df 90       	pop	r13
 c5c:	cf 90       	pop	r12
 c5e:	bf 90       	pop	r11
 c60:	af 90       	pop	r10
 c62:	9f 90       	pop	r9
 c64:	8f 90       	pop	r8
 c66:	08 95       	ret

00000c68 <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 c70:	8d b7       	in	r24, 0x3d	; 61
 c72:	9e b7       	in	r25, 0x3e	; 62
 c74:	86 5e       	subi	r24, 0xE6	; 230
 c76:	91 09       	sbc	r25, r1
 c78:	8d bf       	out	0x3d, r24	; 61
 c7a:	9e bf       	out	0x3e, r25	; 62
 c7c:	ed b7       	in	r30, 0x3d	; 61
 c7e:	fe b7       	in	r31, 0x3e	; 62
 c80:	31 96       	adiw	r30, 0x01	; 1
 c82:	7f 01       	movw	r14, r30
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 c84:	80 91 5c 25 	lds	r24, 0x255C
 c88:	90 91 5d 25 	lds	r25, 0x255D
 c8c:	0f 2e       	mov	r0, r31
 c8e:	f7 e1       	ldi	r31, 0x17	; 23
 c90:	9f 2e       	mov	r9, r31
 c92:	f0 2d       	mov	r31, r0
 c94:	98 9e       	mul	r9, r24
 c96:	f0 01       	movw	r30, r0
 c98:	99 9e       	mul	r9, r25
 c9a:	f0 0d       	add	r31, r0
 c9c:	11 24       	eor	r1, r1
 c9e:	ee 0d       	add	r30, r14
 ca0:	ff 1d       	adc	r31, r15
 ca2:	2f e3       	ldi	r18, 0x3F	; 63
 ca4:	35 e2       	ldi	r19, 0x25	; 37
 ca6:	20 83       	st	Z, r18
 ca8:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 caa:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 cac:	2b e4       	ldi	r18, 0x4B	; 75
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	22 87       	std	Z+10, r18	; 0x0a
 cb2:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 cb4:	45 e5       	ldi	r20, 0x55	; 85
 cb6:	50 e0       	ldi	r21, 0x00	; 0
 cb8:	46 87       	std	Z+14, r20	; 0x0e
 cba:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 cbc:	24 87       	std	Z+12, r18	; 0x0c
 cbe:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 cc0:	42 83       	std	Z+2, r20	; 0x02
 cc2:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 cc4:	0c e8       	ldi	r16, 0x8C	; 140
 cc6:	10 e0       	ldi	r17, 0x00	; 0
 cc8:	01 8b       	std	Z+17, r16	; 0x11
 cca:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 ccc:	ab e9       	ldi	r26, 0x9B	; 155
 cce:	b0 e0       	ldi	r27, 0x00	; 0
 cd0:	a3 8b       	std	Z+19, r26	; 0x13
 cd2:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 cd4:	16 82       	std	Z+6, r1	; 0x06
 cd6:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 cd8:	10 86       	std	Z+8, r1	; 0x08
 cda:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 cdc:	0f 2e       	mov	r0, r31
 cde:	f2 e3       	ldi	r31, 0x32	; 50
 ce0:	4f 2e       	mov	r4, r31
 ce2:	51 2c       	mov	r5, r1
 ce4:	f0 2d       	mov	r31, r0
 ce6:	44 82       	std	Z+4, r4	; 0x04
 ce8:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 cea:	0f 2e       	mov	r0, r31
 cec:	f4 eb       	ldi	r31, 0xB4	; 180
 cee:	af 2e       	mov	r10, r31
 cf0:	b1 2c       	mov	r11, r1
 cf2:	f0 2d       	mov	r31, r0
 cf4:	a5 8a       	std	Z+21, r10	; 0x15
 cf6:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;	
 cf8:	6c 01       	movw	r12, r24
 cfa:	6f ef       	ldi	r22, 0xFF	; 255
 cfc:	c6 1a       	sub	r12, r22
 cfe:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 d00:	0f 2e       	mov	r0, r31
 d02:	fc e4       	ldi	r31, 0x4C	; 76
 d04:	6f 2e       	mov	r6, r31
 d06:	f5 e2       	ldi	r31, 0x25	; 37
 d08:	7f 2e       	mov	r7, r31
 d0a:	f0 2d       	mov	r31, r0
 d0c:	67 8a       	std	Z+23, r6	; 0x17
 d0e:	70 8e       	std	Z+24, r7	; 0x18
	userQueue[numConfig].cleanOn = true;
 d10:	9c 9c       	mul	r9, r12
 d12:	f0 01       	movw	r30, r0
 d14:	9d 9c       	mul	r9, r13
 d16:	f0 0d       	add	r31, r0
 d18:	11 24       	eor	r1, r1
 d1a:	ee 0d       	add	r30, r14
 d1c:	ff 1d       	adc	r31, r15
 d1e:	ff 24       	eor	r15, r15
 d20:	f3 94       	inc	r15
 d22:	f0 8a       	std	Z+16, r15	; 0x10
	userQueue[numConfig].bass = 85;
 d24:	42 87       	std	Z+10, r20	; 0x0a
 d26:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 d28:	26 87       	std	Z+14, r18	; 0x0e
 d2a:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 d2c:	24 87       	std	Z+12, r18	; 0x0c
 d2e:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 d30:	29 e1       	ldi	r18, 0x19	; 25
 d32:	30 e0       	ldi	r19, 0x00	; 0
 d34:	22 83       	std	Z+2, r18	; 0x02
 d36:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 d38:	01 8b       	std	Z+17, r16	; 0x11
 d3a:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 d3c:	a3 8b       	std	Z+19, r26	; 0x13
 d3e:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 d40:	16 82       	std	Z+6, r1	; 0x06
 d42:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 d44:	10 86       	std	Z+8, r1	; 0x08
 d46:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 d48:	44 82       	std	Z+4, r4	; 0x04
 d4a:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 d4c:	a5 8a       	std	Z+21, r10	; 0x15
 d4e:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;
 d50:	02 96       	adiw	r24, 0x02	; 2
 d52:	80 93 5c 25 	sts	0x255C, r24
 d56:	90 93 5d 25 	sts	0x255D, r25
	
	init();
 d5a:	0e 94 21 01 	call	0x242	; 0x242 <_Z4initv>
	initUSART();
 d5e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z9initUSARTv>
	initLCD();
 d62:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 d66:	e0 e2       	ldi	r30, 0x20	; 32
 d68:	f6 e0       	ldi	r31, 0x06	; 6
 d6a:	80 e1       	ldi	r24, 0x10	; 16
 d6c:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 d6e:	82 e0       	ldi	r24, 0x02	; 2
 d70:	85 83       	std	Z+5, r24	; 0x05
	short int cur_q = 0;
	
	short int BKCOL = BLUE;
	short int char_color = BLACK;
	short int bg_color = WHITE;
	fillLCD(char_color);
 d72:	80 e0       	ldi	r24, 0x00	; 0
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z7fillLCDs>
	drawDisplay('1');
 d7a:	81 e3       	ldi	r24, 0x31	; 49
 d7c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z11drawDisplayh>
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
	
	//xmitCMD(0x2C); // Start writing pixels
	
	short int qPos[11] = {0,0,0,0,0,0,0,0,0,0,0};
	short int pos = 0;
 d80:	c1 2c       	mov	r12, r1
 d82:	d1 2c       	mov	r13, r1
	fillLCD(char_color);
	drawDisplay('1');
	
	while (1)
	{
		if(USARTE1_STATUS & USART_RXCIF_bm) // If there is unread data from Main CPU...
 d84:	0f 2e       	mov	r0, r31
 d86:	f1 eb       	ldi	r31, 0xB1	; 177
 d88:	ef 2e       	mov	r14, r31
 d8a:	fa e0       	ldi	r31, 0x0A	; 10
 d8c:	ff 2e       	mov	r15, r31
 d8e:	f0 2d       	mov	r31, r0
 d90:	f7 01       	movw	r30, r14
 d92:	80 81       	ld	r24, Z
 d94:	88 23       	and	r24, r24
 d96:	e4 f7       	brge	.-8      	; 0xd90 <main+0x128>
		{
			char c = getByte(3);
 d98:	83 e0       	ldi	r24, 0x03	; 3
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z7getBytei>
			if (c >= '0' && c<='9'){
				cur_q = (int)(c-'0');
			}
			if(c == '+'){
 da0:	8b 32       	cpi	r24, 0x2B	; 43
 da2:	69 f4       	brne	.+26     	; 0xdbe <main+0x156>
 da4:	ff ef       	ldi	r31, 0xFF	; 255
 da6:	cf 1a       	sub	r12, r31
 da8:	df 0a       	sbc	r13, r31
 daa:	60 e4       	ldi	r22, 0x40	; 64
 dac:	c6 16       	cp	r12, r22
 dae:	d1 04       	cpc	r13, r1
 db0:	74 f0       	brlt	.+28     	; 0xdce <main+0x166>
 db2:	0f 2e       	mov	r0, r31
 db4:	ff e3       	ldi	r31, 0x3F	; 63
 db6:	cf 2e       	mov	r12, r31
 db8:	d1 2c       	mov	r13, r1
 dba:	f0 2d       	mov	r31, r0
 dbc:	08 c0       	rjmp	.+16     	; 0xdce <main+0x166>
				pos = min(pos+1, 63);
			}
			else if(c == '-'){
 dbe:	8d 32       	cpi	r24, 0x2D	; 45
 dc0:	31 f4       	brne	.+12     	; 0xdce <main+0x166>
 dc2:	81 e0       	ldi	r24, 0x01	; 1
 dc4:	c8 1a       	sub	r12, r24
 dc6:	d1 08       	sbc	r13, r1
 dc8:	12 f4       	brpl	.+4      	; 0xdce <main+0x166>
 dca:	c1 2c       	mov	r12, r1
 dcc:	d1 2c       	mov	r13, r1
			}
			//short int val = qPos[0];
			//if (val > 255) encoder_val = 255;
			//else if (val < 0) encoder_val = 0;
			//else encoder_val = val;
			drawLevel(76, 114, 160, 223, pos);
 dce:	86 01       	movw	r16, r12
 dd0:	2f ed       	ldi	r18, 0xDF	; 223
 dd2:	30 e0       	ldi	r19, 0x00	; 0
 dd4:	40 ea       	ldi	r20, 0xA0	; 160
 dd6:	50 e0       	ldi	r21, 0x00	; 0
 dd8:	62 e7       	ldi	r22, 0x72	; 114
 dda:	70 e0       	ldi	r23, 0x00	; 0
 ddc:	8c e4       	ldi	r24, 0x4C	; 76
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	0e 94 01 06 	call	0xc02	; 0xc02 <_Z9drawLevelsssss>
 de4:	d5 cf       	rjmp	.-86     	; 0xd90 <main+0x128>

00000de6 <_exit>:
 de6:	f8 94       	cli

00000de8 <__stop_program>:
 de8:	ff cf       	rjmp	.-2      	; 0xde8 <__stop_program>
