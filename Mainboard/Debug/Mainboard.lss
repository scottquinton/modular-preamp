
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000054a  00802000  00000ac6  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080254a  0080254a  000010a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e05  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034e  00000000  00000000  00002fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045d  00000000  00000000  00003307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00003764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000822  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e66  00000000  00000000  00004226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	15 e2       	ldi	r17, 0x25	; 37
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 ec       	ldi	r30, 0xC6	; 198
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 34       	cpi	r26, 0x4A	; 74
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	25 e2       	ldi	r18, 0x25	; 37
 228:	aa e4       	ldi	r26, 0x4A	; 74
 22a:	b5 e2       	ldi	r27, 0x25	; 37
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ac 34       	cpi	r26, 0x4C	; 76
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 b0 04 	call	0x960	; 0x960 <main>
 23a:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_Z4initv>:
	drawDisplay('1');
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 248:	e0 e5       	ldi	r30, 0x50	; 80
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	81 ff       	sbrs	r24, 1
 250:	fd cf       	rjmp	.-6      	; 0x24c <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	88 ef       	ldi	r24, 0xF8	; 248
 268:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 270:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 272:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 274:	14 96       	adiw	r26, 0x04	; 4
 276:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 278:	e0 e2       	ldi	r30, 0x20	; 32
 27a:	f6 e0       	ldi	r31, 0x06	; 6
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 280:	a0 e4       	ldi	r26, 0x40	; 64
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	1c 92       	st	X, r1
 28a:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 290:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 292:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 294:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 296:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 298:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 29a:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 29c:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2a0:	9b eb       	ldi	r25, 0xBB	; 187
 2a2:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2a6:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2b0:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z4initv+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z4initv+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f9 e0       	ldi	r31, 0x09	; 9
 2ca:	2c e0       	ldi	r18, 0x0C	; 12
 2cc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2d2:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2e2:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 2e4:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2e6:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 2e8:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	fa e0       	ldi	r31, 0x0A	; 10
 2ee:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f0:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 2f2:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2f4:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 2fa:	e0 eb       	ldi	r30, 0xB0	; 176
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 300:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 302:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 304:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 306:	35 83       	std	Z+5, r19	; 0x05
 308:	08 95       	ret

0000030a <_Z8xmitDATAh>:
}
*/

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 30a:	e0 e2       	ldi	r30, 0x20	; 32
 30c:	f6 e0       	ldi	r31, 0x06	; 6
 30e:	90 e2       	ldi	r25, 0x20	; 32
 310:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 312:	80 93 a4 06 	sts	0x06A4, r24
	//lcdDelay(1);
	PORTB.OUTCLR = 0b01000000; // WR goes low
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	86 83       	std	Z+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 31a:	85 83       	std	Z+5, r24	; 0x05
 31c:	08 95       	ret

0000031e <_Z12getCharIndexh>:
		xmitDATA(colorL);
	}
}

int getCharIndex(unsigned char c) {
	int c_val = (int)(c);
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
	if (c >= 'A' && c <= 'Z') c_val -= ('A' - 10);
 322:	9f eb       	ldi	r25, 0xBF	; 191
 324:	98 0f       	add	r25, r24
 326:	9a 31       	cpi	r25, 0x1A	; 26
 328:	18 f4       	brcc	.+6      	; 0x330 <_Z12getCharIndexh+0x12>
 32a:	27 53       	subi	r18, 0x37	; 55
 32c:	31 09       	sbc	r19, r1
 32e:	0b c0       	rjmp	.+22     	; 0x346 <_Z12getCharIndexh+0x28>
	else if (c >= '0' && c <= '9') c_val -= '0';
 330:	90 ed       	ldi	r25, 0xD0	; 208
 332:	98 0f       	add	r25, r24
 334:	9a 30       	cpi	r25, 0x0A	; 10
 336:	18 f4       	brcc	.+6      	; 0x33e <_Z12getCharIndexh+0x20>
 338:	20 53       	subi	r18, 0x30	; 48
 33a:	31 09       	sbc	r19, r1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <_Z12getCharIndexh+0x28>
	else if (c == ' ') c_val = 40;
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	11 f4       	brne	.+4      	; 0x346 <_Z12getCharIndexh+0x28>
 342:	28 e2       	ldi	r18, 0x28	; 40
 344:	30 e0       	ldi	r19, 0x00	; 0
	return c_val;
}
 346:	c9 01       	movw	r24, r18
 348:	08 95       	ret

0000034a <_Z8lcdDelayh>:
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 34a:	88 23       	and	r24, r24
 34c:	29 f0       	breq	.+10     	; 0x358 <_Z8lcdDelayh+0xe>
 34e:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 350:	00 00       	nop
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 352:	9f 5f       	subi	r25, 0xFF	; 255
 354:	98 13       	cpse	r25, r24
 356:	fc cf       	rjmp	.-8      	; 0x350 <_Z8lcdDelayh+0x6>
 358:	08 95       	ret

0000035a <_Z7xmitCMDh>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitCMD(unsigned char cmdByte)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 35e:	c0 e2       	ldi	r28, 0x20	; 32
 360:	d6 e0       	ldi	r29, 0x06	; 6
 362:	90 e2       	ldi	r25, 0x20	; 32
 364:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 366:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	0e 94 a5 01 	call	0x34a	; 0x34a <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 370:	80 e4       	ldi	r24, 0x40	; 64
 372:	8e 83       	std	Y+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 374:	8d 83       	std	Y+5, r24	; 0x05
	//lcdDelay(1);
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 37c:	88 e2       	ldi	r24, 0x28	; 40
 37e:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 382:	81 e1       	ldi	r24, 0x11	; 17
 384:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 388:	86 e3       	ldi	r24, 0x36	; 54
 38a:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 394:	8a e3       	ldi	r24, 0x3A	; 58
 396:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 39a:	85 e5       	ldi	r24, 0x55	; 85
 39c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 3a0:	82 eb       	ldi	r24, 0xB2	; 178
 3a2:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 3ac:	8c e0       	ldi	r24, 0x0C	; 12
 3ae:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 3b8:	83 e3       	ldi	r24, 0x33	; 51
 3ba:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 3be:	83 e3       	ldi	r24, 0x33	; 51
 3c0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 3c4:	87 eb       	ldi	r24, 0xB7	; 183
 3c6:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x35); //
 3ca:	85 e3       	ldi	r24, 0x35	; 53
 3cc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 3d0:	8b eb       	ldi	r24, 0xBB	; 187
 3d2:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 3d6:	8b e2       	ldi	r24, 0x2B	; 43
 3d8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 3dc:	80 ec       	ldi	r24, 0xC0	; 192
 3de:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 3e2:	8c e2       	ldi	r24, 0x2C	; 44
 3e4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 3e8:	82 ec       	ldi	r24, 0xC2	; 194
 3ea:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x01); //
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 3fa:	83 ec       	ldi	r24, 0xC3	; 195
 3fc:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x11); //
 400:	81 e1       	ldi	r24, 0x11	; 17
 402:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 406:	84 ec       	ldi	r24, 0xC4	; 196
 408:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x20); //
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 412:	86 ec       	ldi	r24, 0xC6	; 198
 414:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 418:	8f e0       	ldi	r24, 0x0F	; 15
 41a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 41e:	80 ed       	ldi	r24, 0xD0	; 208
 420:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 424:	84 ea       	ldi	r24, 0xA4	; 164
 426:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 42a:	81 ea       	ldi	r24, 0xA1	; 161
 42c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 430:	80 ee       	ldi	r24, 0xE0	; 224
 432:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 436:	80 ed       	ldi	r24, 0xD0	; 208
 438:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 448:	8e e0       	ldi	r24, 0x0E	; 14
 44a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 44e:	85 e1       	ldi	r24, 0x15	; 21
 450:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x37); //
 45a:	87 e3       	ldi	r24, 0x37	; 55
 45c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x43); //
 460:	83 e4       	ldi	r24, 0x43	; 67
 462:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x47); //
 466:	87 e4       	ldi	r24, 0x47	; 71
 468:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x09); //
 46c:	89 e0       	ldi	r24, 0x09	; 9
 46e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 472:	85 e1       	ldi	r24, 0x15	; 21
 474:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x12); //
 478:	82 e1       	ldi	r24, 0x12	; 18
 47a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 47e:	86 e1       	ldi	r24, 0x16	; 22
 480:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 484:	89 e1       	ldi	r24, 0x19	; 25
 486:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 48a:	81 ee       	ldi	r24, 0xE1	; 225
 48c:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 490:	80 ed       	ldi	r24, 0xD0	; 208
 492:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 49c:	85 e0       	ldi	r24, 0x05	; 5
 49e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 4a2:	8d e0       	ldi	r24, 0x0D	; 13
 4a4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x06); //
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 4b4:	8d e2       	ldi	r24, 0x2D	; 45
 4b6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x44); //
 4ba:	84 e4       	ldi	r24, 0x44	; 68
 4bc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x40); //
 4c0:	80 e4       	ldi	r24, 0x40	; 64
 4c2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 4c6:	8e e0       	ldi	r24, 0x0E	; 14
 4c8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 4cc:	8c e1       	ldi	r24, 0x1C	; 28
 4ce:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x18); //
 4d2:	88 e1       	ldi	r24, 0x18	; 24
 4d4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 4d8:	86 e1       	ldi	r24, 0x16	; 22
 4da:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 4de:	89 e1       	ldi	r24, 0x19	; 25
 4e0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 4e4:	8a e2       	ldi	r24, 0x2A	; 42
 4e6:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 4fc:	8f ee       	ldi	r24, 0xEF	; 239
 4fe:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 502:	8b e2       	ldi	r24, 0x2B	; 43
 504:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x01); //
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 51a:	8f e3       	ldi	r24, 0x3F	; 63
 51c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 520:	89 e2       	ldi	r24, 0x29	; 41
 522:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	81 ee       	ldi	r24, 0xE1	; 225
 52a:	94 e0       	ldi	r25, 0x04	; 4
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <_Z7initLCDv+0x1b0>
 534:	00 c0       	rjmp	.+0      	; 0x536 <_Z7initLCDv+0x1ba>
 536:	00 00       	nop
 538:	08 95       	ret

0000053a <_Z9xmitHLinessss>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitHLine(short int xPos, short int yPos, short int length, short int color)
{
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	ec 01       	movw	r28, r24
 54c:	d6 2e       	mov	r13, r22
 54e:	8a 01       	movw	r16, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 550:	f3 2e       	mov	r15, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 552:	e2 2e       	mov	r14, r18
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
	unsigned char xEndL = (unsigned char)((xPos + length) & 0x00FF);
 554:	c8 2e       	mov	r12, r24
 556:	c4 0e       	add	r12, r20
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = yStart;
		
	xmitCMD(0x36); // Memory access control
 558:	86 e3       	ldi	r24, 0x36	; 54
 55a:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2A); // X Address Set
 564:	8a e2       	ldi	r24, 0x2A	; 42
 566:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 570:	8d 2d       	mov	r24, r13
 572:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 57c:	8d 2d       	mov	r24, r13
 57e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 582:	8b e2       	ldi	r24, 0x2B	; 43
 584:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 588:	8d 2f       	mov	r24, r29
 58a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 58e:	8c 2f       	mov	r24, r28
 590:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	unsigned char colorH = (unsigned char)(color >> 8);
	unsigned char colorL = (unsigned char)(color & 0x00FF);
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
 594:	c0 0f       	add	r28, r16
 596:	d1 1f       	adc	r29, r17
	xmitDATA(yEnd); // Finish 239
		
	xmitCMD(0x2B); // Y Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 598:	8d 2f       	mov	r24, r29
 59a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 59e:	8c 2d       	mov	r24, r12
 5a0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels
 5a4:	8c e2       	ldi	r24, 0x2C	; 44
 5a6:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	for(int i=0; i<length; i++) {
 5aa:	10 16       	cp	r1, r16
 5ac:	11 06       	cpc	r1, r17
 5ae:	64 f4       	brge	.+24     	; 0x5c8 <_Z9xmitHLinessss+0x8e>
 5b0:	c0 e0       	ldi	r28, 0x00	; 0
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 5b4:	8f 2d       	mov	r24, r15
 5b6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		xmitDATA(colorL);
 5ba:	8e 2d       	mov	r24, r14
 5bc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
	xmitDATA(xEndL); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<length; i++) {
 5c0:	21 96       	adiw	r28, 0x01	; 1
 5c2:	c0 17       	cp	r28, r16
 5c4:	d1 07       	cpc	r29, r17
 5c6:	b1 f7       	brne	.-20     	; 0x5b4 <_Z9xmitHLinessss+0x7a>
		xmitDATA(colorH);
		xmitDATA(colorL);
			
	}
}
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	ff 90       	pop	r15
 5d2:	ef 90       	pop	r14
 5d4:	df 90       	pop	r13
 5d6:	cf 90       	pop	r12
 5d8:	08 95       	ret

000005da <_Z7fillLCDs>:

void fillLCD(short int color)
{
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
	unsigned char colorH = (unsigned char)(color >> 8);
 5ea:	09 2f       	mov	r16, r25
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 5ec:	18 2f       	mov	r17, r24
	
	xmitCMD(0x36); // Memory access control
 5ee:	86 e3       	ldi	r24, 0x36	; 54
 5f0:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, row/column exhange rest default
 5f4:	80 e8       	ldi	r24, 0x80	; 128
 5f6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 5fa:	8a e2       	ldi	r24, 0x2A	; 42
 5fc:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 612:	8f ee       	ldi	r24, 0xEF	; 239
 614:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 618:	8b e2       	ldi	r24, 0x2B	; 43
 61a:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x01); //
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 630:	8f e3       	ldi	r24, 0x3F	; 63
 632:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels	
 636:	8c e2       	ldi	r24, 0x2C	; 44
 638:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
 63c:	68 94       	set
 63e:	ee 24       	eor	r14, r14
 640:	e6 f8       	bld	r14, 6
 642:	ff 24       	eor	r15, r15
 644:	f3 94       	inc	r15
			
	}
}

void fillLCD(short int color)
{
 646:	0f 2e       	mov	r0, r31
 648:	f0 ef       	ldi	r31, 0xF0	; 240
 64a:	cf 2e       	mov	r12, r31
 64c:	f0 2d       	mov	r31, r0
 64e:	d1 2c       	mov	r13, r1
 650:	0c c0       	rjmp	.+24     	; 0x66a <_Z7fillLCDs+0x90>
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
	for(int j=0; j<240; j++) {
		xmitDATA(colorH);
 652:	80 2f       	mov	r24, r16
 654:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		xmitDATA(colorL);
 658:	81 2f       	mov	r24, r17
 65a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
 65e:	21 97       	sbiw	r28, 0x01	; 1
	xmitDATA(0x01); //
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
	for(int j=0; j<240; j++) {
 660:	c1 f7       	brne	.-16     	; 0x652 <_Z7fillLCDs+0x78>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	e8 1a       	sub	r14, r24
 666:	f1 08       	sbc	r15, r1
	xmitDATA(0x00); // Start 0
	xmitDATA(0x01); //
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
 668:	19 f0       	breq	.+6      	; 0x670 <_Z7fillLCDs+0x96>
			
	}
}

void fillLCD(short int color)
{
 66a:	cc 2d       	mov	r28, r12
 66c:	dd 2d       	mov	r29, r13
 66e:	f1 cf       	rjmp	.-30     	; 0x652 <_Z7fillLCDs+0x78>
	for(int j=0; j<240; j++) {
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
	
}
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	df 90       	pop	r13
 67e:	cf 90       	pop	r12
 680:	08 95       	ret

00000682 <_Z9xmitVLinessss>:

// 60, 160, 120, RED
void xmitVLine(short int xPos, short int yPos, short int length, short int color)
{
 682:	cf 92       	push	r12
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	d8 2f       	mov	r29, r24
 694:	d9 2e       	mov	r13, r25
 696:	c6 2f       	mov	r28, r22
 698:	7a 01       	movw	r14, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 69a:	13 2f       	mov	r17, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 69c:	02 2f       	mov	r16, r18
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = xStartH;
	unsigned char xEndL = xStartL;
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = (unsigned char)yPos + (unsigned char)length;
 69e:	c6 2e       	mov	r12, r22
 6a0:	c4 0e       	add	r12, r20
	
	xmitCMD(0x36); // Memory access control
 6a2:	86 e3       	ldi	r24, 0x36	; 54
 6a4:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 6a8:	80 ea       	ldi	r24, 0xA0	; 160
 6aa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2A); // X Address Set
 6ae:	8a e2       	ldi	r24, 0x2A	; 42
 6b0:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 6b4:	8d 2d       	mov	r24, r13
 6b6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 6ba:	8d 2f       	mov	r24, r29
 6bc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndH); //
 6c0:	8d 2d       	mov	r24, r13
 6c2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 6c6:	8d 2f       	mov	r24, r29
 6c8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 6cc:	8b e2       	ldi	r24, 0x2B	; 43
 6ce:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 6d8:	8c 2f       	mov	r24, r28
 6da:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 6e4:	8c 2d       	mov	r24, r12
 6e6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2C); // Start writing pixels	
 6ea:	8c e2       	ldi	r24, 0x2C	; 44
 6ec:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	for(int i=0; i<length; i++) {
 6f0:	1e 14       	cp	r1, r14
 6f2:	1f 04       	cpc	r1, r15
 6f4:	64 f4       	brge	.+24     	; 0x70e <_Z9xmitVLinessss+0x8c>
 6f6:	c0 e0       	ldi	r28, 0x00	; 0
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 6fa:	81 2f       	mov	r24, r17
 6fc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		xmitDATA(colorL);
 700:	80 2f       	mov	r24, r16
 702:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239

	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<length; i++) {
 706:	21 96       	adiw	r28, 0x01	; 1
 708:	ce 15       	cp	r28, r14
 70a:	df 05       	cpc	r29, r15
 70c:	b1 f7       	brne	.-20     	; 0x6fa <_Z9xmitVLinessss+0x78>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	ff 90       	pop	r15
 718:	ef 90       	pop	r14
 71a:	df 90       	pop	r13
 71c:	cf 90       	pop	r12
 71e:	08 95       	ret

00000720 <_Z8drawCharhssss>:
	else if (c == ' ') c_val = 40;
	return c_val;
}

void drawChar(unsigned char c, short int xStart, short int yStart, short int text_color, short int bg_color)
{
 720:	8f 92       	push	r8
 722:	9f 92       	push	r9
 724:	af 92       	push	r10
 726:	bf 92       	push	r11
 728:	cf 92       	push	r12
 72a:	df 92       	push	r13
 72c:	ef 92       	push	r14
 72e:	ff 92       	push	r15
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
 73c:	a0 97       	sbiw	r28, 0x20	; 32
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	de bf       	out	0x3e, r29	; 62
 742:	c8 2e       	mov	r12, r24
 744:	7b 01       	movw	r14, r22
 746:	d4 2e       	mov	r13, r20
	unsigned char tcolorH = (unsigned char)(text_color >> 8);
 748:	b3 2e       	mov	r11, r19
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
 74a:	a2 2e       	mov	r10, r18
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
 74c:	91 2e       	mov	r9, r17
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
 74e:	80 2e       	mov	r8, r16
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
	unsigned char xEndL = (unsigned char)((xStart + 15) & 0x00FF);
	unsigned char yStartL = (unsigned char)yStart;
	unsigned char yEnd = (unsigned char)(yStart + 15);	
	
	xmitCMD(0x36); // Memory access control
 750:	86 e3       	ldi	r24, 0x36	; 54
 752:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 756:	80 ea       	ldi	r24, 0xA0	; 160
 758:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	//xmitCMD(0x36); // Memory access control
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
 75c:	8a e2       	ldi	r24, 0x2A	; 42
 75e:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 762:	8f 2d       	mov	r24, r15
 764:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 768:	8e 2d       	mov	r24, r14
 76a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
	unsigned char xStartH = (unsigned char)(xStart >> 8);
	unsigned char xStartL = (unsigned char)(xStart & 0x00FF);
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
 76e:	c7 01       	movw	r24, r14
 770:	0f 96       	adiw	r24, 0x0f	; 15
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 772:	89 2f       	mov	r24, r25
 774:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 778:	8f e0       	ldi	r24, 0x0F	; 15
 77a:	8e 0d       	add	r24, r14
 77c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 780:	8b e2       	ldi	r24, 0x2B	; 43
 782:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
	xmitDATA(0x00); //
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStartL); // Start 0
 78c:	8d 2d       	mov	r24, r13
 78e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 798:	8f e0       	ldi	r24, 0x0F	; 15
 79a:	8d 0d       	add	r24, r13
 79c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	int c_index = getCharIndex(c);
 7a0:	8c 2d       	mov	r24, r12
 7a2:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z12getCharIndexh>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	82 95       	swap	r24
 7ac:	92 95       	swap	r25
 7ae:	90 7f       	andi	r25, 0xF0	; 240
 7b0:	98 27       	eor	r25, r24
 7b2:	80 7f       	andi	r24, 0xF0	; 240
 7b4:	98 27       	eor	r25, r24
 7b6:	fc 01       	movw	r30, r24
 7b8:	e0 50       	subi	r30, 0x00	; 0
 7ba:	f0 4e       	sbci	r31, 0xE0	; 224
 7bc:	9e 01       	movw	r18, r28
 7be:	2f 5f       	subi	r18, 0xFF	; 255
 7c0:	3f 4f       	sbci	r19, 0xFF	; 255
 7c2:	79 01       	movw	r14, r18
 7c4:	80 5e       	subi	r24, 0xE0	; 224
 7c6:	9f 4d       	sbci	r25, 0xDF	; 223
 7c8:	d9 01       	movw	r26, r18
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
 7ca:	21 91       	ld	r18, Z+
 7cc:	31 91       	ld	r19, Z+
 7ce:	2d 93       	st	X+, r18
 7d0:	3d 93       	st	X+, r19
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
	short int chr[16];
	for(int i=0; i<16; i++)
 7d2:	e8 17       	cp	r30, r24
 7d4:	f9 07       	cpc	r31, r25
 7d6:	c9 f7       	brne	.-14     	; 0x7ca <_Z8drawCharhssss+0xaa>
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
 7d8:	8c e2       	ldi	r24, 0x2C	; 44
 7da:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z7xmitCMDh>
 7de:	6e 01       	movw	r12, r28
 7e0:	31 e2       	ldi	r19, 0x21	; 33
 7e2:	c3 0e       	add	r12, r19
 7e4:	d1 1c       	adc	r13, r1
 7e6:	21 c0       	rjmp	.+66     	; 0x82a <_Z8drawCharhssss+0x10a>
	for(int i=0; i<16; i++) {
		for(int j=0; j<16; j++) {
			
			if(chr[i] & (1<<(15-j))){
 7e8:	f7 01       	movw	r30, r14
 7ea:	40 81       	ld	r20, Z
 7ec:	51 81       	ldd	r21, Z+1	; 0x01
 7ee:	00 2e       	mov	r0, r16
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <_Z8drawCharhssss+0xd6>
 7f2:	55 95       	asr	r21
 7f4:	47 95       	ror	r20
 7f6:	0a 94       	dec	r0
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <_Z8drawCharhssss+0xd2>
 7fa:	40 ff       	sbrs	r20, 0
 7fc:	07 c0       	rjmp	.+14     	; 0x80c <_Z8drawCharhssss+0xec>
				xmitDATA(tcolorH);
 7fe:	8b 2d       	mov	r24, r11
 800:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
				xmitDATA(tcolorL);
 804:	8a 2d       	mov	r24, r10
 806:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
 80a:	06 c0       	rjmp	.+12     	; 0x818 <_Z8drawCharhssss+0xf8>
			}
			else{
				xmitDATA(bgcolorH);
 80c:	89 2d       	mov	r24, r9
 80e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
				xmitDATA(bgcolorL);
 812:	88 2d       	mov	r24, r8
 814:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
 818:	01 50       	subi	r16, 0x01	; 1
 81a:	11 09       	sbc	r17, r1
 81c:	28 f7       	brcc	.-54     	; 0x7e8 <_Z8drawCharhssss+0xc8>
 81e:	22 e0       	ldi	r18, 0x02	; 2
 820:	e2 0e       	add	r14, r18
 822:	f1 1c       	adc	r15, r1
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<16; i++) {
 824:	ec 14       	cp	r14, r12
 826:	fd 04       	cpc	r15, r13
 828:	19 f0       	breq	.+6      	; 0x830 <_Z8drawCharhssss+0x110>
	xmitDATA(0x00); //
	xmitDATA(yStartL); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
 82a:	0f e0       	ldi	r16, 0x0F	; 15
 82c:	10 e0       	ldi	r17, 0x00	; 0
 82e:	dc cf       	rjmp	.-72     	; 0x7e8 <_Z8drawCharhssss+0xc8>
				xmitDATA(bgcolorL);
			}
			
		}
	}	
}
 830:	a0 96       	adiw	r28, 0x20	; 32
 832:	cd bf       	out	0x3d, r28	; 61
 834:	de bf       	out	0x3e, r29	; 62
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	df 90       	pop	r13
 844:	cf 90       	pop	r12
 846:	bf 90       	pop	r11
 848:	af 90       	pop	r10
 84a:	9f 90       	pop	r9
 84c:	8f 90       	pop	r8
 84e:	08 95       	ret

00000850 <_Z10drawStringPKcssss>:
	xmitVLine(194, 16, 223, black);
	xmitVLine(258, 16, 223, black);
	drawString("VOL", 5, 30, black, white);
}

void drawString(const char* str, short int xStart, short int yStart, short int text_color, short int bg_color) {
 850:	8f 92       	push	r8
 852:	9f 92       	push	r9
 854:	af 92       	push	r10
 856:	bf 92       	push	r11
 858:	cf 92       	push	r12
 85a:	df 92       	push	r13
 85c:	ef 92       	push	r14
 85e:	ff 92       	push	r15
 860:	0f 93       	push	r16
 862:	1f 93       	push	r17
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	fc 01       	movw	r30, r24
 86a:	eb 01       	movw	r28, r22
 86c:	6a 01       	movw	r12, r20
 86e:	59 01       	movw	r10, r18
 870:	48 01       	movw	r8, r16
	while (*str) {
 872:	80 81       	ld	r24, Z
 874:	88 23       	and	r24, r24
 876:	81 f0       	breq	.+32     	; 0x898 <_Z10drawStringPKcssss+0x48>
 878:	7f 01       	movw	r14, r30
 87a:	9f ef       	ldi	r25, 0xFF	; 255
 87c:	e9 1a       	sub	r14, r25
 87e:	f9 0a       	sbc	r15, r25
		drawChar(*str++, xStart, yStart, text_color, bg_color);
 880:	84 01       	movw	r16, r8
 882:	95 01       	movw	r18, r10
 884:	a6 01       	movw	r20, r12
 886:	be 01       	movw	r22, r28
 888:	0e 94 90 03 	call	0x720	; 0x720 <_Z8drawCharhssss>
		xStart += 16;
 88c:	60 96       	adiw	r28, 0x10	; 16
	xmitVLine(258, 16, 223, black);
	drawString("VOL", 5, 30, black, white);
}

void drawString(const char* str, short int xStart, short int yStart, short int text_color, short int bg_color) {
	while (*str) {
 88e:	f7 01       	movw	r30, r14
 890:	81 91       	ld	r24, Z+
 892:	7f 01       	movw	r14, r30
 894:	81 11       	cpse	r24, r1
 896:	f4 cf       	rjmp	.-24     	; 0x880 <_Z10drawStringPKcssss+0x30>
		drawChar(*str++, xStart, yStart, text_color, bg_color);
		xStart += 16;
	}
}
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	df 90       	pop	r13
 8a6:	cf 90       	pop	r12
 8a8:	bf 90       	pop	r11
 8aa:	af 90       	pop	r10
 8ac:	9f 90       	pop	r9
 8ae:	8f 90       	pop	r8
 8b0:	08 95       	ret

000008b2 <_Z11drawDisplayh>:
			
		}
	}	
}

void drawDisplay(unsigned char preset_no) {
 8b2:	0f 93       	push	r16
 8b4:	1f 93       	push	r17
	short int black = BLACK;
	short int white = WHITE;
	drawString("PRESET 1", 0, 0, black, white);
 8b6:	0f ef       	ldi	r16, 0xFF	; 255
 8b8:	1f ef       	ldi	r17, 0xFF	; 255
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	80 e2       	ldi	r24, 0x20	; 32
 8c8:	95 e2       	ldi	r25, 0x25	; 37
 8ca:	0e 94 28 04 	call	0x850	; 0x850 <_Z10drawStringPKcssss>
	xmitHLine(0, 16, 319, black);
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	4f e3       	ldi	r20, 0x3F	; 63
 8d4:	51 e0       	ldi	r21, 0x01	; 1
 8d6:	60 e1       	ldi	r22, 0x10	; 16
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z9xmitHLinessss>
	xmitHLine(0, 125, 319, black);
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	4f e3       	ldi	r20, 0x3F	; 63
 8e8:	51 e0       	ldi	r21, 0x01	; 1
 8ea:	6d e7       	ldi	r22, 0x7D	; 125
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z9xmitHLinessss>
	xmitVLine(64, 16, 223, black);
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	4f ed       	ldi	r20, 0xDF	; 223
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	60 e1       	ldi	r22, 0x10	; 16
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	80 e4       	ldi	r24, 0x40	; 64
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 41 03 	call	0x682	; 0x682 <_Z9xmitVLinessss>
	xmitVLine(128, 16, 223, black);
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	4f ed       	ldi	r20, 0xDF	; 223
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	60 e1       	ldi	r22, 0x10	; 16
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	80 e8       	ldi	r24, 0x80	; 128
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 41 03 	call	0x682	; 0x682 <_Z9xmitVLinessss>
	xmitVLine(194, 16, 223, black);
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	4f ed       	ldi	r20, 0xDF	; 223
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	60 e1       	ldi	r22, 0x10	; 16
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	82 ec       	ldi	r24, 0xC2	; 194
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 41 03 	call	0x682	; 0x682 <_Z9xmitVLinessss>
	xmitVLine(258, 16, 223, black);
 932:	20 e0       	ldi	r18, 0x00	; 0
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	4f ed       	ldi	r20, 0xDF	; 223
 938:	50 e0       	ldi	r21, 0x00	; 0
 93a:	60 e1       	ldi	r22, 0x10	; 16
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	91 e0       	ldi	r25, 0x01	; 1
 942:	0e 94 41 03 	call	0x682	; 0x682 <_Z9xmitVLinessss>
	drawString("VOL", 5, 30, black, white);
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	4e e1       	ldi	r20, 0x1E	; 30
 94c:	50 e0       	ldi	r21, 0x00	; 0
 94e:	65 e0       	ldi	r22, 0x05	; 5
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	89 e2       	ldi	r24, 0x29	; 41
 954:	95 e2       	ldi	r25, 0x25	; 37
 956:	0e 94 28 04 	call	0x850	; 0x850 <_Z10drawStringPKcssss>
}
 95a:	1f 91       	pop	r17
 95c:	0f 91       	pop	r16
 95e:	08 95       	ret

00000960 <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 960:	2f 92       	push	r2
 962:	3f 92       	push	r3
 964:	5f 92       	push	r5
 966:	6f 92       	push	r6
 968:	7f 92       	push	r7
 96a:	8f 92       	push	r8
 96c:	9f 92       	push	r9
 96e:	af 92       	push	r10
 970:	bf 92       	push	r11
 972:	cf 92       	push	r12
 974:	df 92       	push	r13
 976:	ef 92       	push	r14
 978:	ff 92       	push	r15
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
	drawString("T", 0, 196, char_color, bg_color);
	drawString(" ", 0, 211, char_color, bg_color);
	drawString("T", 0, 226, char_color, bg_color);
	*/
	drawDisplay('1');
}
 986:	6d b6       	in	r6, 0x3d	; 61
 988:	7e b6       	in	r7, 0x3e	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 98a:	8d b7       	in	r24, 0x3d	; 61
 98c:	9e b7       	in	r25, 0x3e	; 62
 98e:	86 5e       	subi	r24, 0xE6	; 230
 990:	91 09       	sbc	r25, r1
 992:	8d bf       	out	0x3d, r24	; 61
 994:	9e bf       	out	0x3e, r25	; 62
 996:	01 96       	adiw	r24, 0x01	; 1
 998:	4c 01       	movw	r8, r24
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 99a:	80 91 4a 25 	lds	r24, 0x254A
 99e:	90 91 4b 25 	lds	r25, 0x254B
 9a2:	0f 2e       	mov	r0, r31
 9a4:	f7 e1       	ldi	r31, 0x17	; 23
 9a6:	5f 2e       	mov	r5, r31
 9a8:	f0 2d       	mov	r31, r0
 9aa:	58 9e       	mul	r5, r24
 9ac:	f0 01       	movw	r30, r0
 9ae:	59 9e       	mul	r5, r25
 9b0:	f0 0d       	add	r31, r0
 9b2:	11 24       	eor	r1, r1
 9b4:	e8 0d       	add	r30, r8
 9b6:	f9 1d       	adc	r31, r9
 9b8:	2d e2       	ldi	r18, 0x2D	; 45
 9ba:	35 e2       	ldi	r19, 0x25	; 37
 9bc:	20 83       	st	Z, r18
 9be:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 9c0:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 9c2:	2b e4       	ldi	r18, 0x4B	; 75
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	22 87       	std	Z+10, r18	; 0x0a
 9c8:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 9ca:	45 e5       	ldi	r20, 0x55	; 85
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	46 87       	std	Z+14, r20	; 0x0e
 9d0:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 9d2:	24 87       	std	Z+12, r18	; 0x0c
 9d4:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 9d6:	42 83       	std	Z+2, r20	; 0x02
 9d8:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 9da:	0f 2e       	mov	r0, r31
 9dc:	fc e8       	ldi	r31, 0x8C	; 140
 9de:	ef 2e       	mov	r14, r31
 9e0:	f1 2c       	mov	r15, r1
 9e2:	f0 2d       	mov	r31, r0
 9e4:	e1 8a       	std	Z+17, r14	; 0x11
 9e6:	f2 8a       	std	Z+18, r15	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 9e8:	0b e9       	ldi	r16, 0x9B	; 155
 9ea:	10 e0       	ldi	r17, 0x00	; 0
 9ec:	03 8b       	std	Z+19, r16	; 0x13
 9ee:	14 8b       	std	Z+20, r17	; 0x14
	userQueue[numConfig].auxVol = 0;
 9f0:	16 82       	std	Z+6, r1	; 0x06
 9f2:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 9f4:	10 86       	std	Z+8, r1	; 0x08
 9f6:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 9f8:	a2 e3       	ldi	r26, 0x32	; 50
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	a4 83       	std	Z+4, r26	; 0x04
 9fe:	b5 83       	std	Z+5, r27	; 0x05
	userQueue[numConfig].v_Valve = 180;
 a00:	0f 2e       	mov	r0, r31
 a02:	f4 eb       	ldi	r31, 0xB4	; 180
 a04:	2f 2e       	mov	r2, r31
 a06:	31 2c       	mov	r3, r1
 a08:	f0 2d       	mov	r31, r0
 a0a:	25 8a       	std	Z+21, r2	; 0x15
 a0c:	36 8a       	std	Z+22, r3	; 0x16
	numConfig++;	
 a0e:	6c 01       	movw	r12, r24
 a10:	6f ef       	ldi	r22, 0xFF	; 255
 a12:	c6 1a       	sub	r12, r22
 a14:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 a16:	0f 2e       	mov	r0, r31
 a18:	fa e3       	ldi	r31, 0x3A	; 58
 a1a:	af 2e       	mov	r10, r31
 a1c:	f5 e2       	ldi	r31, 0x25	; 37
 a1e:	bf 2e       	mov	r11, r31
 a20:	f0 2d       	mov	r31, r0
 a22:	a7 8a       	std	Z+23, r10	; 0x17
 a24:	b0 8e       	std	Z+24, r11	; 0x18
	userQueue[numConfig].cleanOn = true;
 a26:	5c 9c       	mul	r5, r12
 a28:	f0 01       	movw	r30, r0
 a2a:	5d 9c       	mul	r5, r13
 a2c:	f0 0d       	add	r31, r0
 a2e:	11 24       	eor	r1, r1
 a30:	e8 0d       	add	r30, r8
 a32:	f9 1d       	adc	r31, r9
 a34:	dd 24       	eor	r13, r13
 a36:	d3 94       	inc	r13
 a38:	d0 8a       	std	Z+16, r13	; 0x10
	userQueue[numConfig].bass = 85;
 a3a:	42 87       	std	Z+10, r20	; 0x0a
 a3c:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 a3e:	26 87       	std	Z+14, r18	; 0x0e
 a40:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 a42:	24 87       	std	Z+12, r18	; 0x0c
 a44:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 a46:	29 e1       	ldi	r18, 0x19	; 25
 a48:	30 e0       	ldi	r19, 0x00	; 0
 a4a:	22 83       	std	Z+2, r18	; 0x02
 a4c:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 a4e:	e1 8a       	std	Z+17, r14	; 0x11
 a50:	f2 8a       	std	Z+18, r15	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 a52:	03 8b       	std	Z+19, r16	; 0x13
 a54:	14 8b       	std	Z+20, r17	; 0x14
	userQueue[numConfig].auxVol = 0;
 a56:	16 82       	std	Z+6, r1	; 0x06
 a58:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 a5a:	10 86       	std	Z+8, r1	; 0x08
 a5c:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 a5e:	a4 83       	std	Z+4, r26	; 0x04
 a60:	b5 83       	std	Z+5, r27	; 0x05
	userQueue[numConfig].v_Valve = 180;
 a62:	25 8a       	std	Z+21, r2	; 0x15
 a64:	36 8a       	std	Z+22, r3	; 0x16
	numConfig++;
 a66:	02 96       	adiw	r24, 0x02	; 2
 a68:	80 93 4a 25 	sts	0x254A, r24
 a6c:	90 93 4b 25 	sts	0x254B, r25
	
	init();
 a70:	0e 94 21 01 	call	0x242	; 0x242 <_Z4initv>
	initUSART();
 a74:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z9initUSARTv>
	initLCD();
 a78:	0e 94 be 01 	call	0x37c	; 0x37c <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 a7c:	e0 e2       	ldi	r30, 0x20	; 32
 a7e:	f6 e0       	ldi	r31, 0x06	; 6
 a80:	80 e1       	ldi	r24, 0x10	; 16
 a82:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 a84:	82 e0       	ldi	r24, 0x02	; 2
 a86:	85 83       	std	Z+5, r24	; 0x05
	}
	*/
	short int BKCOL = BLUE;
	short int char_color = BLACK;
	short int bg_color = WHITE;
	fillLCD(bg_color);
 a88:	8f ef       	ldi	r24, 0xFF	; 255
 a8a:	9f ef       	ldi	r25, 0xFF	; 255
 a8c:	0e 94 ed 02 	call	0x5da	; 0x5da <_Z7fillLCDs>
	drawString("S", 0, 181, char_color, bg_color);
	drawString("T", 0, 196, char_color, bg_color);
	drawString(" ", 0, 211, char_color, bg_color);
	drawString("T", 0, 226, char_color, bg_color);
	*/
	drawDisplay('1');
 a90:	81 e3       	ldi	r24, 0x31	; 49
 a92:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_Z11drawDisplayh>
}
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	6d be       	out	0x3d, r6	; 61
 a9c:	7e be       	out	0x3e, r7	; 62
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	1f 91       	pop	r17
 aa4:	0f 91       	pop	r16
 aa6:	ff 90       	pop	r15
 aa8:	ef 90       	pop	r14
 aaa:	df 90       	pop	r13
 aac:	cf 90       	pop	r12
 aae:	bf 90       	pop	r11
 ab0:	af 90       	pop	r10
 ab2:	9f 90       	pop	r9
 ab4:	8f 90       	pop	r8
 ab6:	7f 90       	pop	r7
 ab8:	6f 90       	pop	r6
 aba:	5f 90       	pop	r5
 abc:	3f 90       	pop	r3
 abe:	2f 90       	pop	r2
 ac0:	08 95       	ret

00000ac2 <_exit>:
 ac2:	f8 94       	cli

00000ac4 <__stop_program>:
 ac4:	ff cf       	rjmp	.-2      	; 0xac4 <__stop_program>
