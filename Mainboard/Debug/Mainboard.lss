
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000055c  00802000  00000f00  00000f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080255c  0080255c  000014f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002885  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c2  00000000  00000000  00003ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000503  00000000  00000000  0000426f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e2  00000000  00000000  00004acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016cc  00000000  00000000  000053ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00006a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 12 01 	jmp	0x224	; 0x224 <__ctors_end>
   4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
   8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
   c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  28:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  2c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  74:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  78:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  7c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  80:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  ac:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  b0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  b4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  b8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  bc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  c0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  c4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  c8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  cc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  d0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  d4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  d8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  dc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  e0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  e4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  e8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  ec:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  f0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  f4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  f8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  fc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 100:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 104:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 108:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 10c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 110:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 114:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 118:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 11c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 120:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 124:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 128:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 12c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 130:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 134:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 138:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 13c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 140:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 144:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 148:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 14c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 150:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 154:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 158:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 15c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 160:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 164:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 168:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 16c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 170:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 174:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 178:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 17c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 180:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 184:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 188:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 18c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 190:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 194:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 198:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 19c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1ac:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1b0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1b4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1b8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1bc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1c0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1c4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1c8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1cc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1d0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1d4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1d8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1dc:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1e0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1e4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1e8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1ec:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1f0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1f4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1f8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
 1fc:	4b 07       	cpc	r20, r27
 1fe:	50 07       	cpc	r21, r16
 200:	55 07       	cpc	r21, r21
 202:	5a 07       	cpc	r21, r26
 204:	5f 07       	cpc	r21, r31
 206:	4b 07       	cpc	r20, r27
 208:	50 07       	cpc	r21, r16
 20a:	55 07       	cpc	r21, r21
 20c:	5a 07       	cpc	r21, r26
 20e:	5f 07       	cpc	r21, r31

00000210 <__trampolines_start>:
 210:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <main+0x224>
 214:	0c 94 5f 07 	jmp	0xebe	; 0xebe <main+0x22e>
 218:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <main+0x21a>
 21c:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <main+0x206>
 220:	0c 94 50 07 	jmp	0xea0	; 0xea0 <main+0x210>

00000224 <__ctors_end>:
 224:	11 24       	eor	r1, r1
 226:	1f be       	out	0x3f, r1	; 63
 228:	cf ef       	ldi	r28, 0xFF	; 255
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df e5       	ldi	r29, 0x5F	; 95
 22e:	de bf       	out	0x3e, r29	; 62
 230:	00 e0       	ldi	r16, 0x00	; 0
 232:	0c bf       	out	0x3c, r16	; 60

00000234 <__do_copy_data>:
 234:	15 e2       	ldi	r17, 0x25	; 37
 236:	a0 e0       	ldi	r26, 0x00	; 0
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	ff e0       	ldi	r31, 0x0F	; 15
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	0b bf       	out	0x3b, r16	; 59
 242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x14>
 244:	07 90       	elpm	r0, Z+
 246:	0d 92       	st	X+, r0
 248:	ac 35       	cpi	r26, 0x5C	; 92
 24a:	b1 07       	cpc	r27, r17
 24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0x10>

0000024e <__do_clear_bss>:
 24e:	25 e2       	ldi	r18, 0x25	; 37
 250:	ac e5       	ldi	r26, 0x5C	; 92
 252:	b5 e2       	ldi	r27, 0x25	; 37
 254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
 256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
 258:	ae 35       	cpi	r26, 0x5E	; 94
 25a:	b2 07       	cpc	r27, r18
 25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
 25e:	0e 94 48 06 	call	0xc90	; 0xc90 <main>
 262:	0c 94 7e 07 	jmp	0xefc	; 0xefc <_exit>

00000266 <__bad_interrupt>:
 266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <_Z4initv>:
	}
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 270:	e0 e5       	ldi	r30, 0x50	; 80
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	81 81       	ldd	r24, Z+1	; 0x01
 276:	81 ff       	sbrs	r24, 1
 278:	fd cf       	rjmp	.-6      	; 0x274 <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 27a:	88 ed       	ldi	r24, 0xD8	; 216
 27c:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 27e:	e0 e4       	ldi	r30, 0x40	; 64
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 284:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 28a:	a0 e0       	ldi	r26, 0x00	; 0
 28c:	b6 e0       	ldi	r27, 0x06	; 6
 28e:	88 ef       	ldi	r24, 0xF8	; 248
 290:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 292:	e0 e0       	ldi	r30, 0x00	; 0
 294:	f2 e0       	ldi	r31, 0x02	; 2
 296:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 298:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 29a:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 29c:	14 96       	adiw	r26, 0x04	; 4
 29e:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 2a0:	e0 e2       	ldi	r30, 0x20	; 32
 2a2:	f6 e0       	ldi	r31, 0x06	; 6
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 2a8:	a0 e4       	ldi	r26, 0x40	; 64
 2aa:	b2 e0       	ldi	r27, 0x02	; 2
 2ac:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 2ae:	11 96       	adiw	r26, 0x01	; 1
 2b0:	1c 92       	st	X, r1
 2b2:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 2b4:	12 96       	adiw	r26, 0x02	; 2
 2b6:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 2b8:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 2ba:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 2bc:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 2be:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 2c0:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 2c2:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 2c4:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2c8:	9b eb       	ldi	r25, 0xBB	; 187
 2ca:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2ce:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2d2:	e0 ea       	ldi	r30, 0xA0	; 160
 2d4:	f6 e0       	ldi	r31, 0x06	; 6
 2d6:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2d8:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	87 ea       	ldi	r24, 0xA7	; 167
 2de:	91 e6       	ldi	r25, 0x61	; 97
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <_Z4initv+0x76>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <_Z4initv+0x80>
 2ea:	00 00       	nop
 2ec:	08 95       	ret

000002ee <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ee:	e0 ea       	ldi	r30, 0xA0	; 160
 2f0:	f9 e0       	ldi	r31, 0x09	; 9
 2f2:	2c e0       	ldi	r18, 0x0C	; 12
 2f4:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f6:	90 e4       	ldi	r25, 0x40	; 64
 2f8:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2fa:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2fc:	88 e1       	ldi	r24, 0x18	; 24
 2fe:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 300:	33 e0       	ldi	r19, 0x03	; 3
 302:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 304:	e0 eb       	ldi	r30, 0xB0	; 176
 306:	f9 e0       	ldi	r31, 0x09	; 9
 308:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 30a:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 30c:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 30e:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 310:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 312:	e0 ea       	ldi	r30, 0xA0	; 160
 314:	fa e0       	ldi	r31, 0x0A	; 10
 316:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 318:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 31a:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 31c:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 31e:	32 e0       	ldi	r19, 0x02	; 2
 320:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 322:	e0 eb       	ldi	r30, 0xB0	; 176
 324:	fa e0       	ldi	r31, 0x0A	; 10
 326:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 328:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 32a:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 32c:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 32e:	35 83       	std	Z+5, r19	; 0x05
 330:	08 95       	ret

00000332 <_Z7getBytei>:
}

char getByte(int chanNum)
{
	char temp = 0x00;
	switch(chanNum)
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	91 05       	cpc	r25, r1
 336:	91 f0       	breq	.+36     	; 0x35c <_Z7getBytei+0x2a>
 338:	1c f4       	brge	.+6      	; 0x340 <_Z7getBytei+0xe>
 33a:	89 2b       	or	r24, r25
 33c:	39 f0       	breq	.+14     	; 0x34c <_Z7getBytei+0x1a>
 33e:	26 c0       	rjmp	.+76     	; 0x38c <_Z7getBytei+0x5a>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	91 05       	cpc	r25, r1
 344:	99 f0       	breq	.+38     	; 0x36c <_Z7getBytei+0x3a>
 346:	03 97       	sbiw	r24, 0x03	; 3
 348:	c9 f0       	breq	.+50     	; 0x37c <_Z7getBytei+0x4a>
 34a:	20 c0       	rjmp	.+64     	; 0x38c <_Z7getBytei+0x5a>
	{
		case 0:
			while(!(USARTD0_STATUS & USART_RXCIF_bm));
 34c:	e1 ea       	ldi	r30, 0xA1	; 161
 34e:	f9 e0       	ldi	r31, 0x09	; 9
 350:	80 81       	ld	r24, Z
 352:	88 23       	and	r24, r24
 354:	ec f7       	brge	.-6      	; 0x350 <_Z7getBytei+0x1e>
			temp = USARTD0_DATA;
 356:	80 91 a0 09 	lds	r24, 0x09A0
			break;
 35a:	08 95       	ret
		case 1:
			while(!(USARTD1_STATUS & USART_RXCIF_bm));
 35c:	e1 eb       	ldi	r30, 0xB1	; 177
 35e:	f9 e0       	ldi	r31, 0x09	; 9
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	ec f7       	brge	.-6      	; 0x360 <_Z7getBytei+0x2e>
			temp = USARTD1_DATA;
 366:	80 91 b0 09 	lds	r24, 0x09B0
			break;
 36a:	08 95       	ret
		
		case 2:
			while(!(USARTE0_STATUS & USART_RXCIF_bm));
 36c:	e1 ea       	ldi	r30, 0xA1	; 161
 36e:	fa e0       	ldi	r31, 0x0A	; 10
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	ec f7       	brge	.-6      	; 0x370 <_Z7getBytei+0x3e>
			temp = USARTE0_DATA;
 376:	80 91 a0 0a 	lds	r24, 0x0AA0
			break;
 37a:	08 95       	ret
		case 3:
			while(!(USARTE1_STATUS & USART_RXCIF_bm));
 37c:	e1 eb       	ldi	r30, 0xB1	; 177
 37e:	fa e0       	ldi	r31, 0x0A	; 10
 380:	80 81       	ld	r24, Z
 382:	88 23       	and	r24, r24
 384:	ec f7       	brge	.-6      	; 0x380 <_Z7getBytei+0x4e>
			temp = USARTE1_DATA;
 386:	80 91 b0 0a 	lds	r24, 0x0AB0
			break;
 38a:	08 95       	ret
	sendChar(*sToSend++, chanNum);
}

char getByte(int chanNum)
{
	char temp = 0x00;
 38c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return temp;
}
 38e:	08 95       	ret

00000390 <_Z8xmitDATAh>:
}
*/

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 390:	e0 e2       	ldi	r30, 0x20	; 32
 392:	f6 e0       	ldi	r31, 0x06	; 6
 394:	90 e2       	ldi	r25, 0x20	; 32
 396:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 398:	80 93 a4 06 	sts	0x06A4, r24
	//lcdDelay(1);
	PORTB.OUTCLR = 0b01000000; // WR goes low
 39c:	80 e4       	ldi	r24, 0x40	; 64
 39e:	86 83       	std	Z+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 3a0:	85 83       	std	Z+5, r24	; 0x05
 3a2:	08 95       	ret

000003a4 <_Z12getCharIndexh>:
		xmitDATA(colorL);
	}
}

int getCharIndex(unsigned char c) {
	int c_val = (int)(c);
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
	if (c >= 'A' && c <= 'Z') c_val -= ('A' - 10);
 3a8:	9f eb       	ldi	r25, 0xBF	; 191
 3aa:	98 0f       	add	r25, r24
 3ac:	9a 31       	cpi	r25, 0x1A	; 26
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <_Z12getCharIndexh+0x12>
 3b0:	27 53       	subi	r18, 0x37	; 55
 3b2:	31 09       	sbc	r19, r1
 3b4:	0b c0       	rjmp	.+22     	; 0x3cc <_Z12getCharIndexh+0x28>
	else if (c >= '0' && c <= '9') c_val -= '0';
 3b6:	90 ed       	ldi	r25, 0xD0	; 208
 3b8:	98 0f       	add	r25, r24
 3ba:	9a 30       	cpi	r25, 0x0A	; 10
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <_Z12getCharIndexh+0x20>
 3be:	20 53       	subi	r18, 0x30	; 48
 3c0:	31 09       	sbc	r19, r1
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_Z12getCharIndexh+0x28>
	else if (c == ' ') c_val = 40;
 3c4:	80 32       	cpi	r24, 0x20	; 32
 3c6:	11 f4       	brne	.+4      	; 0x3cc <_Z12getCharIndexh+0x28>
 3c8:	28 e2       	ldi	r18, 0x28	; 40
 3ca:	30 e0       	ldi	r19, 0x00	; 0
	return c_val;
}
 3cc:	c9 01       	movw	r24, r18
 3ce:	08 95       	ret

000003d0 <_Z8lcdDelayh>:
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 3d0:	88 23       	and	r24, r24
 3d2:	29 f0       	breq	.+10     	; 0x3de <_Z8lcdDelayh+0xe>
 3d4:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 3d6:	00 00       	nop
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 3d8:	9f 5f       	subi	r25, 0xFF	; 255
 3da:	98 13       	cpse	r25, r24
 3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <_Z8lcdDelayh+0x6>
 3de:	08 95       	ret

000003e0 <_Z7xmitCMDh>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitCMD(unsigned char cmdByte)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 3e4:	c0 e2       	ldi	r28, 0x20	; 32
 3e6:	d6 e0       	ldi	r29, 0x06	; 6
 3e8:	90 e2       	ldi	r25, 0x20	; 32
 3ea:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 3ec:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 3f0:	8a e0       	ldi	r24, 0x0A	; 10
 3f2:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 3f6:	80 e4       	ldi	r24, 0x40	; 64
 3f8:	8e 83       	std	Y+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 3fa:	8d 83       	std	Y+5, r24	; 0x05
	//lcdDelay(1);
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 402:	88 e2       	ldi	r24, 0x28	; 40
 404:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 408:	81 e1       	ldi	r24, 0x11	; 17
 40a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 40e:	86 e3       	ldi	r24, 0x36	; 54
 410:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 41a:	8a e3       	ldi	r24, 0x3A	; 58
 41c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 420:	85 e5       	ldi	r24, 0x55	; 85
 422:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 426:	82 eb       	ldi	r24, 0xB2	; 178
 428:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 42c:	8c e0       	ldi	r24, 0x0C	; 12
 42e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 432:	8c e0       	ldi	r24, 0x0C	; 12
 434:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x33); //
 43e:	83 e3       	ldi	r24, 0x33	; 51
 440:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x33); //
 444:	83 e3       	ldi	r24, 0x33	; 51
 446:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 44a:	87 eb       	ldi	r24, 0xB7	; 183
 44c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x35); //
 450:	85 e3       	ldi	r24, 0x35	; 53
 452:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 456:	8b eb       	ldi	r24, 0xBB	; 187
 458:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 45c:	8b e2       	ldi	r24, 0x2B	; 43
 45e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 462:	80 ec       	ldi	r24, 0xC0	; 192
 464:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 468:	8c e2       	ldi	r24, 0x2C	; 44
 46a:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 46e:	82 ec       	ldi	r24, 0xC2	; 194
 470:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x01); //
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 480:	83 ec       	ldi	r24, 0xC3	; 195
 482:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x11); //
 486:	81 e1       	ldi	r24, 0x11	; 17
 488:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 48c:	84 ec       	ldi	r24, 0xC4	; 196
 48e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x20); //
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 498:	86 ec       	ldi	r24, 0xC6	; 198
 49a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 49e:	8f e0       	ldi	r24, 0x0F	; 15
 4a0:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 4a4:	80 ed       	ldi	r24, 0xD0	; 208
 4a6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 4aa:	84 ea       	ldi	r24, 0xA4	; 164
 4ac:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 4b0:	81 ea       	ldi	r24, 0xA1	; 161
 4b2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 4b6:	80 ee       	ldi	r24, 0xE0	; 224
 4b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 4bc:	80 ed       	ldi	r24, 0xD0	; 208
 4be:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x05); //
 4c8:	85 e0       	ldi	r24, 0x05	; 5
 4ca:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 4ce:	8e e0       	ldi	r24, 0x0E	; 14
 4d0:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x15); //
 4d4:	85 e1       	ldi	r24, 0x15	; 21
 4d6:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x37); //
 4e0:	87 e3       	ldi	r24, 0x37	; 55
 4e2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x43); //
 4e6:	83 e4       	ldi	r24, 0x43	; 67
 4e8:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x47); //
 4ec:	87 e4       	ldi	r24, 0x47	; 71
 4ee:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x09); //
 4f2:	89 e0       	ldi	r24, 0x09	; 9
 4f4:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x15); //
 4f8:	85 e1       	ldi	r24, 0x15	; 21
 4fa:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x12); //
 4fe:	82 e1       	ldi	r24, 0x12	; 18
 500:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x16); //
 504:	86 e1       	ldi	r24, 0x16	; 22
 506:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x19); //
 50a:	89 e1       	ldi	r24, 0x19	; 25
 50c:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 510:	81 ee       	ldi	r24, 0xE1	; 225
 512:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 516:	80 ed       	ldi	r24, 0xD0	; 208
 518:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x05); //
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 52e:	8c e0       	ldi	r24, 0x0C	; 12
 530:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x06); //
 534:	86 e0       	ldi	r24, 0x06	; 6
 536:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 53a:	8d e2       	ldi	r24, 0x2D	; 45
 53c:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x44); //
 540:	84 e4       	ldi	r24, 0x44	; 68
 542:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x40); //
 546:	80 e4       	ldi	r24, 0x40	; 64
 548:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 54c:	8e e0       	ldi	r24, 0x0E	; 14
 54e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 552:	8c e1       	ldi	r24, 0x1C	; 28
 554:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x18); //
 558:	88 e1       	ldi	r24, 0x18	; 24
 55a:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x16); //
 55e:	86 e1       	ldi	r24, 0x16	; 22
 560:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x19); //
 564:	89 e1       	ldi	r24, 0x19	; 25
 566:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 56a:	8a e2       	ldi	r24, 0x2A	; 42
 56c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 582:	8f ee       	ldi	r24, 0xEF	; 239
 584:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 588:	8b e2       	ldi	r24, 0x2B	; 43
 58a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x01); //
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 5a0:	8f e3       	ldi	r24, 0x3F	; 63
 5a2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 5a6:	89 e2       	ldi	r24, 0x29	; 41
 5a8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
 5ac:	2f ef       	ldi	r18, 0xFF	; 255
 5ae:	81 ee       	ldi	r24, 0xE1	; 225
 5b0:	94 e0       	ldi	r25, 0x04	; 4
 5b2:	21 50       	subi	r18, 0x01	; 1
 5b4:	80 40       	sbci	r24, 0x00	; 0
 5b6:	90 40       	sbci	r25, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <_Z7initLCDv+0x1b0>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <_Z7initLCDv+0x1ba>
 5bc:	00 00       	nop
 5be:	08 95       	ret

000005c0 <_Z9xmitHLinessss>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitHLine(short int xPos, short int yPos, short int length, short int color)
{
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
 5d2:	d6 2e       	mov	r13, r22
 5d4:	8a 01       	movw	r16, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 5d6:	f3 2e       	mov	r15, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 5d8:	e2 2e       	mov	r14, r18
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
	unsigned char xEndL = (unsigned char)((xPos + length) & 0x00FF);
 5da:	c8 2e       	mov	r12, r24
 5dc:	c4 0e       	add	r12, r20
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = yStart;
		
	xmitCMD(0x36); // Memory access control
 5de:	86 e3       	ldi	r24, 0x36	; 54
 5e0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		
	xmitCMD(0x2A); // X Address Set
 5ea:	8a e2       	ldi	r24, 0x2A	; 42
 5ec:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 5f6:	8d 2d       	mov	r24, r13
 5f8:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 602:	8d 2d       	mov	r24, r13
 604:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 608:	8b e2       	ldi	r24, 0x2B	; 43
 60a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 60e:	8d 2f       	mov	r24, r29
 610:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 614:	8c 2f       	mov	r24, r28
 616:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	unsigned char colorH = (unsigned char)(color >> 8);
	unsigned char colorL = (unsigned char)(color & 0x00FF);
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
 61a:	c0 0f       	add	r28, r16
 61c:	d1 1f       	adc	r29, r17
	xmitDATA(yEnd); // Finish 239
		
	xmitCMD(0x2B); // Y Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 61e:	8d 2f       	mov	r24, r29
 620:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 624:	8c 2d       	mov	r24, r12
 626:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels
 62a:	8c e2       	ldi	r24, 0x2C	; 44
 62c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	for(int i=0; i<=length; i++) {
 630:	11 23       	and	r17, r17
 632:	64 f0       	brlt	.+24     	; 0x64c <_Z9xmitHLinessss+0x8c>
 634:	c0 e0       	ldi	r28, 0x00	; 0
 636:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 638:	8f 2d       	mov	r24, r15
 63a:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(colorL);
 63e:	8e 2d       	mov	r24, r14
 640:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
	xmitDATA(xEndL); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<=length; i++) {
 644:	21 96       	adiw	r28, 0x01	; 1
 646:	0c 17       	cp	r16, r28
 648:	1d 07       	cpc	r17, r29
 64a:	b4 f7       	brge	.-20     	; 0x638 <_Z9xmitHLinessss+0x78>
		xmitDATA(colorH);
		xmitDATA(colorL);
			
	}
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	08 95       	ret

0000065e <_Z9xmitVLinessss>:
	
}

// 60, 160, 120, RED
void xmitVLine(short int xPos, short int yPos, short int length, short int color)
{
 65e:	cf 92       	push	r12
 660:	df 92       	push	r13
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	d8 2f       	mov	r29, r24
 670:	d9 2e       	mov	r13, r25
 672:	c6 2f       	mov	r28, r22
 674:	7a 01       	movw	r14, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 676:	13 2f       	mov	r17, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 678:	02 2f       	mov	r16, r18
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = xStartH;
	unsigned char xEndL = xStartL;
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = (unsigned char)yPos + (unsigned char)length;
 67a:	c6 2e       	mov	r12, r22
 67c:	c4 0e       	add	r12, r20
	
	xmitCMD(0x36); // Memory access control
 67e:	86 e3       	ldi	r24, 0x36	; 54
 680:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 684:	80 ea       	ldi	r24, 0xA0	; 160
 686:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0x2A); // X Address Set
 68a:	8a e2       	ldi	r24, 0x2A	; 42
 68c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 690:	8d 2d       	mov	r24, r13
 692:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 696:	8d 2f       	mov	r24, r29
 698:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xEndH); //
 69c:	8d 2d       	mov	r24, r13
 69e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 6a2:	8d 2f       	mov	r24, r29
 6a4:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 6a8:	8b e2       	ldi	r24, 0x2B	; 43
 6aa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 6b4:	8c 2f       	mov	r24, r28
 6b6:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 6c0:	8c 2d       	mov	r24, r12
 6c2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>

	xmitCMD(0x2C); // Start writing pixels	
 6c6:	8c e2       	ldi	r24, 0x2C	; 44
 6c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	for(int i=0; i<length; i++) {
 6cc:	1e 14       	cp	r1, r14
 6ce:	1f 04       	cpc	r1, r15
 6d0:	64 f4       	brge	.+24     	; 0x6ea <_Z9xmitVLinessss+0x8c>
 6d2:	c0 e0       	ldi	r28, 0x00	; 0
 6d4:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 6d6:	81 2f       	mov	r24, r17
 6d8:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(colorL);
 6dc:	80 2f       	mov	r24, r16
 6de:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239

	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<length; i++) {
 6e2:	21 96       	adiw	r28, 0x01	; 1
 6e4:	ce 15       	cp	r28, r14
 6e6:	df 05       	cpc	r29, r15
 6e8:	b1 f7       	brne	.-20     	; 0x6d6 <_Z9xmitVLinessss+0x78>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	1f 91       	pop	r17
 6f0:	0f 91       	pop	r16
 6f2:	ff 90       	pop	r15
 6f4:	ef 90       	pop	r14
 6f6:	df 90       	pop	r13
 6f8:	cf 90       	pop	r12
 6fa:	08 95       	ret

000006fc <_Z7drawBoxsssss>:
	xmitVLine(193, 16, 223, black);	// Low/Mid separator
	xmitVLine(257, 16, 223, black);	// Mid/High separator
	
}

void drawBox(short int topleft_x, short int topleft_y, short int botright_x, short int botright_y, short int color){
 6fc:	6f 92       	push	r6
 6fe:	7f 92       	push	r7
 700:	8f 92       	push	r8
 702:	9f 92       	push	r9
 704:	af 92       	push	r10
 706:	bf 92       	push	r11
 708:	cf 92       	push	r12
 70a:	df 92       	push	r13
 70c:	ef 92       	push	r14
 70e:	ff 92       	push	r15
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	7c 01       	movw	r14, r24
 71a:	eb 01       	movw	r28, r22
 71c:	6a 01       	movw	r12, r20
 71e:	59 01       	movw	r10, r18
 720:	38 01       	movw	r6, r16
	short int height = botright_y - topleft_y;
 722:	89 01       	movw	r16, r18
 724:	06 1b       	sub	r16, r22
 726:	17 0b       	sbc	r17, r23
	short int width = botright_x - topleft_x;
 728:	4a 01       	movw	r8, r20
 72a:	88 1a       	sub	r8, r24
 72c:	99 0a       	sbc	r9, r25
	xmitHLine(topleft_x, topleft_y, width, color);	// top
 72e:	93 01       	movw	r18, r6
 730:	a4 01       	movw	r20, r8
 732:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z9xmitHLinessss>
	xmitHLine(topleft_x, botright_y, width, color);	// bottom
 736:	93 01       	movw	r18, r6
 738:	a4 01       	movw	r20, r8
 73a:	b5 01       	movw	r22, r10
 73c:	c7 01       	movw	r24, r14
 73e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z9xmitHLinessss>
	xmitVLine(topleft_x, topleft_y, height, color);	// left
 742:	93 01       	movw	r18, r6
 744:	a8 01       	movw	r20, r16
 746:	be 01       	movw	r22, r28
 748:	c7 01       	movw	r24, r14
 74a:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9xmitVLinessss>
	xmitVLine(botright_x, topleft_y, height, color);	// right
 74e:	93 01       	movw	r18, r6
 750:	a8 01       	movw	r20, r16
 752:	be 01       	movw	r22, r28
 754:	c6 01       	movw	r24, r12
 756:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9xmitVLinessss>
}
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	ff 90       	pop	r15
 764:	ef 90       	pop	r14
 766:	df 90       	pop	r13
 768:	cf 90       	pop	r12
 76a:	bf 90       	pop	r11
 76c:	af 90       	pop	r10
 76e:	9f 90       	pop	r9
 770:	8f 90       	pop	r8
 772:	7f 90       	pop	r7
 774:	6f 90       	pop	r6
 776:	08 95       	ret

00000778 <_Z8drawCharhssss>:
	else if (c == ' ') c_val = 40;
	return c_val;
}

void drawChar(unsigned char c, short int xStart, short int yStart, short int text_color, short int bg_color)
{
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	cd b7       	in	r28, 0x3d	; 61
 792:	de b7       	in	r29, 0x3e	; 62
 794:	a0 97       	sbiw	r28, 0x20	; 32
 796:	cd bf       	out	0x3d, r28	; 61
 798:	de bf       	out	0x3e, r29	; 62
 79a:	c8 2e       	mov	r12, r24
 79c:	7b 01       	movw	r14, r22
 79e:	d4 2e       	mov	r13, r20
	unsigned char tcolorH = (unsigned char)(text_color >> 8);
 7a0:	b3 2e       	mov	r11, r19
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
 7a2:	a2 2e       	mov	r10, r18
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
 7a4:	91 2e       	mov	r9, r17
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
 7a6:	80 2e       	mov	r8, r16
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
	unsigned char xEndL = (unsigned char)((xStart + 15) & 0x00FF);
	unsigned char yStartL = (unsigned char)yStart;
	unsigned char yEnd = (unsigned char)(yStart + 15);	
	
	xmitCMD(0x36); // Memory access control
 7a8:	86 e3       	ldi	r24, 0x36	; 54
 7aa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 7ae:	80 ea       	ldi	r24, 0xA0	; 160
 7b0:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	//xmitCMD(0x36); // Memory access control
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
 7b4:	8a e2       	ldi	r24, 0x2A	; 42
 7b6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 7ba:	8f 2d       	mov	r24, r15
 7bc:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 7c0:	8e 2d       	mov	r24, r14
 7c2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
	unsigned char xStartH = (unsigned char)(xStart >> 8);
	unsigned char xStartL = (unsigned char)(xStart & 0x00FF);
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
 7c6:	c7 01       	movw	r24, r14
 7c8:	0f 96       	adiw	r24, 0x0f	; 15
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 7ca:	89 2f       	mov	r24, r25
 7cc:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 7d0:	8f e0       	ldi	r24, 0x0F	; 15
 7d2:	8e 0d       	add	r24, r14
 7d4:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 7d8:	8b e2       	ldi	r24, 0x2B	; 43
 7da:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yStartL); // Start 0
 7e4:	8d 2d       	mov	r24, r13
 7e6:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 7f0:	8f e0       	ldi	r24, 0x0F	; 15
 7f2:	8d 0d       	add	r24, r13
 7f4:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	int c_index = getCharIndex(c);
 7f8:	8c 2d       	mov	r24, r12
 7fa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z12getCharIndexh>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	82 95       	swap	r24
 804:	92 95       	swap	r25
 806:	90 7f       	andi	r25, 0xF0	; 240
 808:	98 27       	eor	r25, r24
 80a:	80 7f       	andi	r24, 0xF0	; 240
 80c:	98 27       	eor	r25, r24
 80e:	fc 01       	movw	r30, r24
 810:	e0 50       	subi	r30, 0x00	; 0
 812:	f0 4e       	sbci	r31, 0xE0	; 224
 814:	9e 01       	movw	r18, r28
 816:	2f 5f       	subi	r18, 0xFF	; 255
 818:	3f 4f       	sbci	r19, 0xFF	; 255
 81a:	79 01       	movw	r14, r18
 81c:	80 5e       	subi	r24, 0xE0	; 224
 81e:	9f 4d       	sbci	r25, 0xDF	; 223
 820:	d9 01       	movw	r26, r18
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
 822:	21 91       	ld	r18, Z+
 824:	31 91       	ld	r19, Z+
 826:	2d 93       	st	X+, r18
 828:	3d 93       	st	X+, r19
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
	short int chr[16];
	for(int i=0; i<16; i++)
 82a:	e8 17       	cp	r30, r24
 82c:	f9 07       	cpc	r31, r25
 82e:	c9 f7       	brne	.-14     	; 0x822 <_Z8drawCharhssss+0xaa>
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
 830:	8c e2       	ldi	r24, 0x2C	; 44
 832:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
 836:	6e 01       	movw	r12, r28
 838:	31 e2       	ldi	r19, 0x21	; 33
 83a:	c3 0e       	add	r12, r19
 83c:	d1 1c       	adc	r13, r1
 83e:	21 c0       	rjmp	.+66     	; 0x882 <_Z8drawCharhssss+0x10a>
	for(int i=0; i<16; i++) {
		for(int j=0; j<16; j++) {
			
			if(chr[i] & (1<<(15-j))){
 840:	f7 01       	movw	r30, r14
 842:	40 81       	ld	r20, Z
 844:	51 81       	ldd	r21, Z+1	; 0x01
 846:	00 2e       	mov	r0, r16
 848:	02 c0       	rjmp	.+4      	; 0x84e <_Z8drawCharhssss+0xd6>
 84a:	55 95       	asr	r21
 84c:	47 95       	ror	r20
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <_Z8drawCharhssss+0xd2>
 852:	40 ff       	sbrs	r20, 0
 854:	07 c0       	rjmp	.+14     	; 0x864 <_Z8drawCharhssss+0xec>
				xmitDATA(tcolorH);
 856:	8b 2d       	mov	r24, r11
 858:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
				xmitDATA(tcolorL);
 85c:	8a 2d       	mov	r24, r10
 85e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
 862:	06 c0       	rjmp	.+12     	; 0x870 <_Z8drawCharhssss+0xf8>
			}
			else{
				xmitDATA(bgcolorH);
 864:	89 2d       	mov	r24, r9
 866:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
				xmitDATA(bgcolorL);
 86a:	88 2d       	mov	r24, r8
 86c:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
 870:	01 50       	subi	r16, 0x01	; 1
 872:	11 09       	sbc	r17, r1
 874:	28 f7       	brcc	.-54     	; 0x840 <_Z8drawCharhssss+0xc8>
 876:	22 e0       	ldi	r18, 0x02	; 2
 878:	e2 0e       	add	r14, r18
 87a:	f1 1c       	adc	r15, r1
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<16; i++) {
 87c:	ec 14       	cp	r14, r12
 87e:	fd 04       	cpc	r15, r13
 880:	19 f0       	breq	.+6      	; 0x888 <_Z8drawCharhssss+0x110>
	xmitDATA(0x00); //
	xmitDATA(yStartL); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
 882:	0f e0       	ldi	r16, 0x0F	; 15
 884:	10 e0       	ldi	r17, 0x00	; 0
 886:	dc cf       	rjmp	.-72     	; 0x840 <_Z8drawCharhssss+0xc8>
				xmitDATA(bgcolorL);
			}
			
		}
	}	
}
 888:	a0 96       	adiw	r28, 0x20	; 32
 88a:	cd bf       	out	0x3d, r28	; 61
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	ff 90       	pop	r15
 898:	ef 90       	pop	r14
 89a:	df 90       	pop	r13
 89c:	cf 90       	pop	r12
 89e:	bf 90       	pop	r11
 8a0:	af 90       	pop	r10
 8a2:	9f 90       	pop	r9
 8a4:	8f 90       	pop	r8
 8a6:	08 95       	ret

000008a8 <_Z10drawStringPKcssss>:
	if(val<63){
		fillBox(x_left, y_top, x_right, level, (int)BLACK);	// Fill in empty space white
	}
}

void drawString(const char* str, short int xStart, short int yStart, short int text_color, short int bg_color) {
 8a8:	8f 92       	push	r8
 8aa:	9f 92       	push	r9
 8ac:	af 92       	push	r10
 8ae:	bf 92       	push	r11
 8b0:	cf 92       	push	r12
 8b2:	df 92       	push	r13
 8b4:	ef 92       	push	r14
 8b6:	ff 92       	push	r15
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	fc 01       	movw	r30, r24
 8c2:	eb 01       	movw	r28, r22
 8c4:	6a 01       	movw	r12, r20
 8c6:	59 01       	movw	r10, r18
 8c8:	48 01       	movw	r8, r16
	while (*str) {
 8ca:	80 81       	ld	r24, Z
 8cc:	88 23       	and	r24, r24
 8ce:	81 f0       	breq	.+32     	; 0x8f0 <_Z10drawStringPKcssss+0x48>
 8d0:	7f 01       	movw	r14, r30
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	e9 1a       	sub	r14, r25
 8d6:	f9 0a       	sbc	r15, r25
		drawChar(*str++, xStart, yStart, text_color, bg_color);
 8d8:	84 01       	movw	r16, r8
 8da:	95 01       	movw	r18, r10
 8dc:	a6 01       	movw	r20, r12
 8de:	be 01       	movw	r22, r28
 8e0:	0e 94 bc 03 	call	0x778	; 0x778 <_Z8drawCharhssss>
		xStart += 16;
 8e4:	60 96       	adiw	r28, 0x10	; 16
		fillBox(x_left, y_top, x_right, level, (int)BLACK);	// Fill in empty space white
	}
}

void drawString(const char* str, short int xStart, short int yStart, short int text_color, short int bg_color) {
	while (*str) {
 8e6:	f7 01       	movw	r30, r14
 8e8:	81 91       	ld	r24, Z+
 8ea:	7f 01       	movw	r14, r30
 8ec:	81 11       	cpse	r24, r1
 8ee:	f4 cf       	rjmp	.-24     	; 0x8d8 <_Z10drawStringPKcssss+0x30>
		drawChar(*str++, xStart, yStart, text_color, bg_color);
		xStart += 16;
	}
}
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	0f 91       	pop	r16
 8f8:	ff 90       	pop	r15
 8fa:	ef 90       	pop	r14
 8fc:	df 90       	pop	r13
 8fe:	cf 90       	pop	r12
 900:	bf 90       	pop	r11
 902:	af 90       	pop	r10
 904:	9f 90       	pop	r9
 906:	8f 90       	pop	r8
 908:	08 95       	ret

0000090a <_Z11drawDisplayh>:
			
		}
	}	
}

void drawDisplay(unsigned char preset_no) {
 90a:	0f 93       	push	r16
 90c:	1f 93       	push	r17
	short int white = BLACK;
	short int black = WHITE;
	
	// Current preset header
	drawString("PRESET 1", 0, 0, black, white);
 90e:	00 e0       	ldi	r16, 0x00	; 0
 910:	10 e0       	ldi	r17, 0x00	; 0
 912:	2f ef       	ldi	r18, 0xFF	; 255
 914:	3f ef       	ldi	r19, 0xFF	; 255
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	80 e2       	ldi	r24, 0x20	; 32
 920:	95 e2       	ldi	r25, 0x25	; 37
 922:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	
	// Top channel labels
	drawString("VOL", 7, 30, black, white);
 926:	2f ef       	ldi	r18, 0xFF	; 255
 928:	3f ef       	ldi	r19, 0xFF	; 255
 92a:	4e e1       	ldi	r20, 0x1E	; 30
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	67 e0       	ldi	r22, 0x07	; 7
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	89 e2       	ldi	r24, 0x29	; 41
 934:	95 e2       	ldi	r25, 0x25	; 37
 936:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("GAIN", 63, 30, black, white);
 93a:	2f ef       	ldi	r18, 0xFF	; 255
 93c:	3f ef       	ldi	r19, 0xFF	; 255
 93e:	4e e1       	ldi	r20, 0x1E	; 30
 940:	50 e0       	ldi	r21, 0x00	; 0
 942:	6f e3       	ldi	r22, 0x3F	; 63
 944:	70 e0       	ldi	r23, 0x00	; 0
 946:	8d e2       	ldi	r24, 0x2D	; 45
 948:	95 e2       	ldi	r25, 0x25	; 37
 94a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("LOW", 136, 30, black, white);
 94e:	2f ef       	ldi	r18, 0xFF	; 255
 950:	3f ef       	ldi	r19, 0xFF	; 255
 952:	4e e1       	ldi	r20, 0x1E	; 30
 954:	50 e0       	ldi	r21, 0x00	; 0
 956:	68 e8       	ldi	r22, 0x88	; 136
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	82 e3       	ldi	r24, 0x32	; 50
 95c:	95 e2       	ldi	r25, 0x25	; 37
 95e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("MID", 201, 30, black, white);
 962:	2f ef       	ldi	r18, 0xFF	; 255
 964:	3f ef       	ldi	r19, 0xFF	; 255
 966:	4e e1       	ldi	r20, 0x1E	; 30
 968:	50 e0       	ldi	r21, 0x00	; 0
 96a:	69 ec       	ldi	r22, 0xC9	; 201
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	86 e3       	ldi	r24, 0x36	; 54
 970:	95 e2       	ldi	r25, 0x25	; 37
 972:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("HIGH", 256, 30, black, white);
 976:	2f ef       	ldi	r18, 0xFF	; 255
 978:	3f ef       	ldi	r19, 0xFF	; 255
 97a:	4e e1       	ldi	r20, 0x1E	; 30
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	71 e0       	ldi	r23, 0x01	; 1
 982:	8a e3       	ldi	r24, 0x3A	; 58
 984:	95 e2       	ldi	r25, 0x25	; 37
 986:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	
	// Bottom channel labels
	drawString("VOL", 7, 139, black, white);
 98a:	2f ef       	ldi	r18, 0xFF	; 255
 98c:	3f ef       	ldi	r19, 0xFF	; 255
 98e:	4b e8       	ldi	r20, 0x8B	; 139
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	67 e0       	ldi	r22, 0x07	; 7
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	89 e2       	ldi	r24, 0x29	; 41
 998:	95 e2       	ldi	r25, 0x25	; 37
 99a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("GAIN", 63, 139, black, white);
 99e:	2f ef       	ldi	r18, 0xFF	; 255
 9a0:	3f ef       	ldi	r19, 0xFF	; 255
 9a2:	4b e8       	ldi	r20, 0x8B	; 139
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	6f e3       	ldi	r22, 0x3F	; 63
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	8d e2       	ldi	r24, 0x2D	; 45
 9ac:	95 e2       	ldi	r25, 0x25	; 37
 9ae:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("LOW", 136, 139, black, white);
 9b2:	2f ef       	ldi	r18, 0xFF	; 255
 9b4:	3f ef       	ldi	r19, 0xFF	; 255
 9b6:	4b e8       	ldi	r20, 0x8B	; 139
 9b8:	50 e0       	ldi	r21, 0x00	; 0
 9ba:	68 e8       	ldi	r22, 0x88	; 136
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	82 e3       	ldi	r24, 0x32	; 50
 9c0:	95 e2       	ldi	r25, 0x25	; 37
 9c2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("MID", 201, 139, black, white);
 9c6:	2f ef       	ldi	r18, 0xFF	; 255
 9c8:	3f ef       	ldi	r19, 0xFF	; 255
 9ca:	4b e8       	ldi	r20, 0x8B	; 139
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	69 ec       	ldi	r22, 0xC9	; 201
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	86 e3       	ldi	r24, 0x36	; 54
 9d4:	95 e2       	ldi	r25, 0x25	; 37
 9d6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	drawString("HIGH", 256, 139, black, white);
 9da:	2f ef       	ldi	r18, 0xFF	; 255
 9dc:	3f ef       	ldi	r19, 0xFF	; 255
 9de:	4b e8       	ldi	r20, 0x8B	; 139
 9e0:	50 e0       	ldi	r21, 0x00	; 0
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	71 e0       	ldi	r23, 0x01	; 1
 9e6:	8a e3       	ldi	r24, 0x3A	; 58
 9e8:	95 e2       	ldi	r25, 0x25	; 37
 9ea:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z10drawStringPKcssss>
	
	// Top channel levels
	drawBox(10, 50, 50, 115, black);	// Vol level
 9ee:	0f ef       	ldi	r16, 0xFF	; 255
 9f0:	1f ef       	ldi	r17, 0xFF	; 255
 9f2:	23 e7       	ldi	r18, 0x73	; 115
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	42 e3       	ldi	r20, 0x32	; 50
 9f8:	50 e0       	ldi	r21, 0x00	; 0
 9fa:	62 e3       	ldi	r22, 0x32	; 50
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	8a e0       	ldi	r24, 0x0A	; 10
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(75, 50, 115, 115, black);	// Gain level
 a06:	23 e7       	ldi	r18, 0x73	; 115
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	43 e7       	ldi	r20, 0x73	; 115
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	62 e3       	ldi	r22, 0x32	; 50
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	8b e4       	ldi	r24, 0x4B	; 75
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(140, 50, 180, 115, black);	// Low level
 a1a:	23 e7       	ldi	r18, 0x73	; 115
 a1c:	30 e0       	ldi	r19, 0x00	; 0
 a1e:	44 eb       	ldi	r20, 0xB4	; 180
 a20:	50 e0       	ldi	r21, 0x00	; 0
 a22:	62 e3       	ldi	r22, 0x32	; 50
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	8c e8       	ldi	r24, 0x8C	; 140
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(205, 50, 245, 115, black);	// Mid level
 a2e:	23 e7       	ldi	r18, 0x73	; 115
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	45 ef       	ldi	r20, 0xF5	; 245
 a34:	50 e0       	ldi	r21, 0x00	; 0
 a36:	62 e3       	ldi	r22, 0x32	; 50
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	8d ec       	ldi	r24, 0xCD	; 205
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(270, 50, 310, 115, black);	// High level
 a42:	23 e7       	ldi	r18, 0x73	; 115
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	46 e3       	ldi	r20, 0x36	; 54
 a48:	51 e0       	ldi	r21, 0x01	; 1
 a4a:	62 e3       	ldi	r22, 0x32	; 50
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	8e e0       	ldi	r24, 0x0E	; 14
 a50:	91 e0       	ldi	r25, 0x01	; 1
 a52:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	
	// Bottom channel levels
	drawBox(10, 159, 50, 224, black);	// Vol level
 a56:	20 ee       	ldi	r18, 0xE0	; 224
 a58:	30 e0       	ldi	r19, 0x00	; 0
 a5a:	42 e3       	ldi	r20, 0x32	; 50
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	6f e9       	ldi	r22, 0x9F	; 159
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	8a e0       	ldi	r24, 0x0A	; 10
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(75, 159, 115, 224, black);	// Gain level
 a6a:	20 ee       	ldi	r18, 0xE0	; 224
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	43 e7       	ldi	r20, 0x73	; 115
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	6f e9       	ldi	r22, 0x9F	; 159
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	8b e4       	ldi	r24, 0x4B	; 75
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(140, 159, 180, 224, black);	// Low level
 a7e:	20 ee       	ldi	r18, 0xE0	; 224
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	44 eb       	ldi	r20, 0xB4	; 180
 a84:	50 e0       	ldi	r21, 0x00	; 0
 a86:	6f e9       	ldi	r22, 0x9F	; 159
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	8c e8       	ldi	r24, 0x8C	; 140
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(205, 159, 245, 224, black);	// Mid level
 a92:	20 ee       	ldi	r18, 0xE0	; 224
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	45 ef       	ldi	r20, 0xF5	; 245
 a98:	50 e0       	ldi	r21, 0x00	; 0
 a9a:	6f e9       	ldi	r22, 0x9F	; 159
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	8d ec       	ldi	r24, 0xCD	; 205
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	drawBox(270, 159, 310, 224, black);	// High level
 aa6:	20 ee       	ldi	r18, 0xE0	; 224
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	46 e3       	ldi	r20, 0x36	; 54
 aac:	51 e0       	ldi	r21, 0x01	; 1
 aae:	6f e9       	ldi	r22, 0x9F	; 159
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	8e e0       	ldi	r24, 0x0E	; 14
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z7drawBoxsssss>
	
	// Draw all lines last
	xmitHLine(0, 16, 319, black);	// Header separator
 aba:	2f ef       	ldi	r18, 0xFF	; 255
 abc:	3f ef       	ldi	r19, 0xFF	; 255
 abe:	4f e3       	ldi	r20, 0x3F	; 63
 ac0:	51 e0       	ldi	r21, 0x01	; 1
 ac2:	60 e1       	ldi	r22, 0x10	; 16
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z9xmitHLinessss>
	xmitHLine(0, 125, 319, black);	// Top/Bottom Channel separator
 ace:	2f ef       	ldi	r18, 0xFF	; 255
 ad0:	3f ef       	ldi	r19, 0xFF	; 255
 ad2:	4f e3       	ldi	r20, 0x3F	; 63
 ad4:	51 e0       	ldi	r21, 0x01	; 1
 ad6:	6d e7       	ldi	r22, 0x7D	; 125
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z9xmitHLinessss>
	
	xmitVLine(63, 16, 223, black);	// Vol/Gain separator
 ae2:	2f ef       	ldi	r18, 0xFF	; 255
 ae4:	3f ef       	ldi	r19, 0xFF	; 255
 ae6:	4f ed       	ldi	r20, 0xDF	; 223
 ae8:	50 e0       	ldi	r21, 0x00	; 0
 aea:	60 e1       	ldi	r22, 0x10	; 16
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	8f e3       	ldi	r24, 0x3F	; 63
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9xmitVLinessss>
	xmitVLine(127, 16, 223, black);	// Gain/Low separator
 af6:	2f ef       	ldi	r18, 0xFF	; 255
 af8:	3f ef       	ldi	r19, 0xFF	; 255
 afa:	4f ed       	ldi	r20, 0xDF	; 223
 afc:	50 e0       	ldi	r21, 0x00	; 0
 afe:	60 e1       	ldi	r22, 0x10	; 16
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	8f e7       	ldi	r24, 0x7F	; 127
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9xmitVLinessss>
	xmitVLine(193, 16, 223, black);	// Low/Mid separator
 b0a:	2f ef       	ldi	r18, 0xFF	; 255
 b0c:	3f ef       	ldi	r19, 0xFF	; 255
 b0e:	4f ed       	ldi	r20, 0xDF	; 223
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	60 e1       	ldi	r22, 0x10	; 16
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	81 ec       	ldi	r24, 0xC1	; 193
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9xmitVLinessss>
	xmitVLine(257, 16, 223, black);	// Mid/High separator
 b1e:	2f ef       	ldi	r18, 0xFF	; 255
 b20:	3f ef       	ldi	r19, 0xFF	; 255
 b22:	4f ed       	ldi	r20, 0xDF	; 223
 b24:	50 e0       	ldi	r21, 0x00	; 0
 b26:	60 e1       	ldi	r22, 0x10	; 16
 b28:	70 e0       	ldi	r23, 0x00	; 0
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	91 e0       	ldi	r25, 0x01	; 1
 b2e:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9xmitVLinessss>
	
}
 b32:	1f 91       	pop	r17
 b34:	0f 91       	pop	r16
 b36:	08 95       	ret

00000b38 <_Z7fillBoxsssss>:
	xmitHLine(topleft_x, botright_y, width, color);	// bottom
	xmitVLine(topleft_x, topleft_y, height, color);	// left
	xmitVLine(botright_x, topleft_y, height, color);	// right
}

void fillBox(short int topleft_x, short int topleft_y, short int botright_x, short int botright_y, short int color){
 b38:	6f 92       	push	r6
 b3a:	7f 92       	push	r7
 b3c:	8f 92       	push	r8
 b3e:	9f 92       	push	r9
 b40:	af 92       	push	r10
 b42:	bf 92       	push	r11
 b44:	cf 92       	push	r12
 b46:	df 92       	push	r13
 b48:	ef 92       	push	r14
 b4a:	ff 92       	push	r15
 b4c:	0f 93       	push	r16
 b4e:	1f 93       	push	r17
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	5c 01       	movw	r10, r24
 b56:	3b 01       	movw	r6, r22
 b58:	ea 01       	movw	r28, r20
 b5a:	49 01       	movw	r8, r18
	short int height = botright_y - topleft_y;
 b5c:	79 01       	movw	r14, r18
 b5e:	e6 1a       	sub	r14, r22
 b60:	f7 0a       	sbc	r15, r23
	short int width = botright_x - topleft_x;
 b62:	6a 01       	movw	r12, r20
 b64:	c8 1a       	sub	r12, r24
 b66:	d9 0a       	sbc	r13, r25
	unsigned char xEndH = (unsigned char)(botright_x >> 8);
	unsigned char xEndL = (unsigned char)(botright_x & 0x00FF);
	unsigned char yStart = (unsigned char)topleft_y;
	unsigned char yEnd = (unsigned char)botright_y;
	
	xmitCMD(0x36); // Memory access control
 b68:	86 e3       	ldi	r24, 0x36	; 54
 b6a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 b6e:	80 ea       	ldi	r24, 0xA0	; 160
 b70:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
		xmitCMD(0x2A); // X Address Set
 b74:	8a e2       	ldi	r24, 0x2A	; 42
 b76:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
		xmitDATA(xStartH); //
 b7a:	8b 2d       	mov	r24, r11
 b7c:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(xStartL); // Start left x
 b80:	8a 2d       	mov	r24, r10
 b82:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(xEndH); //
 b86:	8d 2f       	mov	r24, r29
 b88:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(xEndL); // Finish right x
 b8c:	8c 2f       	mov	r24, r28
 b8e:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		
		xmitCMD(0x2B); // /y Address Set
 b92:	8b e2       	ldi	r24, 0x2B	; 43
 b94:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
		xmitDATA(0x00); //
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(yStart); // Start top y
 b9e:	86 2d       	mov	r24, r6
 ba0:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(0x00); //
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(yEnd); // Finish bottom y
 baa:	88 2d       	mov	r24, r8
 bac:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
	
	xmitCMD(0x2C); // Start writing pixels
 bb0:	8c e2       	ldi	r24, 0x2C	; 44
 bb2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z7xmitCMDh>
	for(int i=0; i<=width; i++)
 bb6:	dd 20       	and	r13, r13
 bb8:	a4 f4       	brge	.+40     	; 0xbe2 <_Z7fillBoxsssss+0xaa>
 bba:	18 c0       	rjmp	.+48     	; 0xbec <_Z7fillBoxsssss+0xb4>
	for(int j=0; j<=height; j++) {
 bbc:	c0 e0       	ldi	r28, 0x00	; 0
 bbe:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 bc0:	81 2f       	mov	r24, r17
 bc2:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(colorL);
 bc6:	80 2f       	mov	r24, r16
 bc8:	0e 94 c8 01 	call	0x390	; 0x390 <_Z8xmitDATAh>
		xmitDATA(0x00); //
		xmitDATA(yEnd); // Finish bottom y
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<=width; i++)
	for(int j=0; j<=height; j++) {
 bcc:	21 96       	adiw	r28, 0x01	; 1
 bce:	ec 16       	cp	r14, r28
 bd0:	fd 06       	cpc	r15, r29
 bd2:	b4 f7       	brge	.-20     	; 0xbc0 <_Z7fillBoxsssss+0x88>
		xmitDATA(yStart); // Start top y
		xmitDATA(0x00); //
		xmitDATA(yEnd); // Finish bottom y
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<=width; i++)
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	a8 1a       	sub	r10, r24
 bd8:	b8 0a       	sbc	r11, r24
 bda:	ca 14       	cp	r12, r10
 bdc:	db 04       	cpc	r13, r11
 bde:	1c f4       	brge	.+6      	; 0xbe6 <_Z7fillBoxsssss+0xae>
 be0:	05 c0       	rjmp	.+10     	; 0xbec <_Z7fillBoxsssss+0xb4>
 be2:	a1 2c       	mov	r10, r1
 be4:	b1 2c       	mov	r11, r1
	for(int j=0; j<=height; j++) {
 be6:	ff 20       	and	r15, r15
 be8:	4c f7       	brge	.-46     	; 0xbbc <_Z7fillBoxsssss+0x84>
 bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <_Z7fillBoxsssss+0x9c>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}
 bec:	df 91       	pop	r29
 bee:	cf 91       	pop	r28
 bf0:	1f 91       	pop	r17
 bf2:	0f 91       	pop	r16
 bf4:	ff 90       	pop	r15
 bf6:	ef 90       	pop	r14
 bf8:	df 90       	pop	r13
 bfa:	cf 90       	pop	r12
 bfc:	bf 90       	pop	r11
 bfe:	af 90       	pop	r10
 c00:	9f 90       	pop	r9
 c02:	8f 90       	pop	r8
 c04:	7f 90       	pop	r7
 c06:	6f 90       	pop	r6
 c08:	08 95       	ret

00000c0a <_Z7fillLCDs>:
			
	}
}

void fillLCD(short int color)
{
 c0a:	0f 93       	push	r16
 c0c:	1f 93       	push	r17
	fillBox(0, 0, 320, 240, color);
 c0e:	8c 01       	movw	r16, r24
 c10:	20 ef       	ldi	r18, 0xF0	; 240
 c12:	30 e0       	ldi	r19, 0x00	; 0
 c14:	40 e4       	ldi	r20, 0x40	; 64
 c16:	51 e0       	ldi	r21, 0x01	; 1
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	70 e0       	ldi	r23, 0x00	; 0
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z7fillBoxsssss>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
	*/
	
}
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	08 95       	ret

00000c2a <_Z9drawLevelsssss>:
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}

void drawLevel(short int x_left, short int x_right, short int y_top, short int y_bot, short int val){
 c2a:	8f 92       	push	r8
 c2c:	9f 92       	push	r9
 c2e:	af 92       	push	r10
 c30:	bf 92       	push	r11
 c32:	cf 92       	push	r12
 c34:	df 92       	push	r13
 c36:	ef 92       	push	r14
 c38:	ff 92       	push	r15
 c3a:	0f 93       	push	r16
 c3c:	1f 93       	push	r17
 c3e:	cf 93       	push	r28
 c40:	df 93       	push	r29
 c42:	7c 01       	movw	r14, r24
 c44:	6b 01       	movw	r12, r22
 c46:	4a 01       	movw	r8, r20
 c48:	e8 01       	movw	r28, r16
	short int blue = BLUE;
	short int black = BLACK;
	
	short int level = y_bot - val;			// Get height to draw level (value from 0-255 mapped to height of box)
 c4a:	59 01       	movw	r10, r18
 c4c:	a0 1a       	sub	r10, r16
 c4e:	b1 0a       	sbc	r11, r17
	if(val>0){
 c50:	1c 16       	cp	r1, r28
 c52:	1d 06       	cpc	r1, r29
 c54:	34 f4       	brge	.+12     	; 0xc62 <_Z9drawLevelsssss+0x38>
		fillBox(x_left, level, x_right, y_bot, (int)RED);	// Fill in gain level blue
 c56:	00 e0       	ldi	r16, 0x00	; 0
 c58:	18 ef       	ldi	r17, 0xF8	; 248
 c5a:	ab 01       	movw	r20, r22
 c5c:	b5 01       	movw	r22, r10
 c5e:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z7fillBoxsssss>
	}
	if(val<63){
 c62:	ef 97       	sbiw	r28, 0x3f	; 63
 c64:	44 f4       	brge	.+16     	; 0xc76 <_Z9drawLevelsssss+0x4c>
		fillBox(x_left, y_top, x_right, level, (int)BLACK);	// Fill in empty space white
 c66:	00 e0       	ldi	r16, 0x00	; 0
 c68:	10 e0       	ldi	r17, 0x00	; 0
 c6a:	95 01       	movw	r18, r10
 c6c:	a6 01       	movw	r20, r12
 c6e:	b4 01       	movw	r22, r8
 c70:	c7 01       	movw	r24, r14
 c72:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z7fillBoxsssss>
	}
}
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
 c7a:	1f 91       	pop	r17
 c7c:	0f 91       	pop	r16
 c7e:	ff 90       	pop	r15
 c80:	ef 90       	pop	r14
 c82:	df 90       	pop	r13
 c84:	cf 90       	pop	r12
 c86:	bf 90       	pop	r11
 c88:	af 90       	pop	r10
 c8a:	9f 90       	pop	r9
 c8c:	8f 90       	pop	r8
 c8e:	08 95       	ret

00000c90 <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
 c98:	66 97       	sbiw	r28, 0x16	; 22
 c9a:	cd bf       	out	0x3d, r28	; 61
 c9c:	de bf       	out	0x3e, r29	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 c9e:	8d b7       	in	r24, 0x3d	; 61
 ca0:	9e b7       	in	r25, 0x3e	; 62
 ca2:	86 5e       	subi	r24, 0xE6	; 230
 ca4:	91 09       	sbc	r25, r1
 ca6:	8d bf       	out	0x3d, r24	; 61
 ca8:	9e bf       	out	0x3e, r25	; 62
 caa:	ad b7       	in	r26, 0x3d	; 61
 cac:	be b7       	in	r27, 0x3e	; 62
 cae:	11 96       	adiw	r26, 0x01	; 1
 cb0:	7d 01       	movw	r14, r26
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 cb2:	80 91 5c 25 	lds	r24, 0x255C
 cb6:	90 91 5d 25 	lds	r25, 0x255D
 cba:	0f 2e       	mov	r0, r31
 cbc:	f7 e1       	ldi	r31, 0x17	; 23
 cbe:	9f 2e       	mov	r9, r31
 cc0:	f0 2d       	mov	r31, r0
 cc2:	98 9e       	mul	r9, r24
 cc4:	f0 01       	movw	r30, r0
 cc6:	99 9e       	mul	r9, r25
 cc8:	f0 0d       	add	r31, r0
 cca:	11 24       	eor	r1, r1
 ccc:	ea 0f       	add	r30, r26
 cce:	fb 1f       	adc	r31, r27
 cd0:	2f e3       	ldi	r18, 0x3F	; 63
 cd2:	35 e2       	ldi	r19, 0x25	; 37
 cd4:	20 83       	st	Z, r18
 cd6:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 cd8:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 cda:	2b e4       	ldi	r18, 0x4B	; 75
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	22 87       	std	Z+10, r18	; 0x0a
 ce0:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 ce2:	45 e5       	ldi	r20, 0x55	; 85
 ce4:	50 e0       	ldi	r21, 0x00	; 0
 ce6:	46 87       	std	Z+14, r20	; 0x0e
 ce8:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 cea:	24 87       	std	Z+12, r18	; 0x0c
 cec:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 cee:	42 83       	std	Z+2, r20	; 0x02
 cf0:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 cf2:	0c e8       	ldi	r16, 0x8C	; 140
 cf4:	10 e0       	ldi	r17, 0x00	; 0
 cf6:	01 8b       	std	Z+17, r16	; 0x11
 cf8:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 cfa:	ab e9       	ldi	r26, 0x9B	; 155
 cfc:	b0 e0       	ldi	r27, 0x00	; 0
 cfe:	a3 8b       	std	Z+19, r26	; 0x13
 d00:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 d02:	16 82       	std	Z+6, r1	; 0x06
 d04:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 d06:	10 86       	std	Z+8, r1	; 0x08
 d08:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 d0a:	0f 2e       	mov	r0, r31
 d0c:	f2 e3       	ldi	r31, 0x32	; 50
 d0e:	4f 2e       	mov	r4, r31
 d10:	51 2c       	mov	r5, r1
 d12:	f0 2d       	mov	r31, r0
 d14:	44 82       	std	Z+4, r4	; 0x04
 d16:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 d18:	0f 2e       	mov	r0, r31
 d1a:	f4 eb       	ldi	r31, 0xB4	; 180
 d1c:	af 2e       	mov	r10, r31
 d1e:	b1 2c       	mov	r11, r1
 d20:	f0 2d       	mov	r31, r0
 d22:	a5 8a       	std	Z+21, r10	; 0x15
 d24:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;	
 d26:	6c 01       	movw	r12, r24
 d28:	6f ef       	ldi	r22, 0xFF	; 255
 d2a:	c6 1a       	sub	r12, r22
 d2c:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 d2e:	0f 2e       	mov	r0, r31
 d30:	fc e4       	ldi	r31, 0x4C	; 76
 d32:	6f 2e       	mov	r6, r31
 d34:	f5 e2       	ldi	r31, 0x25	; 37
 d36:	7f 2e       	mov	r7, r31
 d38:	f0 2d       	mov	r31, r0
 d3a:	67 8a       	std	Z+23, r6	; 0x17
 d3c:	70 8e       	std	Z+24, r7	; 0x18
	userQueue[numConfig].cleanOn = true;
 d3e:	9c 9c       	mul	r9, r12
 d40:	f0 01       	movw	r30, r0
 d42:	9d 9c       	mul	r9, r13
 d44:	f0 0d       	add	r31, r0
 d46:	11 24       	eor	r1, r1
 d48:	ee 0d       	add	r30, r14
 d4a:	ff 1d       	adc	r31, r15
 d4c:	ff 24       	eor	r15, r15
 d4e:	f3 94       	inc	r15
 d50:	f0 8a       	std	Z+16, r15	; 0x10
	userQueue[numConfig].bass = 85;
 d52:	42 87       	std	Z+10, r20	; 0x0a
 d54:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 d56:	26 87       	std	Z+14, r18	; 0x0e
 d58:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 d5a:	24 87       	std	Z+12, r18	; 0x0c
 d5c:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 d5e:	29 e1       	ldi	r18, 0x19	; 25
 d60:	30 e0       	ldi	r19, 0x00	; 0
 d62:	22 83       	std	Z+2, r18	; 0x02
 d64:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 d66:	01 8b       	std	Z+17, r16	; 0x11
 d68:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 d6a:	a3 8b       	std	Z+19, r26	; 0x13
 d6c:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 d6e:	16 82       	std	Z+6, r1	; 0x06
 d70:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 d72:	10 86       	std	Z+8, r1	; 0x08
 d74:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 d76:	44 82       	std	Z+4, r4	; 0x04
 d78:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 d7a:	a5 8a       	std	Z+21, r10	; 0x15
 d7c:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;
 d7e:	02 96       	adiw	r24, 0x02	; 2
 d80:	80 93 5c 25 	sts	0x255C, r24
 d84:	90 93 5d 25 	sts	0x255D, r25
	
	init();
 d88:	0e 94 35 01 	call	0x26a	; 0x26a <_Z4initv>
	initUSART();
 d8c:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z9initUSARTv>
	initLCD();
 d90:	0e 94 01 02 	call	0x402	; 0x402 <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 d94:	e0 e2       	ldi	r30, 0x20	; 32
 d96:	f6 e0       	ldi	r31, 0x06	; 6
 d98:	80 e1       	ldi	r24, 0x10	; 16
 d9a:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 d9c:	82 e0       	ldi	r24, 0x02	; 2
 d9e:	85 83       	std	Z+5, r24	; 0x05
	
	//xmitCMD(0x2C); // Start writing pixels
	
	short int qPos[11] = {0,0,0,0,0,0,0,0,0,0,0};
 da0:	fe 01       	movw	r30, r28
 da2:	31 96       	adiw	r30, 0x01	; 1
 da4:	86 e1       	ldi	r24, 0x16	; 22
 da6:	df 01       	movw	r26, r30
 da8:	1d 92       	st	X+, r1
 daa:	8a 95       	dec	r24
 dac:	e9 f7       	brne	.-6      	; 0xda8 <main+0x118>
	short int enc = 0;
	
	short int BKCOL = BLUE;
	short int char_color = BLACK;
	short int bg_color = WHITE;
	fillLCD(char_color);
 dae:	80 e0       	ldi	r24, 0x00	; 0
 db0:	90 e0       	ldi	r25, 0x00	; 0
 db2:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z7fillLCDs>
	drawDisplay('1');
 db6:	81 e3       	ldi	r24, 0x31	; 49
 db8:	0e 94 85 04 	call	0x90a	; 0x90a <_Z11drawDisplayh>
	
	//xmitCMD(0x2C); // Start writing pixels
	
	short int qPos[11] = {0,0,0,0,0,0,0,0,0,0,0};
	short int pos = 0;
	short int enc = 0;
 dbc:	c1 2c       	mov	r12, r1
 dbe:	d1 2c       	mov	r13, r1
	fillLCD(char_color);
	drawDisplay('1');
	
	while (1)
	{
		if(USARTE1_STATUS & USART_RXCIF_bm) // If there is unread data from Main CPU...
 dc0:	0f 2e       	mov	r0, r31
 dc2:	f1 eb       	ldi	r31, 0xB1	; 177
 dc4:	ef 2e       	mov	r14, r31
 dc6:	fa e0       	ldi	r31, 0x0A	; 10
 dc8:	ff 2e       	mov	r15, r31
 dca:	f0 2d       	mov	r31, r0
			int x_left= 0;
			int x_right = 0;
			
			if(enc<5){
				y_top = 51;
				y_bot = 114;
 dcc:	0f 2e       	mov	r0, r31
 dce:	f2 e7       	ldi	r31, 0x72	; 114
 dd0:	af 2e       	mov	r10, r31
 dd2:	f0 2d       	mov	r31, r0
 dd4:	b1 2c       	mov	r11, r1
			}
			else{
				y_top = 160;
				y_bot = 223;
 dd6:	0f 2e       	mov	r0, r31
 dd8:	ff ed       	ldi	r31, 0xDF	; 223
 dda:	7f 2e       	mov	r7, r31
 ddc:	f0 2d       	mov	r31, r0
 dde:	81 2c       	mov	r8, r1
			if(enc<5){
				y_top = 51;
				y_bot = 114;
			}
			else{
				y_top = 160;
 de0:	0f 2e       	mov	r0, r31
 de2:	f0 ea       	ldi	r31, 0xA0	; 160
 de4:	9f 2e       	mov	r9, r31
 de6:	f0 2d       	mov	r31, r0
 de8:	61 2c       	mov	r6, r1
					x_right = 244;
					break;
				case 2:
				case 7:
					x_left = 141;
					x_right = 179;
 dea:	21 2c       	mov	r2, r1
					x_left = 206;
					x_right = 244;
					break;
				case 2:
				case 7:
					x_left = 141;
 dec:	31 2c       	mov	r3, r1
					x_right = 309;
					break;
				case 1:
				case 6:
					x_left = 206;
					x_right = 244;
 dee:	41 2c       	mov	r4, r1
					x_left = 271;
					x_right = 309;
					break;
				case 1:
				case 6:
					x_left = 206;
 df0:	51 2c       	mov	r5, r1
	fillLCD(char_color);
	drawDisplay('1');
	
	while (1)
	{
		if(USARTE1_STATUS & USART_RXCIF_bm) // If there is unread data from Main CPU...
 df2:	f7 01       	movw	r30, r14
 df4:	80 81       	ld	r24, Z
 df6:	88 23       	and	r24, r24
 df8:	e4 f7       	brge	.-8      	; 0xdf2 <main+0x162>
		{
			char c = getByte(3);
 dfa:	83 e0       	ldi	r24, 0x03	; 3
 dfc:	90 e0       	ldi	r25, 0x00	; 0
 dfe:	0e 94 99 01 	call	0x332	; 0x332 <_Z7getBytei>
			if (c >= '0' && c<='9'){
 e02:	90 ed       	ldi	r25, 0xD0	; 208
 e04:	98 0f       	add	r25, r24
 e06:	9a 30       	cpi	r25, 0x0A	; 10
 e08:	28 f4       	brcc	.+10     	; 0xe14 <main+0x184>
				enc = (int)(c-'0');
 e0a:	c8 2e       	mov	r12, r24
 e0c:	d1 2c       	mov	r13, r1
 e0e:	f0 e3       	ldi	r31, 0x30	; 48
 e10:	cf 1a       	sub	r12, r31
 e12:	d1 08       	sbc	r13, r1
			}
			if(c == '+'){
 e14:	8b 32       	cpi	r24, 0x2B	; 43
 e16:	a1 f4       	brne	.+40     	; 0xe40 <main+0x1b0>
				qPos[enc] = min(qPos[enc]+1, 63);
 e18:	f6 01       	movw	r30, r12
 e1a:	ee 0f       	add	r30, r30
 e1c:	ff 1f       	adc	r31, r31
 e1e:	81 e0       	ldi	r24, 0x01	; 1
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	8c 0f       	add	r24, r28
 e24:	9d 1f       	adc	r25, r29
 e26:	e8 0f       	add	r30, r24
 e28:	f9 1f       	adc	r31, r25
 e2a:	80 81       	ld	r24, Z
 e2c:	91 81       	ldd	r25, Z+1	; 0x01
 e2e:	01 96       	adiw	r24, 0x01	; 1
 e30:	80 34       	cpi	r24, 0x40	; 64
 e32:	91 05       	cpc	r25, r1
 e34:	14 f0       	brlt	.+4      	; 0xe3a <main+0x1aa>
 e36:	8f e3       	ldi	r24, 0x3F	; 63
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	80 83       	st	Z, r24
 e3c:	91 83       	std	Z+1, r25	; 0x01
 e3e:	13 c0       	rjmp	.+38     	; 0xe66 <main+0x1d6>
			}
			else if(c == '-'){
 e40:	8d 32       	cpi	r24, 0x2D	; 45
 e42:	89 f4       	brne	.+34     	; 0xe66 <main+0x1d6>
				qPos[enc] = max(qPos[enc]-1, 0);
 e44:	f6 01       	movw	r30, r12
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	a1 e0       	ldi	r26, 0x01	; 1
 e4c:	b0 e0       	ldi	r27, 0x00	; 0
 e4e:	ac 0f       	add	r26, r28
 e50:	bd 1f       	adc	r27, r29
 e52:	ea 0f       	add	r30, r26
 e54:	fb 1f       	adc	r31, r27
 e56:	80 81       	ld	r24, Z
 e58:	91 81       	ldd	r25, Z+1	; 0x01
 e5a:	01 97       	sbiw	r24, 0x01	; 1
 e5c:	12 f4       	brpl	.+4      	; 0xe62 <main+0x1d2>
 e5e:	80 e0       	ldi	r24, 0x00	; 0
 e60:	90 e0       	ldi	r25, 0x00	; 0
 e62:	80 83       	st	Z, r24
 e64:	91 83       	std	Z+1, r25	; 0x01
			int y_top = 0;
			int y_bot = 0;
			int x_left= 0;
			int x_right = 0;
			
			if(enc<5){
 e66:	b5 e0       	ldi	r27, 0x05	; 5
 e68:	cb 16       	cp	r12, r27
 e6a:	d1 04       	cpc	r13, r1
 e6c:	2c f0       	brlt	.+10     	; 0xe78 <main+0x1e8>
				y_top = 51;
				y_bot = 114;
			}
			else{
				y_top = 160;
				y_bot = 223;
 e6e:	27 2d       	mov	r18, r7
 e70:	38 2d       	mov	r19, r8
			if(enc<5){
				y_top = 51;
				y_bot = 114;
			}
			else{
				y_top = 160;
 e72:	49 2d       	mov	r20, r9
 e74:	56 2d       	mov	r21, r6
 e76:	04 c0       	rjmp	.+8      	; 0xe80 <main+0x1f0>
			int x_left= 0;
			int x_right = 0;
			
			if(enc<5){
				y_top = 51;
				y_bot = 114;
 e78:	2a 2d       	mov	r18, r10
 e7a:	3b 2d       	mov	r19, r11
			int y_bot = 0;
			int x_left= 0;
			int x_right = 0;
			
			if(enc<5){
				y_top = 51;
 e7c:	43 e3       	ldi	r20, 0x33	; 51
 e7e:	50 e0       	ldi	r21, 0x00	; 0
			drawBox(140, 159, 180, 224, black);	// Low level
			drawBox(205, 159, 245, 224, black);	// Mid level
			drawBox(270, 159, 310, 224, black);	// High level
			*/
			
			switch(enc) {
 e80:	ea e0       	ldi	r30, 0x0A	; 10
 e82:	ce 16       	cp	r12, r30
 e84:	d1 04       	cpc	r13, r1
 e86:	00 f5       	brcc	.+64     	; 0xec8 <main+0x238>
 e88:	f6 01       	movw	r30, r12
 e8a:	88 27       	eor	r24, r24
 e8c:	e2 50       	subi	r30, 0x02	; 2
 e8e:	ff 4f       	sbci	r31, 0xFF	; 255
 e90:	8f 4f       	sbci	r24, 0xFF	; 255
 e92:	0c 94 76 07 	jmp	0xeec	; 0xeec <__tablejump2__>
				case 0:
				case 5:
					x_left = 271;
					x_right = 309;
 e96:	65 e3       	ldi	r22, 0x35	; 53
 e98:	71 e0       	ldi	r23, 0x01	; 1
			*/
			
			switch(enc) {
				case 0:
				case 5:
					x_left = 271;
 e9a:	8f e0       	ldi	r24, 0x0F	; 15
 e9c:	91 e0       	ldi	r25, 0x01	; 1
 e9e:	18 c0       	rjmp	.+48     	; 0xed0 <main+0x240>
					x_right = 309;
					break;
				case 1:
				case 6:
					x_left = 206;
					x_right = 244;
 ea0:	64 ef       	ldi	r22, 0xF4	; 244
 ea2:	74 2d       	mov	r23, r4
					x_left = 271;
					x_right = 309;
					break;
				case 1:
				case 6:
					x_left = 206;
 ea4:	8e ec       	ldi	r24, 0xCE	; 206
 ea6:	95 2d       	mov	r25, r5
					x_right = 244;
					break;
 ea8:	13 c0       	rjmp	.+38     	; 0xed0 <main+0x240>
				case 2:
				case 7:
					x_left = 141;
					x_right = 179;
 eaa:	63 eb       	ldi	r22, 0xB3	; 179
 eac:	72 2d       	mov	r23, r2
					x_left = 206;
					x_right = 244;
					break;
				case 2:
				case 7:
					x_left = 141;
 eae:	8d e8       	ldi	r24, 0x8D	; 141
 eb0:	93 2d       	mov	r25, r3
					x_right = 179;
					break;
 eb2:	0e c0       	rjmp	.+28     	; 0xed0 <main+0x240>
				case 3:
				case 8:
					x_left = 76;
					x_right = 114;
 eb4:	6a 2d       	mov	r22, r10
 eb6:	7b 2d       	mov	r23, r11
					x_left = 141;
					x_right = 179;
					break;
				case 3:
				case 8:
					x_left = 76;
 eb8:	8c e4       	ldi	r24, 0x4C	; 76
 eba:	90 e0       	ldi	r25, 0x00	; 0
					x_right = 114;
					break;
 ebc:	09 c0       	rjmp	.+18     	; 0xed0 <main+0x240>
				case 4:
				case 9:
					x_left = 11;
					x_right = 49;
 ebe:	61 e3       	ldi	r22, 0x31	; 49
 ec0:	70 e0       	ldi	r23, 0x00	; 0
					x_left = 76;
					x_right = 114;
					break;
				case 4:
				case 9:
					x_left = 11;
 ec2:	8b e0       	ldi	r24, 0x0B	; 11
 ec4:	90 e0       	ldi	r25, 0x00	; 0
					x_right = 49;
					break;
 ec6:	04 c0       	rjmp	.+8      	; 0xed0 <main+0x240>
			//else if (val < 0) encoder_val = 0;
			//else encoder_val = val;
			int y_top = 0;
			int y_bot = 0;
			int x_left= 0;
			int x_right = 0;
 ec8:	60 e0       	ldi	r22, 0x00	; 0
 eca:	70 e0       	ldi	r23, 0x00	; 0
			//if (val > 255) encoder_val = 255;
			//else if (val < 0) encoder_val = 0;
			//else encoder_val = val;
			int y_top = 0;
			int y_bot = 0;
			int x_left= 0;
 ecc:	80 e0       	ldi	r24, 0x00	; 0
 ece:	90 e0       	ldi	r25, 0x00	; 0
					break;
				default:
					break;
			}
				
			drawLevel(x_left, x_right, y_top, y_bot, qPos[enc]);
 ed0:	f6 01       	movw	r30, r12
 ed2:	ee 0f       	add	r30, r30
 ed4:	ff 1f       	adc	r31, r31
 ed6:	a1 e0       	ldi	r26, 0x01	; 1
 ed8:	b0 e0       	ldi	r27, 0x00	; 0
 eda:	ac 0f       	add	r26, r28
 edc:	bd 1f       	adc	r27, r29
 ede:	ea 0f       	add	r30, r26
 ee0:	fb 1f       	adc	r31, r27
 ee2:	00 81       	ld	r16, Z
 ee4:	11 81       	ldd	r17, Z+1	; 0x01
 ee6:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z9drawLevelsssss>
 eea:	83 cf       	rjmp	.-250    	; 0xdf2 <main+0x162>

00000eec <__tablejump2__>:
 eec:	ee 0f       	add	r30, r30
 eee:	ff 1f       	adc	r31, r31
 ef0:	88 1f       	adc	r24, r24
 ef2:	8b bf       	out	0x3b, r24	; 59
 ef4:	07 90       	elpm	r0, Z+
 ef6:	f6 91       	elpm	r31, Z
 ef8:	e0 2d       	mov	r30, r0
 efa:	19 94       	eijmp

00000efc <_exit>:
 efc:	f8 94       	cli

00000efe <__stop_program>:
 efe:	ff cf       	rjmp	.-2      	; 0xefe <__stop_program>
