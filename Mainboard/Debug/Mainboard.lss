
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  000008bc  00000950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080201c  0080201c  0000096c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af0  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000309  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e7  00000000  00000000  0000286d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c5  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000846  00000000  00000000  000035d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec eb       	ldi	r30, 0xBC	; 188
 214:	f8 e0       	ldi	r31, 0x08	; 8
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ac 31       	cpi	r26, 0x1C	; 28
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	ac e1       	ldi	r26, 0x1C	; 28
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 31       	cpi	r26, 0x1E	; 30
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <main>
 23a:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_Z4initv>:
	}
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 248:	e0 e5       	ldi	r30, 0x50	; 80
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	81 ff       	sbrs	r24, 1
 250:	fd cf       	rjmp	.-6      	; 0x24c <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	88 ef       	ldi	r24, 0xF8	; 248
 268:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 270:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 272:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 274:	14 96       	adiw	r26, 0x04	; 4
 276:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 278:	e0 e2       	ldi	r30, 0x20	; 32
 27a:	f6 e0       	ldi	r31, 0x06	; 6
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 280:	a0 e4       	ldi	r26, 0x40	; 64
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	1c 92       	st	X, r1
 28a:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 290:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 292:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 294:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 296:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 298:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 29a:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 29c:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2a0:	9b eb       	ldi	r25, 0xBB	; 187
 2a2:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2a6:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2b0:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z4initv+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z4initv+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f9 e0       	ldi	r31, 0x09	; 9
 2ca:	2c e0       	ldi	r18, 0x0C	; 12
 2cc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2d2:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2e2:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 2e4:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2e6:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 2e8:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	fa e0       	ldi	r31, 0x0A	; 10
 2ee:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f0:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 2f2:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2f4:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 2fa:	e0 eb       	ldi	r30, 0xB0	; 176
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 300:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 302:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 304:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 306:	35 83       	std	Z+5, r19	; 0x05
 308:	08 95       	ret

0000030a <_Z8xmitDATAh>:
	//xmitDATA(0x1F); // Blue
}

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 30a:	e0 e2       	ldi	r30, 0x20	; 32
 30c:	f6 e0       	ldi	r31, 0x06	; 6
 30e:	90 e2       	ldi	r25, 0x20	; 32
 310:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 312:	80 93 a4 06 	sts	0x06A4, r24
	//lcdDelay(1);
	PORTB.OUTCLR = 0b01000000; // WR goes low
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	86 83       	std	Z+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 31a:	85 83       	std	Z+5, r24	; 0x05
 31c:	08 95       	ret

0000031e <_Z8lcdDelayh>:
	
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 31e:	88 23       	and	r24, r24
 320:	29 f0       	breq	.+10     	; 0x32c <_Z8lcdDelayh+0xe>
 322:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 324:	00 00       	nop
	
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	98 13       	cpse	r25, r24
 32a:	fc cf       	rjmp	.-8      	; 0x324 <_Z8lcdDelayh+0x6>
 32c:	08 95       	ret

0000032e <_Z7xmitCMDh>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitCMD(unsigned char cmdByte)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 332:	c0 e2       	ldi	r28, 0x20	; 32
 334:	d6 e0       	ldi	r29, 0x06	; 6
 336:	90 e2       	ldi	r25, 0x20	; 32
 338:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 33a:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 33e:	8a e0       	ldi	r24, 0x0A	; 10
 340:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	8e 83       	std	Y+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 348:	8d 83       	std	Y+5, r24	; 0x05
	//lcdDelay(1);
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 356:	81 e1       	ldi	r24, 0x11	; 17
 358:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 35c:	86 e3       	ldi	r24, 0x36	; 54
 35e:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 368:	8a e3       	ldi	r24, 0x3A	; 58
 36a:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 36e:	85 e5       	ldi	r24, 0x55	; 85
 370:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 374:	82 eb       	ldi	r24, 0xB2	; 178
 376:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 37a:	8c e0       	ldi	r24, 0x0C	; 12
 37c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 380:	8c e0       	ldi	r24, 0x0C	; 12
 382:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 38c:	83 e3       	ldi	r24, 0x33	; 51
 38e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 392:	83 e3       	ldi	r24, 0x33	; 51
 394:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 398:	87 eb       	ldi	r24, 0xB7	; 183
 39a:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x35); //
 39e:	85 e3       	ldi	r24, 0x35	; 53
 3a0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 3a4:	8b eb       	ldi	r24, 0xBB	; 187
 3a6:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 3aa:	8b e2       	ldi	r24, 0x2B	; 43
 3ac:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 3b0:	80 ec       	ldi	r24, 0xC0	; 192
 3b2:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 3b6:	8c e2       	ldi	r24, 0x2C	; 44
 3b8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 3bc:	82 ec       	ldi	r24, 0xC2	; 194
 3be:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x01); //
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 3ce:	83 ec       	ldi	r24, 0xC3	; 195
 3d0:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x11); //
 3d4:	81 e1       	ldi	r24, 0x11	; 17
 3d6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 3da:	84 ec       	ldi	r24, 0xC4	; 196
 3dc:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x20); //
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 3e6:	86 ec       	ldi	r24, 0xC6	; 198
 3e8:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 3ec:	8f e0       	ldi	r24, 0x0F	; 15
 3ee:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 3f2:	80 ed       	ldi	r24, 0xD0	; 208
 3f4:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 3f8:	84 ea       	ldi	r24, 0xA4	; 164
 3fa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 3fe:	81 ea       	ldi	r24, 0xA1	; 161
 400:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 404:	80 ee       	ldi	r24, 0xE0	; 224
 406:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 40a:	80 ed       	ldi	r24, 0xD0	; 208
 40c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 416:	85 e0       	ldi	r24, 0x05	; 5
 418:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 422:	85 e1       	ldi	r24, 0x15	; 21
 424:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x37); //
 42e:	87 e3       	ldi	r24, 0x37	; 55
 430:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x43); //
 434:	83 e4       	ldi	r24, 0x43	; 67
 436:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x47); //
 43a:	87 e4       	ldi	r24, 0x47	; 71
 43c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x09); //
 440:	89 e0       	ldi	r24, 0x09	; 9
 442:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 446:	85 e1       	ldi	r24, 0x15	; 21
 448:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x12); //
 44c:	82 e1       	ldi	r24, 0x12	; 18
 44e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 452:	86 e1       	ldi	r24, 0x16	; 22
 454:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 458:	89 e1       	ldi	r24, 0x19	; 25
 45a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 45e:	81 ee       	ldi	r24, 0xE1	; 225
 460:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 464:	80 ed       	ldi	r24, 0xD0	; 208
 466:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 476:	8d e0       	ldi	r24, 0x0D	; 13
 478:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 47c:	8c e0       	ldi	r24, 0x0C	; 12
 47e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x06); //
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 488:	8d e2       	ldi	r24, 0x2D	; 45
 48a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x44); //
 48e:	84 e4       	ldi	r24, 0x44	; 68
 490:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x40); //
 494:	80 e4       	ldi	r24, 0x40	; 64
 496:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 49a:	8e e0       	ldi	r24, 0x0E	; 14
 49c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 4a0:	8c e1       	ldi	r24, 0x1C	; 28
 4a2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x18); //
 4a6:	88 e1       	ldi	r24, 0x18	; 24
 4a8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 4ac:	86 e1       	ldi	r24, 0x16	; 22
 4ae:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 4b2:	89 e1       	ldi	r24, 0x19	; 25
 4b4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 4b8:	8a e2       	ldi	r24, 0x2A	; 42
 4ba:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x00); //
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 4d0:	8f ee       	ldi	r24, 0xEF	; 239
 4d2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 4d6:	8b e2       	ldi	r24, 0x2B	; 43
 4d8:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x00); //
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x01); //
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 4ee:	8f e3       	ldi	r24, 0x3F	; 63
 4f0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 4f4:	89 e2       	ldi	r24, 0x29	; 41
 4f6:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	81 ee       	ldi	r24, 0xE1	; 225
 4fe:	94 e0       	ldi	r25, 0x04	; 4
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <_Z7initLCDv+0x1b0>
 508:	00 c0       	rjmp	.+0      	; 0x50a <_Z7initLCDv+0x1ba>
 50a:	00 00       	nop
 50c:	08 95       	ret

0000050e <_Z9xmitHLinessss>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitHLine(short int xPos, short int yPos, short int length, short int color)
{
 50e:	cf 92       	push	r12
 510:	df 92       	push	r13
 512:	ef 92       	push	r14
 514:	ff 92       	push	r15
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	ec 01       	movw	r28, r24
 520:	d6 2e       	mov	r13, r22
 522:	8a 01       	movw	r16, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 524:	f3 2e       	mov	r15, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 526:	e2 2e       	mov	r14, r18
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
	unsigned char xEndL = (unsigned char)((xPos + length) & 0x00FF);
 528:	c8 2e       	mov	r12, r24
 52a:	c4 0e       	add	r12, r20
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = yStart;
		
	xmitCMD(0x36); // Memory access control
 52c:	86 e3       	ldi	r24, 0x36	; 54
 52e:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 532:	80 e8       	ldi	r24, 0x80	; 128
 534:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2A); // X Address Set
 538:	8a e2       	ldi	r24, 0x2A	; 42
 53a:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x00); //
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 544:	8d 2d       	mov	r24, r13
 546:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 550:	8d 2d       	mov	r24, r13
 552:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 556:	8b e2       	ldi	r24, 0x2B	; 43
 558:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 55c:	8d 2f       	mov	r24, r29
 55e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 562:	8c 2f       	mov	r24, r28
 564:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	unsigned char colorH = (unsigned char)(color >> 8);
	unsigned char colorL = (unsigned char)(color & 0x00FF);
	
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = (unsigned char)((xPos + length) >> 8);
 568:	c0 0f       	add	r28, r16
 56a:	d1 1f       	adc	r29, r17
	xmitDATA(yEnd); // Finish 239
		
	xmitCMD(0x2B); // Y Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 56c:	8d 2f       	mov	r24, r29
 56e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 572:	8c 2d       	mov	r24, r12
 574:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels
 578:	8c e2       	ldi	r24, 0x2C	; 44
 57a:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	for(int i=0; i<length; i++) {
 57e:	10 16       	cp	r1, r16
 580:	11 06       	cpc	r1, r17
 582:	64 f4       	brge	.+24     	; 0x59c <_Z9xmitHLinessss+0x8e>
 584:	c0 e0       	ldi	r28, 0x00	; 0
 586:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 588:	8f 2d       	mov	r24, r15
 58a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		xmitDATA(colorL);
 58e:	8e 2d       	mov	r24, r14
 590:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
	xmitDATA(xEndL); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<length; i++) {
 594:	21 96       	adiw	r28, 0x01	; 1
 596:	c0 17       	cp	r28, r16
 598:	d1 07       	cpc	r29, r17
 59a:	b1 f7       	brne	.-20     	; 0x588 <_Z9xmitHLinessss+0x7a>
		xmitDATA(colorH);
		xmitDATA(colorL);
			
	}
}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	08 95       	ret

000005ae <_Z7fillLCDs>:

void fillLCD(short int color)
{
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
	unsigned char colorH = (unsigned char)(color >> 8);
 5be:	09 2f       	mov	r16, r25
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 5c0:	18 2f       	mov	r17, r24
	
	xmitCMD(0x36); // Memory access control
 5c2:	86 e3       	ldi	r24, 0x36	; 54
 5c4:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, row/column exhange rest default
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2A); // X Address Set
 5ce:	8a e2       	ldi	r24, 0x2A	; 42
 5d0:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x00); //
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 5e6:	8f ee       	ldi	r24, 0xEF	; 239
 5e8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 5ec:	8b e2       	ldi	r24, 0x2B	; 43
 5ee:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x00); //
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x01); //
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 604:	8f e3       	ldi	r24, 0x3F	; 63
 606:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels	
 60a:	8c e2       	ldi	r24, 0x2C	; 44
 60c:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
 610:	68 94       	set
 612:	ee 24       	eor	r14, r14
 614:	e6 f8       	bld	r14, 6
 616:	ff 24       	eor	r15, r15
 618:	f3 94       	inc	r15
			
	}
}

void fillLCD(short int color)
{
 61a:	0f 2e       	mov	r0, r31
 61c:	f0 ef       	ldi	r31, 0xF0	; 240
 61e:	cf 2e       	mov	r12, r31
 620:	f0 2d       	mov	r31, r0
 622:	d1 2c       	mov	r13, r1
 624:	0c c0       	rjmp	.+24     	; 0x63e <_Z7fillLCDs+0x90>
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
	for(int j=0; j<240; j++) {
		xmitDATA(colorH);
 626:	80 2f       	mov	r24, r16
 628:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		xmitDATA(colorL);
 62c:	81 2f       	mov	r24, r17
 62e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
 632:	21 97       	sbiw	r28, 0x01	; 1
	xmitDATA(0x01); //
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
	for(int j=0; j<240; j++) {
 634:	c1 f7       	brne	.-16     	; 0x626 <_Z7fillLCDs+0x78>
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	e8 1a       	sub	r14, r24
 63a:	f1 08       	sbc	r15, r1
	xmitDATA(0x00); // Start 0
	xmitDATA(0x01); //
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
 63c:	19 f0       	breq	.+6      	; 0x644 <_Z7fillLCDs+0x96>
			
	}
}

void fillLCD(short int color)
{
 63e:	cc 2d       	mov	r28, r12
 640:	dd 2d       	mov	r29, r13
 642:	f1 cf       	rjmp	.-30     	; 0x626 <_Z7fillLCDs+0x78>
	for(int j=0; j<240; j++) {
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
	
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	cf 90       	pop	r12
 654:	08 95       	ret

00000656 <_Z9xmitVLinessss>:

// 60, 160, 120, RED
void xmitVLine(short int xPos, short int yPos, short int length, short int color)
{
 656:	cf 92       	push	r12
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	d8 2f       	mov	r29, r24
 668:	d9 2e       	mov	r13, r25
 66a:	c6 2f       	mov	r28, r22
 66c:	7a 01       	movw	r14, r20
	unsigned char colorH = (unsigned char)(color >> 8);
 66e:	13 2f       	mov	r17, r19
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 670:	02 2f       	mov	r16, r18
	unsigned char xStartH = (unsigned char)(xPos >> 8);
	unsigned char xStartL = (unsigned char)(xPos & 0x00FF);
	unsigned char xEndH = xStartH;
	unsigned char xEndL = xStartL;
	unsigned char yStart = (unsigned char)yPos;
	unsigned char yEnd = (unsigned char)yPos + (unsigned char)length;
 672:	c6 2e       	mov	r12, r22
 674:	c4 0e       	add	r12, r20
	
	xmitCMD(0x36); // Memory access control
 676:	86 e3       	ldi	r24, 0x36	; 54
 678:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 67c:	80 ea       	ldi	r24, 0xA0	; 160
 67e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2A); // X Address Set
 682:	8a e2       	ldi	r24, 0x2A	; 42
 684:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 688:	8d 2d       	mov	r24, r13
 68a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 68e:	8d 2f       	mov	r24, r29
 690:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndH); //
 694:	8d 2d       	mov	r24, r13
 696:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 69a:	8d 2f       	mov	r24, r29
 69c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 6a0:	8b e2       	ldi	r24, 0x2B	; 43
 6a2:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	xmitDATA(0x00); //
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
 6ac:	8c 2f       	mov	r24, r28
 6ae:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 6b8:	8c 2d       	mov	r24, r12
 6ba:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2C); // Start writing pixels	
 6be:	8c e2       	ldi	r24, 0x2C	; 44
 6c0:	0e 94 97 01 	call	0x32e	; 0x32e <_Z7xmitCMDh>
	for(int i=0; i<length; i++) {
 6c4:	1e 14       	cp	r1, r14
 6c6:	1f 04       	cpc	r1, r15
 6c8:	64 f4       	brge	.+24     	; 0x6e2 <_Z9xmitVLinessss+0x8c>
 6ca:	c0 e0       	ldi	r28, 0x00	; 0
 6cc:	d0 e0       	ldi	r29, 0x00	; 0
		xmitDATA(colorH);
 6ce:	81 2f       	mov	r24, r17
 6d0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
		xmitDATA(colorL);
 6d4:	80 2f       	mov	r24, r16
 6d6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(yStart); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239

	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<length; i++) {
 6da:	21 96       	adiw	r28, 0x01	; 1
 6dc:	ce 15       	cp	r28, r14
 6de:	df 05       	cpc	r29, r15
 6e0:	b1 f7       	brne	.-20     	; 0x6ce <_Z9xmitVLinessss+0x78>
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
}
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	ff 90       	pop	r15
 6ec:	ef 90       	pop	r14
 6ee:	df 90       	pop	r13
 6f0:	cf 90       	pop	r12
 6f2:	08 95       	ret

000006f4 <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 6fc:	8d b7       	in	r24, 0x3d	; 61
 6fe:	9e b7       	in	r25, 0x3e	; 62
 700:	86 5e       	subi	r24, 0xE6	; 230
 702:	91 09       	sbc	r25, r1
 704:	8d bf       	out	0x3d, r24	; 61
 706:	9e bf       	out	0x3e, r25	; 62
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	7c 01       	movw	r14, r24
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 70c:	80 91 1c 20 	lds	r24, 0x201C
 710:	90 91 1d 20 	lds	r25, 0x201D
 714:	0f 2e       	mov	r0, r31
 716:	f7 e1       	ldi	r31, 0x17	; 23
 718:	9f 2e       	mov	r9, r31
 71a:	f0 2d       	mov	r31, r0
 71c:	98 9e       	mul	r9, r24
 71e:	f0 01       	movw	r30, r0
 720:	99 9e       	mul	r9, r25
 722:	f0 0d       	add	r31, r0
 724:	11 24       	eor	r1, r1
 726:	ee 0d       	add	r30, r14
 728:	ff 1d       	adc	r31, r15
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	30 e2       	ldi	r19, 0x20	; 32
 72e:	20 83       	st	Z, r18
 730:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 732:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 734:	2b e4       	ldi	r18, 0x4B	; 75
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	22 87       	std	Z+10, r18	; 0x0a
 73a:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 73c:	45 e5       	ldi	r20, 0x55	; 85
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	46 87       	std	Z+14, r20	; 0x0e
 742:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 744:	24 87       	std	Z+12, r18	; 0x0c
 746:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 748:	42 83       	std	Z+2, r20	; 0x02
 74a:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 74c:	0c e8       	ldi	r16, 0x8C	; 140
 74e:	10 e0       	ldi	r17, 0x00	; 0
 750:	01 8b       	std	Z+17, r16	; 0x11
 752:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 754:	ab e9       	ldi	r26, 0x9B	; 155
 756:	b0 e0       	ldi	r27, 0x00	; 0
 758:	a3 8b       	std	Z+19, r26	; 0x13
 75a:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 75c:	16 82       	std	Z+6, r1	; 0x06
 75e:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 760:	10 86       	std	Z+8, r1	; 0x08
 762:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 764:	0f 2e       	mov	r0, r31
 766:	f2 e3       	ldi	r31, 0x32	; 50
 768:	4f 2e       	mov	r4, r31
 76a:	51 2c       	mov	r5, r1
 76c:	f0 2d       	mov	r31, r0
 76e:	44 82       	std	Z+4, r4	; 0x04
 770:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 772:	0f 2e       	mov	r0, r31
 774:	f4 eb       	ldi	r31, 0xB4	; 180
 776:	af 2e       	mov	r10, r31
 778:	b1 2c       	mov	r11, r1
 77a:	f0 2d       	mov	r31, r0
 77c:	a5 8a       	std	Z+21, r10	; 0x15
 77e:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;	
 780:	6c 01       	movw	r12, r24
 782:	6f ef       	ldi	r22, 0xFF	; 255
 784:	c6 1a       	sub	r12, r22
 786:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 788:	0f 2e       	mov	r0, r31
 78a:	fd e0       	ldi	r31, 0x0D	; 13
 78c:	6f 2e       	mov	r6, r31
 78e:	f0 e2       	ldi	r31, 0x20	; 32
 790:	7f 2e       	mov	r7, r31
 792:	f0 2d       	mov	r31, r0
 794:	67 8a       	std	Z+23, r6	; 0x17
 796:	70 8e       	std	Z+24, r7	; 0x18
	userQueue[numConfig].cleanOn = true;
 798:	9c 9c       	mul	r9, r12
 79a:	f0 01       	movw	r30, r0
 79c:	9d 9c       	mul	r9, r13
 79e:	f0 0d       	add	r31, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	ee 0d       	add	r30, r14
 7a4:	ff 1d       	adc	r31, r15
 7a6:	ff 24       	eor	r15, r15
 7a8:	f3 94       	inc	r15
 7aa:	f0 8a       	std	Z+16, r15	; 0x10
	userQueue[numConfig].bass = 85;
 7ac:	42 87       	std	Z+10, r20	; 0x0a
 7ae:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 7b0:	26 87       	std	Z+14, r18	; 0x0e
 7b2:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 7b4:	24 87       	std	Z+12, r18	; 0x0c
 7b6:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 7b8:	29 e1       	ldi	r18, 0x19	; 25
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	22 83       	std	Z+2, r18	; 0x02
 7be:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 7c0:	01 8b       	std	Z+17, r16	; 0x11
 7c2:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 7c4:	a3 8b       	std	Z+19, r26	; 0x13
 7c6:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 7c8:	16 82       	std	Z+6, r1	; 0x06
 7ca:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 7cc:	10 86       	std	Z+8, r1	; 0x08
 7ce:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 7d0:	44 82       	std	Z+4, r4	; 0x04
 7d2:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 7d4:	a5 8a       	std	Z+21, r10	; 0x15
 7d6:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;
 7d8:	02 96       	adiw	r24, 0x02	; 2
 7da:	80 93 1c 20 	sts	0x201C, r24
 7de:	90 93 1d 20 	sts	0x201D, r25
	
	init();
 7e2:	0e 94 21 01 	call	0x242	; 0x242 <_Z4initv>
	initUSART();
 7e6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z9initUSARTv>
	initLCD();
 7ea:	0e 94 a8 01 	call	0x350	; 0x350 <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 7ee:	e0 e2       	ldi	r30, 0x20	; 32
 7f0:	f6 e0       	ldi	r31, 0x06	; 6
 7f2:	80 e1       	ldi	r24, 0x10	; 16
 7f4:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	85 83       	std	Z+5, r24	; 0x05
	
	while (1)
	{
		short int colorBG = BLUE;
		short int colorLN = RED;
		fillLCD(colorBG);
 7fa:	8f e1       	ldi	r24, 0x1F	; 31
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z7fillLCDs>
		xmitVLine(0, 0, 240, colorLN);
 802:	20 e0       	ldi	r18, 0x00	; 0
 804:	38 ef       	ldi	r19, 0xF8	; 248
 806:	40 ef       	ldi	r20, 0xF0	; 240
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 2b 03 	call	0x656	; 0x656 <_Z9xmitVLinessss>
		xmitVLine(63, 0, 240, colorLN);
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	38 ef       	ldi	r19, 0xF8	; 248
 81a:	40 ef       	ldi	r20, 0xF0	; 240
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	8f e3       	ldi	r24, 0x3F	; 63
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 2b 03 	call	0x656	; 0x656 <_Z9xmitVLinessss>
		xmitVLine(127, 0, 240, colorLN);
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	38 ef       	ldi	r19, 0xF8	; 248
 82e:	40 ef       	ldi	r20, 0xF0	; 240
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	8f e7       	ldi	r24, 0x7F	; 127
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 2b 03 	call	0x656	; 0x656 <_Z9xmitVLinessss>
		xmitVLine(191, 0, 240, colorLN);
 83e:	20 e0       	ldi	r18, 0x00	; 0
 840:	38 ef       	ldi	r19, 0xF8	; 248
 842:	40 ef       	ldi	r20, 0xF0	; 240
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	8f eb       	ldi	r24, 0xBF	; 191
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 2b 03 	call	0x656	; 0x656 <_Z9xmitVLinessss>
		xmitVLine(255, 0, 240, colorLN);
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	38 ef       	ldi	r19, 0xF8	; 248
 856:	40 ef       	ldi	r20, 0xF0	; 240
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 2b 03 	call	0x656	; 0x656 <_Z9xmitVLinessss>
		xmitVLine(319, 0, 240, colorLN);
 866:	20 e0       	ldi	r18, 0x00	; 0
 868:	38 ef       	ldi	r19, 0xF8	; 248
 86a:	40 ef       	ldi	r20, 0xF0	; 240
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	8f e3       	ldi	r24, 0x3F	; 63
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	0e 94 2b 03 	call	0x656	; 0x656 <_Z9xmitVLinessss>
		xmitHLine(0, 0, 320, colorLN);
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	38 ef       	ldi	r19, 0xF8	; 248
 87e:	40 e4       	ldi	r20, 0x40	; 64
 880:	51 e0       	ldi	r21, 0x01	; 1
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 87 02 	call	0x50e	; 0x50e <_Z9xmitHLinessss>
		xmitHLine(0, 119, 320, colorLN);
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	38 ef       	ldi	r19, 0xF8	; 248
 892:	40 e4       	ldi	r20, 0x40	; 64
 894:	51 e0       	ldi	r21, 0x01	; 1
 896:	67 e7       	ldi	r22, 0x77	; 119
 898:	70 e0       	ldi	r23, 0x00	; 0
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 87 02 	call	0x50e	; 0x50e <_Z9xmitHLinessss>
		xmitHLine(0, 239, 320, colorLN);
 8a2:	20 e0       	ldi	r18, 0x00	; 0
 8a4:	38 ef       	ldi	r19, 0xF8	; 248
 8a6:	40 e4       	ldi	r20, 0x40	; 64
 8a8:	51 e0       	ldi	r21, 0x01	; 1
 8aa:	6f ee       	ldi	r22, 0xEF	; 239
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 87 02 	call	0x50e	; 0x50e <_Z9xmitHLinessss>
		//xmitPlaid();
		while(1);
	}
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <main+0x1c2>

000008b8 <_exit>:
 8b8:	f8 94       	cli

000008ba <__stop_program>:
 8ba:	ff cf       	rjmp	.-2      	; 0x8ba <__stop_program>
