
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00802000  0000064e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080201c  0080201c  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012df  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002db  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000709  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000397  00000000  00000000  00002929  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ee e4       	ldi	r30, 0x4E	; 78
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ac 31       	cpi	r26, 0x1C	; 28
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	ac e1       	ldi	r26, 0x1C	; 28
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 31       	cpi	r26, 0x1E	; 30
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 9c 02 	call	0x538	; 0x538 <main>
 23a:	0c 94 25 03 	jmp	0x64a	; 0x64a <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_Z4initv>:
	}
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 248:	e0 e5       	ldi	r30, 0x50	; 80
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	81 ff       	sbrs	r24, 1
 250:	fd cf       	rjmp	.-6      	; 0x24c <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	88 ef       	ldi	r24, 0xF8	; 248
 268:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 270:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 272:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 274:	14 96       	adiw	r26, 0x04	; 4
 276:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 278:	e0 e2       	ldi	r30, 0x20	; 32
 27a:	f6 e0       	ldi	r31, 0x06	; 6
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 280:	a0 e4       	ldi	r26, 0x40	; 64
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	1c 92       	st	X, r1
 28a:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 290:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 292:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 294:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 296:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 298:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 29a:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 29c:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2a0:	9b eb       	ldi	r25, 0xBB	; 187
 2a2:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2a6:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2b0:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z4initv+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z4initv+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f9 e0       	ldi	r31, 0x09	; 9
 2ca:	2c e0       	ldi	r18, 0x0C	; 12
 2cc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2d2:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2e2:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 2e4:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2e6:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 2e8:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	fa e0       	ldi	r31, 0x0A	; 10
 2ee:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f0:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 2f2:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2f4:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 2fa:	e0 eb       	ldi	r30, 0xB0	; 176
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 300:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 302:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 304:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 306:	35 83       	std	Z+5, r19	; 0x05
 308:	08 95       	ret

0000030a <_Z8xmitDATAh>:
	//xmitDATA(0x1F); // Blue
}

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 30a:	e0 e2       	ldi	r30, 0x20	; 32
 30c:	f6 e0       	ldi	r31, 0x06	; 6
 30e:	90 e2       	ldi	r25, 0x20	; 32
 310:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 312:	80 93 a4 06 	sts	0x06A4, r24
	PORTB.OUTCLR = 0b01000000; // WR goes low
 316:	80 e4       	ldi	r24, 0x40	; 64
 318:	86 83       	std	Z+6, r24	; 0x06
	PORTB.OUTSET = 0b01000000; // WR goes high
 31a:	85 83       	std	Z+5, r24	; 0x05
 31c:	08 95       	ret

0000031e <_Z9xmitPlaidv>:
	PORTB.OUTCLR = 0b01000000; // WR goes low
	PORTB.OUTSET = 0b01000000; // WR goes high
}

void xmitPlaid(void) 
{
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	d0 e0       	ldi	r29, 0x00	; 0
 324:	0c c0       	rjmp	.+24     	; 0x33e <_Z9xmitPlaidv+0x20>
	for(int i=0; i<20; i++) 
		for(int j=0; j<240; j++) {
			xmitDATA(4*i); //
 326:	8d 2f       	mov	r24, r29
 328:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
			xmitDATA(j); // Blue?
 32c:	8c 2f       	mov	r24, r28
 32e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
 332:	cf 5f       	subi	r28, 0xFF	; 255
}

void xmitPlaid(void) 
{
	for(int i=0; i<20; i++) 
		for(int j=0; j<240; j++) {
 334:	c0 3f       	cpi	r28, 0xF0	; 240
 336:	b9 f7       	brne	.-18     	; 0x326 <_Z9xmitPlaidv+0x8>
 338:	dc 5f       	subi	r29, 0xFC	; 252
	PORTB.OUTSET = 0b01000000; // WR goes high
}

void xmitPlaid(void) 
{
	for(int i=0; i<20; i++) 
 33a:	d0 35       	cpi	r29, 0x50	; 80
 33c:	11 f0       	breq	.+4      	; 0x342 <_Z9xmitPlaidv+0x24>
	PORTB.OUTCLR = 0b01000000; // WR goes low
	PORTB.OUTSET = 0b01000000; // WR goes high
}

void xmitPlaid(void) 
{
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	f2 cf       	rjmp	.-28     	; 0x326 <_Z9xmitPlaidv+0x8>
	for(int i=0; i<20; i++) 
		for(int j=0; j<240; j++) {
			xmitDATA(4*i); //
			xmitDATA(j); // Blue?
		}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <_Z8lcdDelayh>:
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 348:	88 23       	and	r24, r24
 34a:	29 f0       	breq	.+10     	; 0x356 <_Z8lcdDelayh+0xe>
 34c:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 34e:	00 00       	nop
		}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 350:	9f 5f       	subi	r25, 0xFF	; 255
 352:	98 13       	cpse	r25, r24
 354:	fc cf       	rjmp	.-8      	; 0x34e <_Z8lcdDelayh+0x6>
 356:	08 95       	ret

00000358 <_Z7xmitCMDh>:
	PORTB.OUTCLR = 0b01000000; // WR goes low
	PORTB.OUTSET = 0b01000000; // WR goes high
}

void xmitCMD(unsigned char cmdByte)
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 35c:	c0 e2       	ldi	r28, 0x20	; 32
 35e:	d6 e0       	ldi	r29, 0x06	; 6
 360:	90 e2       	ldi	r25, 0x20	; 32
 362:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 364:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	0e 94 a4 01 	call	0x348	; 0x348 <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 36e:	80 e4       	ldi	r24, 0x40	; 64
 370:	8e 83       	std	Y+6, r24	; 0x06
	PORTB.OUTSET = 0b01000000; // WR goes high
 372:	8d 83       	std	Y+5, r24	; 0x05
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 37a:	88 e2       	ldi	r24, 0x28	; 40
 37c:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 380:	81 e1       	ldi	r24, 0x11	; 17
 382:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 386:	86 e3       	ldi	r24, 0x36	; 54
 388:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 392:	8a e3       	ldi	r24, 0x3A	; 58
 394:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 398:	85 e5       	ldi	r24, 0x55	; 85
 39a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 39e:	82 eb       	ldi	r24, 0xB2	; 178
 3a0:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 3a4:	8c e0       	ldi	r24, 0x0C	; 12
 3a6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 3b6:	83 e3       	ldi	r24, 0x33	; 51
 3b8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x33); //
 3bc:	83 e3       	ldi	r24, 0x33	; 51
 3be:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 3c2:	87 eb       	ldi	r24, 0xB7	; 183
 3c4:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x35); //
 3c8:	85 e3       	ldi	r24, 0x35	; 53
 3ca:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 3ce:	8b eb       	ldi	r24, 0xBB	; 187
 3d0:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 3d4:	8b e2       	ldi	r24, 0x2B	; 43
 3d6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 3da:	80 ec       	ldi	r24, 0xC0	; 192
 3dc:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 3e0:	8c e2       	ldi	r24, 0x2C	; 44
 3e2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 3e6:	82 ec       	ldi	r24, 0xC2	; 194
 3e8:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x01); //
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 3f8:	83 ec       	ldi	r24, 0xC3	; 195
 3fa:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x11); //
 3fe:	81 e1       	ldi	r24, 0x11	; 17
 400:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 404:	84 ec       	ldi	r24, 0xC4	; 196
 406:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x20); //
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 410:	86 ec       	ldi	r24, 0xC6	; 198
 412:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 416:	8f e0       	ldi	r24, 0x0F	; 15
 418:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 41c:	80 ed       	ldi	r24, 0xD0	; 208
 41e:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 422:	84 ea       	ldi	r24, 0xA4	; 164
 424:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 428:	81 ea       	ldi	r24, 0xA1	; 161
 42a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 42e:	80 ee       	ldi	r24, 0xE0	; 224
 430:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 434:	80 ed       	ldi	r24, 0xD0	; 208
 436:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 446:	8e e0       	ldi	r24, 0x0E	; 14
 448:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 44c:	85 e1       	ldi	r24, 0x15	; 21
 44e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 452:	8d e0       	ldi	r24, 0x0D	; 13
 454:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x37); //
 458:	87 e3       	ldi	r24, 0x37	; 55
 45a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x43); //
 45e:	83 e4       	ldi	r24, 0x43	; 67
 460:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x47); //
 464:	87 e4       	ldi	r24, 0x47	; 71
 466:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x09); //
 46a:	89 e0       	ldi	r24, 0x09	; 9
 46c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x15); //
 470:	85 e1       	ldi	r24, 0x15	; 21
 472:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x12); //
 476:	82 e1       	ldi	r24, 0x12	; 18
 478:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 47c:	86 e1       	ldi	r24, 0x16	; 22
 47e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 482:	89 e1       	ldi	r24, 0x19	; 25
 484:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 488:	81 ee       	ldi	r24, 0xE1	; 225
 48a:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 48e:	80 ed       	ldi	r24, 0xD0	; 208
 490:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x05); //
 49a:	85 e0       	ldi	r24, 0x05	; 5
 49c:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 4a0:	8d e0       	ldi	r24, 0x0D	; 13
 4a2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 4a6:	8c e0       	ldi	r24, 0x0C	; 12
 4a8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x06); //
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 4b2:	8d e2       	ldi	r24, 0x2D	; 45
 4b4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x44); //
 4b8:	84 e4       	ldi	r24, 0x44	; 68
 4ba:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x40); //
 4be:	80 e4       	ldi	r24, 0x40	; 64
 4c0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 4c4:	8e e0       	ldi	r24, 0x0E	; 14
 4c6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 4ca:	8c e1       	ldi	r24, 0x1C	; 28
 4cc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x18); //
 4d0:	88 e1       	ldi	r24, 0x18	; 24
 4d2:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x16); //
 4d6:	86 e1       	ldi	r24, 0x16	; 22
 4d8:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x19); //
 4dc:	89 e1       	ldi	r24, 0x19	; 25
 4de:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 4e2:	8a e2       	ldi	r24, 0x2A	; 42
 4e4:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 4fa:	8f ee       	ldi	r24, 0xEF	; 239
 4fc:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 500:	8b e2       	ldi	r24, 0x2B	; 43
 502:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x01); //
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 518:	8f e3       	ldi	r24, 0x3F	; 63
 51a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 51e:	89 e2       	ldi	r24, 0x29	; 41
 520:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
 524:	2f ef       	ldi	r18, 0xFF	; 255
 526:	81 ee       	ldi	r24, 0xE1	; 225
 528:	94 e0       	ldi	r25, 0x04	; 4
 52a:	21 50       	subi	r18, 0x01	; 1
 52c:	80 40       	sbci	r24, 0x00	; 0
 52e:	90 40       	sbci	r25, 0x00	; 0
 530:	e1 f7       	brne	.-8      	; 0x52a <_Z7initLCDv+0x1b0>
 532:	00 c0       	rjmp	.+0      	; 0x534 <_Z7initLCDv+0x1ba>
 534:	00 00       	nop
 536:	08 95       	ret

00000538 <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 540:	8d b7       	in	r24, 0x3d	; 61
 542:	9e b7       	in	r25, 0x3e	; 62
 544:	86 5e       	subi	r24, 0xE6	; 230
 546:	91 09       	sbc	r25, r1
 548:	8d bf       	out	0x3d, r24	; 61
 54a:	9e bf       	out	0x3e, r25	; 62
 54c:	01 96       	adiw	r24, 0x01	; 1
 54e:	7c 01       	movw	r14, r24
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 550:	80 91 1c 20 	lds	r24, 0x201C
 554:	90 91 1d 20 	lds	r25, 0x201D
 558:	0f 2e       	mov	r0, r31
 55a:	f7 e1       	ldi	r31, 0x17	; 23
 55c:	9f 2e       	mov	r9, r31
 55e:	f0 2d       	mov	r31, r0
 560:	98 9e       	mul	r9, r24
 562:	f0 01       	movw	r30, r0
 564:	99 9e       	mul	r9, r25
 566:	f0 0d       	add	r31, r0
 568:	11 24       	eor	r1, r1
 56a:	ee 0d       	add	r30, r14
 56c:	ff 1d       	adc	r31, r15
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e2       	ldi	r19, 0x20	; 32
 572:	20 83       	st	Z, r18
 574:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 576:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 578:	2b e4       	ldi	r18, 0x4B	; 75
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	22 87       	std	Z+10, r18	; 0x0a
 57e:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 580:	45 e5       	ldi	r20, 0x55	; 85
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	46 87       	std	Z+14, r20	; 0x0e
 586:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 588:	24 87       	std	Z+12, r18	; 0x0c
 58a:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 58c:	42 83       	std	Z+2, r20	; 0x02
 58e:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 590:	0c e8       	ldi	r16, 0x8C	; 140
 592:	10 e0       	ldi	r17, 0x00	; 0
 594:	01 8b       	std	Z+17, r16	; 0x11
 596:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 598:	ab e9       	ldi	r26, 0x9B	; 155
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	a3 8b       	std	Z+19, r26	; 0x13
 59e:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 5a0:	16 82       	std	Z+6, r1	; 0x06
 5a2:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 5a4:	10 86       	std	Z+8, r1	; 0x08
 5a6:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 5a8:	0f 2e       	mov	r0, r31
 5aa:	f2 e3       	ldi	r31, 0x32	; 50
 5ac:	4f 2e       	mov	r4, r31
 5ae:	51 2c       	mov	r5, r1
 5b0:	f0 2d       	mov	r31, r0
 5b2:	44 82       	std	Z+4, r4	; 0x04
 5b4:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 5b6:	0f 2e       	mov	r0, r31
 5b8:	f4 eb       	ldi	r31, 0xB4	; 180
 5ba:	af 2e       	mov	r10, r31
 5bc:	b1 2c       	mov	r11, r1
 5be:	f0 2d       	mov	r31, r0
 5c0:	a5 8a       	std	Z+21, r10	; 0x15
 5c2:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;	
 5c4:	6c 01       	movw	r12, r24
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	c6 1a       	sub	r12, r22
 5ca:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 5cc:	0f 2e       	mov	r0, r31
 5ce:	fd e0       	ldi	r31, 0x0D	; 13
 5d0:	6f 2e       	mov	r6, r31
 5d2:	f0 e2       	ldi	r31, 0x20	; 32
 5d4:	7f 2e       	mov	r7, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	67 8a       	std	Z+23, r6	; 0x17
 5da:	70 8e       	std	Z+24, r7	; 0x18
	userQueue[numConfig].cleanOn = true;
 5dc:	9c 9c       	mul	r9, r12
 5de:	f0 01       	movw	r30, r0
 5e0:	9d 9c       	mul	r9, r13
 5e2:	f0 0d       	add	r31, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	ee 0d       	add	r30, r14
 5e8:	ff 1d       	adc	r31, r15
 5ea:	ff 24       	eor	r15, r15
 5ec:	f3 94       	inc	r15
 5ee:	f0 8a       	std	Z+16, r15	; 0x10
	userQueue[numConfig].bass = 85;
 5f0:	42 87       	std	Z+10, r20	; 0x0a
 5f2:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 5f4:	26 87       	std	Z+14, r18	; 0x0e
 5f6:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 5f8:	24 87       	std	Z+12, r18	; 0x0c
 5fa:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 5fc:	29 e1       	ldi	r18, 0x19	; 25
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	22 83       	std	Z+2, r18	; 0x02
 602:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 604:	01 8b       	std	Z+17, r16	; 0x11
 606:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 608:	a3 8b       	std	Z+19, r26	; 0x13
 60a:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 60c:	16 82       	std	Z+6, r1	; 0x06
 60e:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 610:	10 86       	std	Z+8, r1	; 0x08
 612:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 614:	44 82       	std	Z+4, r4	; 0x04
 616:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 618:	a5 8a       	std	Z+21, r10	; 0x15
 61a:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;
 61c:	02 96       	adiw	r24, 0x02	; 2
 61e:	80 93 1c 20 	sts	0x201C, r24
 622:	90 93 1d 20 	sts	0x201D, r25
	
	init();
 626:	0e 94 21 01 	call	0x242	; 0x242 <_Z4initv>
	initUSART();
 62a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z9initUSARTv>
	initLCD();
 62e:	0e 94 bd 01 	call	0x37a	; 0x37a <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 632:	e0 e2       	ldi	r30, 0x20	; 32
 634:	f6 e0       	ldi	r31, 0x06	; 6
 636:	80 e1       	ldi	r24, 0x10	; 16
 638:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	85 83       	std	Z+5, r24	; 0x05
	
	xmitCMD(0x2C); // Start writing pixels
 63e:	8c e2       	ldi	r24, 0x2C	; 44
 640:	0e 94 ac 01 	call	0x358	; 0x358 <_Z7xmitCMDh>
	
	while (1)
	{
		xmitPlaid();
 644:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z9xmitPlaidv>
	}
 648:	fd cf       	rjmp	.-6      	; 0x644 <main+0x10c>

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
