
Mainboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000053c  00802000  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080253c  0080253c  00000e88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c2a  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000330  00000000  00000000  00002bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000439  00000000  00000000  00002eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e8  00000000  00000000  00003560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d42  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	15 e2       	ldi	r17, 0x25	; 37
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 eb       	ldi	r30, 0xB8	; 184
 214:	f8 e0       	ldi	r31, 0x08	; 8
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ac 33       	cpi	r26, 0x3C	; 60
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	25 e2       	ldi	r18, 0x25	; 37
 228:	ac e3       	ldi	r26, 0x3C	; 60
 22a:	b5 e2       	ldi	r27, 0x25	; 37
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	ae 33       	cpi	r26, 0x3E	; 62
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 b8 03 	call	0x770	; 0x770 <main>
 23a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <_Z4initv>:

}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11000000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 248:	e0 e5       	ldi	r30, 0x50	; 80
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	81 81       	ldd	r24, Z+1	; 0x01
 24e:	81 ff       	sbrs	r24, 1
 250:	fd cf       	rjmp	.-6      	; 0x24c <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 252:	88 ed       	ldi	r24, 0xD8	; 216
 254:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 25c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0b11111000; // A0, A1, and A2 are ADC inputs, rest outputs
 262:	a0 e0       	ldi	r26, 0x00	; 0
 264:	b6 e0       	ldi	r27, 0x06	; 6
 266:	88 ef       	ldi	r24, 0xF8	; 248
 268:	8c 93       	st	X, r24
	ADCA.CTRLA = 0x00; // Enable the ADC on PORT A
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f2 e0       	ldi	r31, 0x02	; 2
 26e:	10 82       	st	Z, r1
	ADCA.CTRLB = 0x00; // Disable ADC stuff
 270:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x00; // Disable the AREF pins
 272:	12 82       	std	Z+2, r1	; 0x02
	PORTA.OUT = 0x00;
 274:	14 96       	adiw	r26, 0x04	; 4
 276:	1c 92       	st	X, r1
	
	PORTB.DIR = 0xFF; // All outputs (PB5 = D_C#, PB6 = WR#)
 278:	e0 e2       	ldi	r30, 0x20	; 32
 27a:	f6 e0       	ldi	r31, 0x06	; 6
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	80 83       	st	Z, r24
	ADCB.CTRLA = 0x00; // Disable the ADC on PORT B
 280:	a0 e4       	ldi	r26, 0x40	; 64
 282:	b2 e0       	ldi	r27, 0x02	; 2
 284:	1c 92       	st	X, r1
	ADCB.CTRLB = 0x00; // Disable ADC stuff
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	1c 92       	st	X, r1
 28a:	11 97       	sbiw	r26, 0x01	; 1
	ADCB.REFCTRL = 0x00; // Disable the AREF pins
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	1c 92       	st	X, r1
	PORTB.PIN0CTRL = 0b00000000; // Totem Pole Configuration (BAT_DISC)
 290:	10 8a       	std	Z+16, r1	; 0x10
	PORTB.PIN1CTRL = 0b00000000; // Totem Pole Configuration (CHA_DISC)
 292:	11 8a       	std	Z+17, r1	; 0x11
	PORTB.PIN4CTRL = 0b00000000; // Totem Pole Configuration (CHB_DISC)
 294:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN5CTRL = 0b00000000; // Totem Pole Configuration (LCD D_C#)
 296:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN6CTRL = 0b00000000; // Totem Pole Configuration (LCD WR#)
 298:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.OUT = 0x00;
 29a:	14 82       	std	Z+4, r1	; 0x04

	
	PORTC.DIR = 0x00; // All switch (x8) inputs
 29c:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0b10111011; // All outputs except RXD0 and RXD1
 2a0:	9b eb       	ldi	r25, 0xBB	; 187
 2a2:	90 93 60 06 	sts	0x0660, r25
	PORTE.DIR = 0b10111011; // All outputs except RXE0 and RXE1
 2a6:	90 93 80 06 	sts	0x0680, r25
	PORTF.DIR = 0xFF; // All LCD interface outputs (But reversed bit by bit)
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 83       	st	Z, r24
	PORTF.OUT = 0x00;
 2b0:	14 82       	std	Z+4, r1	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 ea       	ldi	r24, 0xA7	; 167
 2b6:	91 e6       	ldi	r25, 0x61	; 97
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z4initv+0x76>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z4initv+0x80>
 2c2:	00 00       	nop
 2c4:	08 95       	ret

000002c6 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2c6:	e0 ea       	ldi	r30, 0xA0	; 160
 2c8:	f9 e0       	ldi	r31, 0x09	; 9
 2ca:	2c e0       	ldi	r18, 0x0C	; 12
 2cc:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2ce:	90 e4       	ldi	r25, 0x40	; 64
 2d0:	97 83       	std	Z+7, r25	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2d2:	13 82       	std	Z+3, r1	; 0x03
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2d4:	88 e1       	ldi	r24, 0x18	; 24
 2d6:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2d8:	33 e0       	ldi	r19, 0x03	; 3
 2da:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTD1 @ 9600bps
	USARTD1.BAUDCTRLA = 0x0C; // BSEL = 12
 2dc:	e0 eb       	ldi	r30, 0xB0	; 176
 2de:	f9 e0       	ldi	r31, 0x09	; 9
 2e0:	26 83       	std	Z+6, r18	; 0x06
	USARTD1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2e2:	97 83       	std	Z+7, r25	; 0x07
	USARTD1.CTRLA = 0x00; // Interrupts off
 2e4:	13 82       	std	Z+3, r1	; 0x03
	USARTD1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2e6:	84 83       	std	Z+4, r24	; 0x04
	USARTD1.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits	
 2e8:	35 83       	std	Z+5, r19	; 0x05
		
	// Configure SPI interface and speeds etc for USARTE0 @ 9600bps
	USARTE0.BAUDCTRLA = 0x0C; // BSEL = 12
 2ea:	e0 ea       	ldi	r30, 0xA0	; 160
 2ec:	fa e0       	ldi	r31, 0x0A	; 10
 2ee:	26 83       	std	Z+6, r18	; 0x06
	USARTE0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2f0:	97 83       	std	Z+7, r25	; 0x07
	USARTE0.CTRLA = 0x00; // Interrupts off
 2f2:	13 82       	std	Z+3, r1	; 0x03
	USARTE0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2f4:	84 83       	std	Z+4, r24	; 0x04
	USARTE0.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 2f6:	32 e0       	ldi	r19, 0x02	; 2
 2f8:	35 83       	std	Z+5, r19	; 0x05
	
	// Configure SPI interface and speeds etc for USARTE1 @ 9600bps
	USARTE1.BAUDCTRLA = 0x0C; // BSEL = 12
 2fa:	e0 eb       	ldi	r30, 0xB0	; 176
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	26 83       	std	Z+6, r18	; 0x06
	USARTE1.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 300:	97 83       	std	Z+7, r25	; 0x07
	USARTE1.CTRLA = 0x00; // Interrupts off
 302:	13 82       	std	Z+3, r1	; 0x03
	USARTE1.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 304:	84 83       	std	Z+4, r24	; 0x04
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
 306:	35 83       	std	Z+5, r19	; 0x05
 308:	08 95       	ret

0000030a <_Z7getBytei>:
}

char getByte(int chanNum)
{
	char temp = 0x00;
	switch(chanNum)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	91 05       	cpc	r25, r1
 30e:	91 f0       	breq	.+36     	; 0x334 <_Z7getBytei+0x2a>
 310:	1c f4       	brge	.+6      	; 0x318 <_Z7getBytei+0xe>
 312:	89 2b       	or	r24, r25
 314:	39 f0       	breq	.+14     	; 0x324 <_Z7getBytei+0x1a>
 316:	26 c0       	rjmp	.+76     	; 0x364 <_Z7getBytei+0x5a>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	91 05       	cpc	r25, r1
 31c:	99 f0       	breq	.+38     	; 0x344 <_Z7getBytei+0x3a>
 31e:	03 97       	sbiw	r24, 0x03	; 3
 320:	c9 f0       	breq	.+50     	; 0x354 <_Z7getBytei+0x4a>
 322:	20 c0       	rjmp	.+64     	; 0x364 <_Z7getBytei+0x5a>
	{
		case 0:
			while(!(USARTD0_STATUS & USART_RXCIF_bm));
 324:	e1 ea       	ldi	r30, 0xA1	; 161
 326:	f9 e0       	ldi	r31, 0x09	; 9
 328:	80 81       	ld	r24, Z
 32a:	88 23       	and	r24, r24
 32c:	ec f7       	brge	.-6      	; 0x328 <_Z7getBytei+0x1e>
			temp = USARTD0_DATA;
 32e:	80 91 a0 09 	lds	r24, 0x09A0
			break;
 332:	08 95       	ret
		case 1:
			while(!(USARTD1_STATUS & USART_RXCIF_bm));
 334:	e1 eb       	ldi	r30, 0xB1	; 177
 336:	f9 e0       	ldi	r31, 0x09	; 9
 338:	80 81       	ld	r24, Z
 33a:	88 23       	and	r24, r24
 33c:	ec f7       	brge	.-6      	; 0x338 <_Z7getBytei+0x2e>
			temp = USARTD1_DATA;
 33e:	80 91 b0 09 	lds	r24, 0x09B0
			break;
 342:	08 95       	ret
		
		case 2:
			while(!(USARTE0_STATUS & USART_RXCIF_bm));
 344:	e1 ea       	ldi	r30, 0xA1	; 161
 346:	fa e0       	ldi	r31, 0x0A	; 10
 348:	80 81       	ld	r24, Z
 34a:	88 23       	and	r24, r24
 34c:	ec f7       	brge	.-6      	; 0x348 <_Z7getBytei+0x3e>
			temp = USARTE0_DATA;
 34e:	80 91 a0 0a 	lds	r24, 0x0AA0
			break;
 352:	08 95       	ret
		case 3:
			while(!(USARTE1_STATUS & USART_RXCIF_bm));
 354:	e1 eb       	ldi	r30, 0xB1	; 177
 356:	fa e0       	ldi	r31, 0x0A	; 10
 358:	80 81       	ld	r24, Z
 35a:	88 23       	and	r24, r24
 35c:	ec f7       	brge	.-6      	; 0x358 <_Z7getBytei+0x4e>
			temp = USARTE1_DATA;
 35e:	80 91 b0 0a 	lds	r24, 0x0AB0
			break;
 362:	08 95       	ret
	sendChar(*sToSend++, chanNum);
}

char getByte(int chanNum)
{
	char temp = 0x00;
 364:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			break;
	}
	return temp;
}
 366:	08 95       	ret

00000368 <_Z8xmitDATAh>:
}
*/

void xmitDATA(unsigned char dataByte)
{
	PORTB.OUTSET = 0b00100000; // D/C# high for data
 368:	e0 e2       	ldi	r30, 0x20	; 32
 36a:	f6 e0       	ldi	r31, 0x06	; 6
 36c:	90 e2       	ldi	r25, 0x20	; 32
 36e:	95 83       	std	Z+5, r25	; 0x05
	PORTF.OUT = dataByte;
 370:	80 93 a4 06 	sts	0x06A4, r24
	//lcdDelay(1);
	PORTB.OUTCLR = 0b01000000; // WR goes low
 374:	80 e4       	ldi	r24, 0x40	; 64
 376:	86 83       	std	Z+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 378:	85 83       	std	Z+5, r24	; 0x05
 37a:	08 95       	ret

0000037c <_Z12getCharIndexh>:
		xmitDATA(colorL);
	}
}

int getCharIndex(unsigned char c) {
	int c_val = (int)(c);
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
	if (c >= 'A' && c <= 'Z') c_val -= ('A' - 10);
 380:	9f eb       	ldi	r25, 0xBF	; 191
 382:	98 0f       	add	r25, r24
 384:	9a 31       	cpi	r25, 0x1A	; 26
 386:	18 f4       	brcc	.+6      	; 0x38e <_Z12getCharIndexh+0x12>
 388:	27 53       	subi	r18, 0x37	; 55
 38a:	31 09       	sbc	r19, r1
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <_Z12getCharIndexh+0x28>
	else if (c >= '0' && c <= '9') c_val -= '0';
 38e:	90 ed       	ldi	r25, 0xD0	; 208
 390:	98 0f       	add	r25, r24
 392:	9a 30       	cpi	r25, 0x0A	; 10
 394:	18 f4       	brcc	.+6      	; 0x39c <_Z12getCharIndexh+0x20>
 396:	20 53       	subi	r18, 0x30	; 48
 398:	31 09       	sbc	r19, r1
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <_Z12getCharIndexh+0x28>
	else if (c == ' ') c_val = 40;
 39c:	80 32       	cpi	r24, 0x20	; 32
 39e:	11 f4       	brne	.+4      	; 0x3a4 <_Z12getCharIndexh+0x28>
 3a0:	28 e2       	ldi	r18, 0x28	; 40
 3a2:	30 e0       	ldi	r19, 0x00	; 0
	return c_val;
}
 3a4:	c9 01       	movw	r24, r18
 3a6:	08 95       	ret

000003a8 <_Z8lcdDelayh>:
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 3a8:	88 23       	and	r24, r24
 3aa:	29 f0       	breq	.+10     	; 0x3b6 <_Z8lcdDelayh+0xe>
 3ac:	90 e0       	ldi	r25, 0x00	; 0
		asm("NOP");
 3ae:	00 00       	nop
	}
}
 
void lcdDelay(unsigned char lcdDel)
{
	for(unsigned char i = 0; i < lcdDel; i++)
 3b0:	9f 5f       	subi	r25, 0xFF	; 255
 3b2:	98 13       	cpse	r25, r24
 3b4:	fc cf       	rjmp	.-8      	; 0x3ae <_Z8lcdDelayh+0x6>
 3b6:	08 95       	ret

000003b8 <_Z7xmitCMDh>:
	PORTB.OUTSET = 0b01000000; // WR goes high
	//lcdDelay(1);
}

void xmitCMD(unsigned char cmdByte)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
	PORTB.OUTCLR = 0b00100000; // D/C# low for command
 3bc:	c0 e2       	ldi	r28, 0x20	; 32
 3be:	d6 e0       	ldi	r29, 0x06	; 6
 3c0:	90 e2       	ldi	r25, 0x20	; 32
 3c2:	9e 83       	std	Y+6, r25	; 0x06
	PORTF.OUT = cmdByte;
 3c4:	80 93 a4 06 	sts	0x06A4, r24
	lcdDelay(10);
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z8lcdDelayh>
	PORTB.OUTCLR = 0b01000000; // WR goes low
 3ce:	80 e4       	ldi	r24, 0x40	; 64
 3d0:	8e 83       	std	Y+6, r24	; 0x06
	//lcdDelay(1);
	PORTB.OUTSET = 0b01000000; // WR goes high
 3d2:	8d 83       	std	Y+5, r24	; 0x05
	//lcdDelay(1);
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <_Z7initLCDv>:
	USARTE1.CTRLC = 0b00000010; // Asynchronous, No parity, 1 stop bit, 7 data bits
}

void initLCD(void)
{
	xmitCMD(0x28); // Turn display off
 3da:	88 e2       	ldi	r24, 0x28	; 40
 3dc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	
	xmitCMD(0x11); // Exit sleep mode	
 3e0:	81 e1       	ldi	r24, 0x11	; 17
 3e2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	
	xmitCMD(0x36); // Memory access control
 3e6:	86 e3       	ldi	r24, 0x36	; 54
 3e8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	//xmitDATA(0x00, 0x80); // Bottom to top, left to right, rest default
	xmitDATA(0x80); // Bottom to top, left to right, rest default
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x3A); // Interface Pixel Format
 3f2:	8a e3       	ldi	r24, 0x3A	; 58
 3f4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x55); // 65K RGB color format, 16 bits per pixel
 3f8:	85 e5       	ldi	r24, 0x55	; 85
 3fa:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	//xmitDATA(0x00, 0x55); // 65K RGB color format, 16 bits per pixel
	//xmitDATA(0x00, 0x66); // 256K RGB color format, 18 bits per pixel
	
	xmitCMD(0xB2); // Porch control
 3fe:	82 eb       	ldi	r24, 0xB2	; 178
 400:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x0C); //
 404:	8c e0       	ldi	r24, 0x0C	; 12
 406:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 40a:	8c e0       	ldi	r24, 0x0C	; 12
 40c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x33); //
 416:	83 e3       	ldi	r24, 0x33	; 51
 418:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x33); //
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xB7); // Gate Control
 422:	87 eb       	ldi	r24, 0xB7	; 183
 424:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x35); //
 428:	85 e3       	ldi	r24, 0x35	; 53
 42a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xBB); // VCOM Control
 42e:	8b eb       	ldi	r24, 0xBB	; 187
 430:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x2B); //
 434:	8b e2       	ldi	r24, 0x2B	; 43
 436:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xC0); // LCM Control
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x2C); //
 440:	8c e2       	ldi	r24, 0x2C	; 44
 442:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xC2); // VDV and VRH Command Enable
 446:	82 ec       	ldi	r24, 0xC2	; 194
 448:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x01); //
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xFF); //
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xC3); // VRH Set
 458:	83 ec       	ldi	r24, 0xC3	; 195
 45a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x11); //
 45e:	81 e1       	ldi	r24, 0x11	; 17
 460:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xC4); // VDV Control
 464:	84 ec       	ldi	r24, 0xC4	; 196
 466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x20); //
 46a:	80 e2       	ldi	r24, 0x20	; 32
 46c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xC6); // Frame rate control in normal mode
 470:	86 ec       	ldi	r24, 0xC6	; 198
 472:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x0F); //
 476:	8f e0       	ldi	r24, 0x0F	; 15
 478:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xD0); // Power Control 1
 47c:	80 ed       	ldi	r24, 0xD0	; 208
 47e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xA4); //
 482:	84 ea       	ldi	r24, 0xA4	; 164
 484:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xA1); //
 488:	81 ea       	ldi	r24, 0xA1	; 161
 48a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0xE0); // Positive Voltage Gamma Control
 48e:	80 ee       	ldi	r24, 0xE0	; 224
 490:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 494:	80 ed       	ldi	r24, 0xD0	; 208
 496:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x05); //
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x15); //
 4ac:	85 e1       	ldi	r24, 0x15	; 21
 4ae:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 4b2:	8d e0       	ldi	r24, 0x0D	; 13
 4b4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x37); //
 4b8:	87 e3       	ldi	r24, 0x37	; 55
 4ba:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x43); //
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x47); //
 4c4:	87 e4       	ldi	r24, 0x47	; 71
 4c6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x09); //
 4ca:	89 e0       	ldi	r24, 0x09	; 9
 4cc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x15); //
 4d0:	85 e1       	ldi	r24, 0x15	; 21
 4d2:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x12); //
 4d6:	82 e1       	ldi	r24, 0x12	; 18
 4d8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x16); //
 4dc:	86 e1       	ldi	r24, 0x16	; 22
 4de:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x19); //
 4e2:	89 e1       	ldi	r24, 0x19	; 25
 4e4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0xE1); // Negative Voltage Gamma Control
 4e8:	81 ee       	ldi	r24, 0xE1	; 225
 4ea:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xD0); //
 4ee:	80 ed       	ldi	r24, 0xD0	; 208
 4f0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x05); //
 4fa:	85 e0       	ldi	r24, 0x05	; 5
 4fc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0D); //
 500:	8d e0       	ldi	r24, 0x0D	; 13
 502:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0C); //
 506:	8c e0       	ldi	r24, 0x0C	; 12
 508:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x06); //
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x2D); //
 512:	8d e2       	ldi	r24, 0x2D	; 45
 514:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x44); //
 518:	84 e4       	ldi	r24, 0x44	; 68
 51a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x40); //
 51e:	80 e4       	ldi	r24, 0x40	; 64
 520:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x0E); //
 524:	8e e0       	ldi	r24, 0x0E	; 14
 526:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x1C); //
 52a:	8c e1       	ldi	r24, 0x1C	; 28
 52c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x18); //
 530:	88 e1       	ldi	r24, 0x18	; 24
 532:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x16); //
 536:	86 e1       	ldi	r24, 0x16	; 22
 538:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x19); //
 53c:	89 e1       	ldi	r24, 0x19	; 25
 53e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 542:	8a e2       	ldi	r24, 0x2A	; 42
 544:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 55a:	8f ee       	ldi	r24, 0xEF	; 239
 55c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // Y Address Set
 560:	8b e2       	ldi	r24, 0x2B	; 43
 562:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x01); //
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 578:	8f e3       	ldi	r24, 0x3F	; 63
 57a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0x29); // Turn display on
 57e:	89 e2       	ldi	r24, 0x29	; 41
 580:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	81 ee       	ldi	r24, 0xE1	; 225
 588:	94 e0       	ldi	r25, 0x04	; 4
 58a:	21 50       	subi	r18, 0x01	; 1
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	90 40       	sbci	r25, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <_Z7initLCDv+0x1b0>
 592:	00 c0       	rjmp	.+0      	; 0x594 <_Z7initLCDv+0x1ba>
 594:	00 00       	nop
 596:	08 95       	ret

00000598 <_Z7fillLCDs>:
			
	}
}

void fillLCD(short int color)
{
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
	unsigned char colorH = (unsigned char)(color >> 8);
 5a8:	09 2f       	mov	r16, r25
	unsigned char colorL = (unsigned char)(color & 0x00FF);
 5aa:	18 2f       	mov	r17, r24
	
	xmitCMD(0x36); // Memory access control
 5ac:	86 e3       	ldi	r24, 0x36	; 54
 5ae:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x80); // Bottom to top, left to right, row/column exhange rest default
 5b2:	80 e8       	ldi	r24, 0x80	; 128
 5b4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>

	xmitCMD(0x2A); // X Address Set
 5b8:	8a e2       	ldi	r24, 0x2A	; 42
 5ba:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0xEF); // Finish 239
 5d0:	8f ee       	ldi	r24, 0xEF	; 239
 5d2:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		
	xmitCMD(0x2B); // Y Address Set
 5d6:	8b e2       	ldi	r24, 0x2B	; 43
 5d8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); // Start 0
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x01); //
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x3F); // Finish 319
 5ee:	8f e3       	ldi	r24, 0x3F	; 63
 5f0:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		
	xmitCMD(0x2C); // Start writing pixels	
 5f4:	8c e2       	ldi	r24, 0x2C	; 44
 5f6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
 5fa:	68 94       	set
 5fc:	ee 24       	eor	r14, r14
 5fe:	e6 f8       	bld	r14, 6
 600:	ff 24       	eor	r15, r15
 602:	f3 94       	inc	r15
			
	}
}

void fillLCD(short int color)
{
 604:	0f 2e       	mov	r0, r31
 606:	f0 ef       	ldi	r31, 0xF0	; 240
 608:	cf 2e       	mov	r12, r31
 60a:	f0 2d       	mov	r31, r0
 60c:	d1 2c       	mov	r13, r1
 60e:	0c c0       	rjmp	.+24     	; 0x628 <_Z7fillLCDs+0x90>
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
	for(int j=0; j<240; j++) {
		xmitDATA(colorH);
 610:	80 2f       	mov	r24, r16
 612:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
		xmitDATA(colorL);
 616:	81 2f       	mov	r24, r17
 618:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
 61c:	21 97       	sbiw	r28, 0x01	; 1
	xmitDATA(0x01); //
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
	for(int j=0; j<240; j++) {
 61e:	c1 f7       	brne	.-16     	; 0x610 <_Z7fillLCDs+0x78>
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	e8 1a       	sub	r14, r24
 624:	f1 08       	sbc	r15, r1
	xmitDATA(0x00); // Start 0
	xmitDATA(0x01); //
	xmitDATA(0x3F); // Finish 319
		
	xmitCMD(0x2C); // Start writing pixels	
	for(int i=0; i<320; i++)
 626:	19 f0       	breq	.+6      	; 0x62e <_Z7fillLCDs+0x96>
			
	}
}

void fillLCD(short int color)
{
 628:	cc 2d       	mov	r28, r12
 62a:	dd 2d       	mov	r29, r13
 62c:	f1 cf       	rjmp	.-30     	; 0x610 <_Z7fillLCDs+0x78>
	for(int j=0; j<240; j++) {
		xmitDATA(colorH);
		xmitDATA(colorL);
	}
	
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	ff 90       	pop	r15
 638:	ef 90       	pop	r14
 63a:	df 90       	pop	r13
 63c:	cf 90       	pop	r12
 63e:	08 95       	ret

00000640 <_Z8drawCharhssss>:
	else if (c == ' ') c_val = 40;
	return c_val;
}

void drawChar(unsigned char c, short int xStart, short int yStart, short int text_color, short int bg_color)
{
 640:	8f 92       	push	r8
 642:	9f 92       	push	r9
 644:	af 92       	push	r10
 646:	bf 92       	push	r11
 648:	cf 92       	push	r12
 64a:	df 92       	push	r13
 64c:	ef 92       	push	r14
 64e:	ff 92       	push	r15
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	a0 97       	sbiw	r28, 0x20	; 32
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	de bf       	out	0x3e, r29	; 62
 662:	c8 2e       	mov	r12, r24
 664:	7b 01       	movw	r14, r22
 666:	d4 2e       	mov	r13, r20
	unsigned char tcolorH = (unsigned char)(text_color >> 8);
 668:	b3 2e       	mov	r11, r19
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
 66a:	a2 2e       	mov	r10, r18
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
 66c:	91 2e       	mov	r9, r17
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
 66e:	80 2e       	mov	r8, r16
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
	unsigned char xEndL = (unsigned char)((xStart + 15) & 0x00FF);
	unsigned char yStartL = (unsigned char)yStart;
	unsigned char yEnd = (unsigned char)(yStart + 15);	
	
	xmitCMD(0x36); // Memory access control
 670:	86 e3       	ldi	r24, 0x36	; 54
 672:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0xA0); // Bottom to top, left to right, rest default
 676:	80 ea       	ldi	r24, 0xA0	; 160
 678:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	//xmitCMD(0x36); // Memory access control
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
 67c:	8a e2       	ldi	r24, 0x2A	; 42
 67e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(xStartH); //
 682:	8f 2d       	mov	r24, r15
 684:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xStartL); // Start 0
 688:	8e 2d       	mov	r24, r14
 68a:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	unsigned char tcolorL = (unsigned char)(text_color & 0x00FF);
	unsigned char bgcolorH = (unsigned char)(bg_color >> 8);
	unsigned char bgcolorL = (unsigned char)(bg_color & 0x00FF);
	unsigned char xStartH = (unsigned char)(xStart >> 8);
	unsigned char xStartL = (unsigned char)(xStart & 0x00FF);
	unsigned char xEndH = (unsigned char)((xStart + 15) >> 8);
 68e:	c7 01       	movw	r24, r14
 690:	0f 96       	adiw	r24, 0x0f	; 15
	//xmitDATA(0xA0); // Bottom to top, left to right, rest default
	
	xmitCMD(0x2A); // X Address Set
	xmitDATA(xStartH); //
	xmitDATA(xStartL); // Start 0
	xmitDATA(xEndH); //
 692:	89 2f       	mov	r24, r25
 694:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(xEndL); // Finish 319
 698:	8f e0       	ldi	r24, 0x0F	; 15
 69a:	8e 0d       	add	r24, r14
 69c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	xmitCMD(0x2B); // /y Address Set
 6a0:	8b e2       	ldi	r24, 0x2B	; 43
 6a2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
	xmitDATA(0x00); //
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yStartL); // Start 0
 6ac:	8d 2d       	mov	r24, r13
 6ae:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(0x00); //
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	xmitDATA(yEnd); // Finish 239
 6b8:	8f e0       	ldi	r24, 0x0F	; 15
 6ba:	8d 0d       	add	r24, r13
 6bc:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
	
	int c_index = getCharIndex(c);
 6c0:	8c 2d       	mov	r24, r12
 6c2:	0e 94 be 01 	call	0x37c	; 0x37c <_Z12getCharIndexh>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	82 95       	swap	r24
 6cc:	92 95       	swap	r25
 6ce:	90 7f       	andi	r25, 0xF0	; 240
 6d0:	98 27       	eor	r25, r24
 6d2:	80 7f       	andi	r24, 0xF0	; 240
 6d4:	98 27       	eor	r25, r24
 6d6:	fc 01       	movw	r30, r24
 6d8:	e0 50       	subi	r30, 0x00	; 0
 6da:	f0 4e       	sbci	r31, 0xE0	; 224
 6dc:	9e 01       	movw	r18, r28
 6de:	2f 5f       	subi	r18, 0xFF	; 255
 6e0:	3f 4f       	sbci	r19, 0xFF	; 255
 6e2:	79 01       	movw	r14, r18
 6e4:	80 5e       	subi	r24, 0xE0	; 224
 6e6:	9f 4d       	sbci	r25, 0xDF	; 223
 6e8:	d9 01       	movw	r26, r18
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
 6ea:	21 91       	ld	r18, Z+
 6ec:	31 91       	ld	r19, Z+
 6ee:	2d 93       	st	X+, r18
 6f0:	3d 93       	st	X+, r19
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
	short int chr[16];
	for(int i=0; i<16; i++)
 6f2:	e8 17       	cp	r30, r24
 6f4:	f9 07       	cpc	r31, r25
 6f6:	c9 f7       	brne	.-14     	; 0x6ea <_Z8drawCharhssss+0xaa>
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
 6f8:	8c e2       	ldi	r24, 0x2C	; 44
 6fa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_Z7xmitCMDh>
 6fe:	6e 01       	movw	r12, r28
 700:	31 e2       	ldi	r19, 0x21	; 33
 702:	c3 0e       	add	r12, r19
 704:	d1 1c       	adc	r13, r1
 706:	21 c0       	rjmp	.+66     	; 0x74a <_Z8drawCharhssss+0x10a>
	for(int i=0; i<16; i++) {
		for(int j=0; j<16; j++) {
			
			if(chr[i] & (1<<(15-j))){
 708:	f7 01       	movw	r30, r14
 70a:	40 81       	ld	r20, Z
 70c:	51 81       	ldd	r21, Z+1	; 0x01
 70e:	00 2e       	mov	r0, r16
 710:	02 c0       	rjmp	.+4      	; 0x716 <_Z8drawCharhssss+0xd6>
 712:	55 95       	asr	r21
 714:	47 95       	ror	r20
 716:	0a 94       	dec	r0
 718:	e2 f7       	brpl	.-8      	; 0x712 <_Z8drawCharhssss+0xd2>
 71a:	40 ff       	sbrs	r20, 0
 71c:	07 c0       	rjmp	.+14     	; 0x72c <_Z8drawCharhssss+0xec>
				xmitDATA(tcolorH);
 71e:	8b 2d       	mov	r24, r11
 720:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
				xmitDATA(tcolorL);
 724:	8a 2d       	mov	r24, r10
 726:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
 72a:	06 c0       	rjmp	.+12     	; 0x738 <_Z8drawCharhssss+0xf8>
			}
			else{
				xmitDATA(bgcolorH);
 72c:	89 2d       	mov	r24, r9
 72e:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
				xmitDATA(bgcolorL);
 732:	88 2d       	mov	r24, r8
 734:	0e 94 b4 01 	call	0x368	; 0x368 <_Z8xmitDATAh>
 738:	01 50       	subi	r16, 0x01	; 1
 73a:	11 09       	sbc	r17, r1
 73c:	28 f7       	brcc	.-54     	; 0x708 <_Z8drawCharhssss+0xc8>
 73e:	22 e0       	ldi	r18, 0x02	; 2
 740:	e2 0e       	add	r14, r18
 742:	f1 1c       	adc	r15, r1
	short int chr[16];
	for(int i=0; i<16; i++)
		chr[i] = font[c_index][i];
	
	xmitCMD(0x2C); // Start writing pixels
	for(int i=0; i<16; i++) {
 744:	ec 14       	cp	r14, r12
 746:	fd 04       	cpc	r15, r13
 748:	19 f0       	breq	.+6      	; 0x750 <_Z8drawCharhssss+0x110>
	xmitDATA(0x00); //
	xmitDATA(yStartL); // Start 0
	xmitDATA(0x00); //
	xmitDATA(yEnd); // Finish 239
	
	int c_index = getCharIndex(c);
 74a:	0f e0       	ldi	r16, 0x0F	; 15
 74c:	10 e0       	ldi	r17, 0x00	; 0
 74e:	dc cf       	rjmp	.-72     	; 0x708 <_Z8drawCharhssss+0xc8>
				xmitDATA(bgcolorL);
			}
			
		}
	}	
}
 750:	a0 96       	adiw	r28, 0x20	; 32
 752:	cd bf       	out	0x3d, r28	; 61
 754:	de bf       	out	0x3e, r29	; 62
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	df 90       	pop	r13
 764:	cf 90       	pop	r12
 766:	bf 90       	pop	r11
 768:	af 90       	pop	r10
 76a:	9f 90       	pop	r9
 76c:	8f 90       	pop	r8
 76e:	08 95       	ret

00000770 <main>:
static int i_max = 175; // Maximum tube heater current
static int v_min = 100; // Minimum tube plate voltage supply
static int v_max = 200; // Maximum tube plate voltage supply

int main(void) 
{
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
	char msg_MB;
	char msg_UI;
	bool MA_ON = false;
	bool MB_ON = false;

	userConfig userQueue[maxConfig];
 778:	8d b7       	in	r24, 0x3d	; 61
 77a:	9e b7       	in	r25, 0x3e	; 62
 77c:	86 5e       	subi	r24, 0xE6	; 230
 77e:	91 09       	sbc	r25, r1
 780:	8d bf       	out	0x3d, r24	; 61
 782:	9e bf       	out	0x3e, r25	; 62
 784:	ed b7       	in	r30, 0x3d	; 61
 786:	fe b7       	in	r31, 0x3e	; 62
 788:	31 96       	adiw	r30, 0x01	; 1
 78a:	7f 01       	movw	r14, r30
	
	userQueue[numConfig].name = "HEAVY DIST 1"; // This is a heavily distorted preset
 78c:	80 91 3c 25 	lds	r24, 0x253C
 790:	90 91 3d 25 	lds	r25, 0x253D
 794:	0f 2e       	mov	r0, r31
 796:	f7 e1       	ldi	r31, 0x17	; 23
 798:	9f 2e       	mov	r9, r31
 79a:	f0 2d       	mov	r31, r0
 79c:	98 9e       	mul	r9, r24
 79e:	f0 01       	movw	r30, r0
 7a0:	99 9e       	mul	r9, r25
 7a2:	f0 0d       	add	r31, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	ee 0d       	add	r30, r14
 7a8:	ff 1d       	adc	r31, r15
 7aa:	20 e2       	ldi	r18, 0x20	; 32
 7ac:	35 e2       	ldi	r19, 0x25	; 37
 7ae:	20 83       	st	Z, r18
 7b0:	31 83       	std	Z+1, r19	; 0x01
	userQueue[numConfig].cleanOn = false;
 7b2:	10 8a       	std	Z+16, r1	; 0x10
	userQueue[numConfig].bass = 75;
 7b4:	2b e4       	ldi	r18, 0x4B	; 75
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	22 87       	std	Z+10, r18	; 0x0a
 7ba:	33 87       	std	Z+11, r19	; 0x0b
	userQueue[numConfig].mids = 85;
 7bc:	45 e5       	ldi	r20, 0x55	; 85
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	46 87       	std	Z+14, r20	; 0x0e
 7c2:	57 87       	std	Z+15, r21	; 0x0f
	userQueue[numConfig].treble = 75;
 7c4:	24 87       	std	Z+12, r18	; 0x0c
 7c6:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 85;
 7c8:	42 83       	std	Z+2, r20	; 0x02
 7ca:	53 83       	std	Z+3, r21	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 7cc:	0c e8       	ldi	r16, 0x8C	; 140
 7ce:	10 e0       	ldi	r17, 0x00	; 0
 7d0:	01 8b       	std	Z+17, r16	; 0x11
 7d2:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 7d4:	ab e9       	ldi	r26, 0x9B	; 155
 7d6:	b0 e0       	ldi	r27, 0x00	; 0
 7d8:	a3 8b       	std	Z+19, r26	; 0x13
 7da:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 7dc:	16 82       	std	Z+6, r1	; 0x06
 7de:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 7e0:	10 86       	std	Z+8, r1	; 0x08
 7e2:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 7e4:	0f 2e       	mov	r0, r31
 7e6:	f2 e3       	ldi	r31, 0x32	; 50
 7e8:	4f 2e       	mov	r4, r31
 7ea:	51 2c       	mov	r5, r1
 7ec:	f0 2d       	mov	r31, r0
 7ee:	44 82       	std	Z+4, r4	; 0x04
 7f0:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 7f2:	0f 2e       	mov	r0, r31
 7f4:	f4 eb       	ldi	r31, 0xB4	; 180
 7f6:	af 2e       	mov	r10, r31
 7f8:	b1 2c       	mov	r11, r1
 7fa:	f0 2d       	mov	r31, r0
 7fc:	a5 8a       	std	Z+21, r10	; 0x15
 7fe:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;	
 800:	6c 01       	movw	r12, r24
 802:	6f ef       	ldi	r22, 0xFF	; 255
 804:	c6 1a       	sub	r12, r22
 806:	d6 0a       	sbc	r13, r22
	
	userQueue[numConfig].name = "CLEAN GROOVE 1"; // This is a bass heavy clean preset
 808:	0f 2e       	mov	r0, r31
 80a:	fd e2       	ldi	r31, 0x2D	; 45
 80c:	6f 2e       	mov	r6, r31
 80e:	f5 e2       	ldi	r31, 0x25	; 37
 810:	7f 2e       	mov	r7, r31
 812:	f0 2d       	mov	r31, r0
 814:	67 8a       	std	Z+23, r6	; 0x17
 816:	70 8e       	std	Z+24, r7	; 0x18
	userQueue[numConfig].cleanOn = true;
 818:	9c 9c       	mul	r9, r12
 81a:	f0 01       	movw	r30, r0
 81c:	9d 9c       	mul	r9, r13
 81e:	f0 0d       	add	r31, r0
 820:	11 24       	eor	r1, r1
 822:	ee 0d       	add	r30, r14
 824:	ff 1d       	adc	r31, r15
 826:	ff 24       	eor	r15, r15
 828:	f3 94       	inc	r15
 82a:	f0 8a       	std	Z+16, r15	; 0x10
	userQueue[numConfig].bass = 85;
 82c:	42 87       	std	Z+10, r20	; 0x0a
 82e:	53 87       	std	Z+11, r21	; 0x0b
	userQueue[numConfig].mids = 75;
 830:	26 87       	std	Z+14, r18	; 0x0e
 832:	37 87       	std	Z+15, r19	; 0x0f
	userQueue[numConfig].treble = 75;
 834:	24 87       	std	Z+12, r18	; 0x0c
 836:	35 87       	std	Z+13, r19	; 0x0d
	userQueue[numConfig].gain = 25;
 838:	29 e1       	ldi	r18, 0x19	; 25
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	22 83       	std	Z+2, r18	; 0x02
 83e:	33 83       	std	Z+3, r19	; 0x03
	userQueue[numConfig].i_ValveA = 140;
 840:	01 8b       	std	Z+17, r16	; 0x11
 842:	12 8b       	std	Z+18, r17	; 0x12
	userQueue[numConfig].i_ValveB = 155; // Buffer tube should be HOT
 844:	a3 8b       	std	Z+19, r26	; 0x13
 846:	b4 8b       	std	Z+20, r27	; 0x14
	userQueue[numConfig].auxVol = 0;
 848:	16 82       	std	Z+6, r1	; 0x06
 84a:	17 82       	std	Z+7, r1	; 0x07
	userQueue[numConfig].hphVol = 0;
 84c:	10 86       	std	Z+8, r1	; 0x08
 84e:	11 86       	std	Z+9, r1	; 0x09
	userQueue[numConfig].volume = 50;
 850:	44 82       	std	Z+4, r4	; 0x04
 852:	55 82       	std	Z+5, r5	; 0x05
	userQueue[numConfig].v_Valve = 180;
 854:	a5 8a       	std	Z+21, r10	; 0x15
 856:	b6 8a       	std	Z+22, r11	; 0x16
	numConfig++;
 858:	02 96       	adiw	r24, 0x02	; 2
 85a:	80 93 3c 25 	sts	0x253C, r24
 85e:	90 93 3d 25 	sts	0x253D, r25
	
	init();
 862:	0e 94 21 01 	call	0x242	; 0x242 <_Z4initv>
	initUSART();
 866:	0e 94 63 01 	call	0x2c6	; 0x2c6 <_Z9initUSARTv>
	initLCD();
 86a:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z7initLCDv>
	
	PORTB.OUTSET = 0b00010000; // Turn on Both Relays
 86e:	e0 e2       	ldi	r30, 0x20	; 32
 870:	f6 e0       	ldi	r31, 0x06	; 6
 872:	80 e1       	ldi	r24, 0x10	; 16
 874:	85 83       	std	Z+5, r24	; 0x05
	PORTB.OUTSET = 0b00000010; // Turn on Both Relays
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	85 83       	std	Z+5, r24	; 0x05
	//xmitCMD(0x2C); // Start writing pixels
	
	unsigned char qPos[11] = {0,0,0,0,0,0,0,0,0,0,0};
	short int char_color = BLACK;
	short int bg_color = WHITE;
	fillLCD(bg_color);
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	9f ef       	ldi	r25, 0xFF	; 255
 87e:	0e 94 cc 02 	call	0x598	; 0x598 <_Z7fillLCDs>
	
	while (1)
	{
		if(USARTE1_STATUS & USART_RXCIF_bm) // If there is unread data from Main CPU...
 882:	0f 2e       	mov	r0, r31
 884:	f1 eb       	ldi	r31, 0xB1	; 177
 886:	ef 2e       	mov	r14, r31
 888:	fa e0       	ldi	r31, 0x0A	; 10
 88a:	ff 2e       	mov	r15, r31
 88c:	f0 2d       	mov	r31, r0
 88e:	f7 01       	movw	r30, r14
 890:	80 81       	ld	r24, Z
 892:	88 23       	and	r24, r24
 894:	e4 f7       	brge	.-8      	; 0x88e <main+0x11e>
		{
			qPos[0] = getByte(3);
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 85 01 	call	0x30a	; 0x30a <_Z7getBytei>
			drawChar(qPos[0], 50, 50, char_color, bg_color);
 89e:	0f ef       	ldi	r16, 0xFF	; 255
 8a0:	1f ef       	ldi	r17, 0xFF	; 255
 8a2:	20 e0       	ldi	r18, 0x00	; 0
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	42 e3       	ldi	r20, 0x32	; 50
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	62 e3       	ldi	r22, 0x32	; 50
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	0e 94 20 03 	call	0x640	; 0x640 <_Z8drawCharhssss>
 8b2:	ed cf       	rjmp	.-38     	; 0x88e <main+0x11e>

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
