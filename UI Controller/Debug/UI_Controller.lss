
UI_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000612  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000224  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000242  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f5  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d7 e2       	ldi	r29, 0x27	; 39
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  bc:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <_Z4initv>:
	}
}

void init(void) 
{
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11010000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
  ca:	e0 e5       	ldi	r30, 0x50	; 80
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	81 ff       	sbrs	r24, 1
  d2:	fd cf       	rjmp	.-6      	; 0xce <_Z4initv+0xa>
    //while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
  d4:	88 ed       	ldi	r24, 0xD8	; 216
  d6:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
  d8:	e0 e4       	ldi	r30, 0x40	; 64
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
  de:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0x00; // All inputs
  e4:	10 92 00 06 	sts	0x0600, r1
	PORTC.DIR = 0x00; // All inputs
  e8:	e0 e4       	ldi	r30, 0x40	; 64
  ea:	f6 e0       	ldi	r31, 0x06	; 6
  ec:	10 82       	st	Z, r1
	PORTD.DIR = 0b00001000; // All inputs except PD3 (SPI TX)
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	80 93 60 06 	sts	0x0660, r24
	
	PORTC.INTMASK = 0b00110000; // Pins 4 & 5 are A8 and B8
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = 0b00000010; // Medium Priority Interrupt
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	81 87       	std	Z+9, r24	; 0x09
	PORTC.PIN4CTRL = 0x00; // Quadrature Input A8, Sense both edges
  fc:	14 8a       	std	Z+20, r1	; 0x14
	PORTC.PIN5CTRL = 0x00; // Quadrature Input B8, Sense both edges
  fe:	15 8a       	std	Z+21, r1	; 0x15
	
	SREG = 0b10000000; // Enable global interrupts
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	87 ea       	ldi	r24, 0xA7	; 167
 108:	91 e6       	ldi	r25, 0x61	; 97
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <_Z4initv+0x46>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_Z4initv+0x50>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <_Z9initUSARTv>:
}

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f9 e0       	ldi	r31, 0x09	; 9
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 124:	12 82       	std	Z+2, r1	; 0x02
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLD = 0b00000000; // Asynchronous, No parity, 1 stop bit, 8 data bits
 12e:	15 82       	std	Z+5, r1	; 0x05
 130:	08 95       	ret

00000132 <_Z8sendCharci>:
}

void sendChar(char cToSend, int chanNum)
{
	switch(chanNum)
 132:	67 2b       	or	r22, r23
 134:	39 f4       	brne	.+14     	; 0x144 <_Z8sendCharci+0x12>
	{
		case 0:
			while(!(USARTD0_STATUS & USART_DREIF_bm));
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f9 e0       	ldi	r31, 0x09	; 9
 13a:	90 81       	ld	r25, Z
 13c:	95 ff       	sbrs	r25, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <_Z8sendCharci+0x8>
			USARTD0_DATA = cToSend;
 140:	80 93 c0 09 	sts	0x09C0, r24
 144:	08 95       	ret

00000146 <main>:
	char temp;
	unsigned char qPos[11] = {0,0,0,0,0,0,0,0,0,0,0};
	bool oldA[11] = {0,0,0,0,0,0,0,0,0,0,0};
	bool oldB[11] = {0,0,0,0,0,0,0,0,0,0,0};
	
	init();
 146:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z4initv>
	initUSART();
 14a:	0e 94 8c 00 	call	0x118	; 0x118 <_Z9initUSARTv>
	
	oldA[0] = (PORTC.IN & 0b00010000);
 14e:	e0 e4       	ldi	r30, 0x40	; 64
 150:	f6 e0       	ldi	r31, 0x06	; 6
 152:	00 85       	ldd	r16, Z+8	; 0x08
 154:	02 95       	swap	r16
 156:	01 70       	andi	r16, 0x01	; 1
	oldB[0] = (PORTC.IN & 0b00100000);
 158:	f0 84       	ldd	r15, Z+8	; 0x08
 15a:	f5 fa       	bst	r15, 5
 15c:	ff 24       	eor	r15, r15
 15e:	f0 f8       	bld	r15, 0

int main(void)
{
	bool x = false;
	char temp;
	unsigned char qPos[11] = {0,0,0,0,0,0,0,0,0,0,0};
 160:	10 e0       	ldi	r17, 0x00	; 0
	oldA[0] = (PORTC.IN & 0b00010000);
	oldB[0] = (PORTC.IN & 0b00100000);
	
	while (1)
	{
		if(PORTC.INTFLAGS != 0 && x == false) {
 162:	c0 e4       	ldi	r28, 0x40	; 64
 164:	d6 e0       	ldi	r29, 0x06	; 6
 166:	9c 85       	ldd	r25, Y+12	; 0x0c
 168:	99 23       	and	r25, r25
 16a:	e9 f3       	breq	.-6      	; 0x166 <main+0x20>
			if((PORTC.INTFLAGS & 0b00010000) != 0) { // A0 has been triggered
 16c:	8c 85       	ldd	r24, Y+12	; 0x0c
 16e:	84 ff       	sbrs	r24, 4
 170:	1c c0       	rjmp	.+56     	; 0x1aa <main+0x64>
				if(oldB[0] && oldA[0]) { // Went from 11 to 10
 172:	ff 20       	and	r15, r15
 174:	51 f0       	breq	.+20     	; 0x18a <main+0x44>
 176:	00 23       	and	r16, r16
 178:	19 f0       	breq	.+6      	; 0x180 <main+0x3a>
					oldA[0] = 0;
					qPos[0]++;
 17a:	1f 5f       	subi	r17, 0xFF	; 255
	while (1)
	{
		if(PORTC.INTFLAGS != 0 && x == false) {
			if((PORTC.INTFLAGS & 0b00010000) != 0) { // A0 has been triggered
				if(oldB[0] && oldA[0]) { // Went from 11 to 10
					oldA[0] = 0;
 17c:	00 e0       	ldi	r16, 0x00	; 0
					qPos[0]++;
 17e:	0c c0       	rjmp	.+24     	; 0x198 <main+0x52>
				}
				else if(oldB[0] && !oldA[0]) { // Went from 10 to 11
 180:	01 11       	cpse	r16, r1
 182:	08 c0       	rjmp	.+16     	; 0x194 <main+0x4e>
					oldA[0] = 1;
					qPos[0]--;
 184:	11 50       	subi	r17, 0x01	; 1
				if(oldB[0] && oldA[0]) { // Went from 11 to 10
					oldA[0] = 0;
					qPos[0]++;
				}
				else if(oldB[0] && !oldA[0]) { // Went from 10 to 11
					oldA[0] = 1;
 186:	01 e0       	ldi	r16, 0x01	; 1
					qPos[0]--;
 188:	07 c0       	rjmp	.+14     	; 0x198 <main+0x52>
				}
				else if(!oldB[0] && oldA[0]) { // Went from 01 to 00
 18a:	00 23       	and	r16, r16
 18c:	19 f0       	breq	.+6      	; 0x194 <main+0x4e>
					oldA[0] = 0;
					qPos[0]--;
 18e:	11 50       	subi	r17, 0x01	; 1
				else if(oldB[0] && !oldA[0]) { // Went from 10 to 11
					oldA[0] = 1;
					qPos[0]--;
				}
				else if(!oldB[0] && oldA[0]) { // Went from 01 to 00
					oldA[0] = 0;
 190:	00 e0       	ldi	r16, 0x00	; 0
					qPos[0]--;
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x52>
				}
				else { // Went from 00 to 01
					oldA[0] = 1;
					qPos[0]++;
 194:	1f 5f       	subi	r17, 0xFF	; 255
				else if(!oldB[0] && oldA[0]) { // Went from 01 to 00
					oldA[0] = 0;
					qPos[0]--;
				}
				else { // Went from 00 to 01
					oldA[0] = 1;
 196:	01 e0       	ldi	r16, 0x01	; 1
					qPos[0]++;
				}
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00010000;	
 198:	8c 85       	ldd	r24, Y+12	; 0x0c
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	8c 87       	std	Y+12, r24	; 0x0c
				sendChar(qPos[0], 0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	81 2f       	mov	r24, r17
 1a4:	0e 94 99 00 	call	0x132	; 0x132 <_Z8sendCharci>
 1a8:	de cf       	rjmp	.-68     	; 0x166 <main+0x20>
			}
			else if((PORTC.INTFLAGS & 0b00100000) != 0) { // B0 has been triggered
 1aa:	8c 85       	ldd	r24, Y+12	; 0x0c
 1ac:	85 ff       	sbrs	r24, 5
 1ae:	db cf       	rjmp	.-74     	; 0x166 <main+0x20>
				
				if(oldB[0] && oldA[0]) { // Went from 11 to 01
 1b0:	ff 20       	and	r15, r15
 1b2:	51 f0       	breq	.+20     	; 0x1c8 <main+0x82>
 1b4:	00 23       	and	r16, r16
 1b6:	19 f0       	breq	.+6      	; 0x1be <main+0x78>
					oldB[0] = 0;
					qPos[0]--;
 1b8:	11 50       	subi	r17, 0x01	; 1
				sendChar(qPos[0], 0);
			}
			else if((PORTC.INTFLAGS & 0b00100000) != 0) { // B0 has been triggered
				
				if(oldB[0] && oldA[0]) { // Went from 11 to 01
					oldB[0] = 0;
 1ba:	f1 2c       	mov	r15, r1
					qPos[0]--;
 1bc:	0e c0       	rjmp	.+28     	; 0x1da <main+0x94>
				}
				else if(oldB[0] && !oldA[0]) { // Went from 10 to 00
 1be:	01 11       	cpse	r16, r1
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <main+0x8e>
					oldB[0] = 0;
					qPos[0]++;
 1c2:	1f 5f       	subi	r17, 0xFF	; 255
				if(oldB[0] && oldA[0]) { // Went from 11 to 01
					oldB[0] = 0;
					qPos[0]--;
				}
				else if(oldB[0] && !oldA[0]) { // Went from 10 to 00
					oldB[0] = 0;
 1c4:	f1 2c       	mov	r15, r1
					qPos[0]++;
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <main+0x94>
				}
				else if(!oldB[0] && oldA[0]) { // Went from 01 to 11
 1c8:	00 23       	and	r16, r16
 1ca:	21 f0       	breq	.+8      	; 0x1d4 <main+0x8e>
					oldB[0] = 1;
					qPos[0]++;
 1cc:	1f 5f       	subi	r17, 0xFF	; 255
				else if(oldB[0] && !oldA[0]) { // Went from 10 to 00
					oldB[0] = 0;
					qPos[0]++;
				}
				else if(!oldB[0] && oldA[0]) { // Went from 01 to 11
					oldB[0] = 1;
 1ce:	ff 24       	eor	r15, r15
 1d0:	f3 94       	inc	r15
					qPos[0]++;
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <main+0x94>
				}
				else { // Went from 00 to 10
					oldB[0] = 1;
					qPos[0]--;
 1d4:	11 50       	subi	r17, 0x01	; 1
				else if(!oldB[0] && oldA[0]) { // Went from 01 to 11
					oldB[0] = 1;
					qPos[0]++;
				}
				else { // Went from 00 to 10
					oldB[0] = 1;
 1d6:	ff 24       	eor	r15, r15
 1d8:	f3 94       	inc	r15
					qPos[0]--;
				}
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00100000;
 1da:	8c 85       	ldd	r24, Y+12	; 0x0c
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	8c 87       	std	Y+12, r24	; 0x0c
				sendChar(qPos[0], 0);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	81 2f       	mov	r24, r17
 1e6:	0e 94 99 00 	call	0x132	; 0x132 <_Z8sendCharci>
 1ea:	bd cf       	rjmp	.-134    	; 0x166 <main+0x20>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
