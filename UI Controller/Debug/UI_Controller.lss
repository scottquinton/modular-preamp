
UI_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00802000  00000852  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00802062  00802062  00000948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086a  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000252  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f9  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ec  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	f8 01       	movw	r30, r16
  ae:	0a 02       	muls	r16, r26
  b0:	1c 02       	muls	r17, r28
  b2:	2e 02       	muls	r18, r30
  b4:	40 02       	muls	r20, r16
  b6:	52 02       	muls	r21, r18
  b8:	64 02       	muls	r22, r20
  ba:	76 02       	muls	r23, r22
  bc:	88 02       	muls	r24, r24
  be:	9a 02       	muls	r25, r26
  c0:	ac 02       	muls	r26, r28

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	d7 e2       	ldi	r29, 0x27	; 39
  cc:	de bf       	out	0x3e, r29	; 62

000000ce <__do_copy_data>:
  ce:	10 e2       	ldi	r17, 0x20	; 32
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	e2 e5       	ldi	r30, 0x52	; 82
  d6:	f8 e0       	ldi	r31, 0x08	; 8
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a2 36       	cpi	r26, 0x62	; 98
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
  e4:	20 e2       	ldi	r18, 0x20	; 32
  e6:	a2 e6       	ldi	r26, 0x62	; 98
  e8:	b0 e2       	ldi	r27, 0x20	; 32
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a6 3a       	cpi	r26, 0xA6	; 166
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 be 02 	call	0x57c	; 0x57c <main>
  f8:	0c 94 27 04 	jmp	0x84e	; 0x84e <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <_Z4initv>:
		}
	}
}

void init(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	OSC.CTRL = 0b00000010; // Enable internal 32MHz oscillator
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 50 00 	sts	0x0050, r24
	//OSC.CTRL = 0b00001000; // Enable external 32MHz oscillator
	//OSC.XOSCCTRL = 0b11010000; // Configure XOSC for High speed operation, high power XTAL1 and XTAL2
	
	while((OSC.STATUS & 0b00000010) == 0); // Wait for the internal oscillator to stabilize
 10a:	e0 e5       	ldi	r30, 0x50	; 80
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	81 ff       	sbrs	r24, 1
 112:	fd cf       	rjmp	.-6      	; 0x10e <_Z4initv+0xe>
	//while((OSC.STATUS & 0b00001000) == 0); // Wait for the external oscillator to stabilize
	
	CCP = 0xD8; // Remove code write lock
 114:	88 ed       	ldi	r24, 0xD8	; 216
 116:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = 0b00000000; // No external clock prescaler
 118:	e0 e4       	ldi	r30, 0x40	; 64
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	11 82       	std	Z+1, r1	; 0x01
	CCP = 0xD8; // Remove code write lock
 11e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0b00000001; // Internal 32MHz Oscillator
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
	//CLK.CTRL = 0b00000011; // External Oscillator (32MHz)
	
	PORTA.DIR = 0x00; // All inputs
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	96 e0       	ldi	r25, 0x06	; 6
 128:	dc 01       	movw	r26, r24
 12a:	1c 92       	st	X, r1
	PORTC.DIR = 0x00; // All inputs
 12c:	e0 e4       	ldi	r30, 0x40	; 64
 12e:	f6 e0       	ldi	r31, 0x06	; 6
 130:	10 82       	st	Z, r1
	PORTD.DIR = 0b00001000; // All inputs except PD3 (SPI TX)
 132:	20 e6       	ldi	r18, 0x60	; 96
 134:	36 e0       	ldi	r19, 0x06	; 6
 136:	48 e0       	ldi	r20, 0x08	; 8
 138:	d9 01       	movw	r26, r18
 13a:	4c 93       	st	X, r20
	
	PORTA.INTMASK = 0xff;
 13c:	4f ef       	ldi	r20, 0xFF	; 255
 13e:	dc 01       	movw	r26, r24
 140:	1a 96       	adiw	r26, 0x0a	; 10
 142:	4c 93       	st	X, r20
	PORTC.INTMASK = 0xff; // Pins 4 & 5 are A8 and B8
 144:	42 87       	std	Z+10, r20	; 0x0a
	PORTD.INTMASK = 0xf7;
 146:	47 ef       	ldi	r20, 0xF7	; 247
 148:	d9 01       	movw	r26, r18
 14a:	1a 96       	adiw	r26, 0x0a	; 10
 14c:	4c 93       	st	X, r20
	PORTC.INTCTRL = 0b00000010; // Medium Priority Interrupt
 14e:	42 e0       	ldi	r20, 0x02	; 2
 150:	41 87       	std	Z+9, r20	; 0x09
	PORTC.PIN4CTRL = 0x00; // Quadrature Input A8, Sense both edges
 152:	14 8a       	std	Z+20, r1	; 0x14
	PORTC.PIN5CTRL = 0x00; // Quadrature Input B8, Sense both edges
 154:	15 8a       	std	Z+21, r1	; 0x15
	
	SREG = 0b10000000; // Enable global interrupts
 156:	40 e8       	ldi	r20, 0x80	; 128
 158:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	bf ef       	ldi	r27, 0xFF	; 255
 15c:	47 ea       	ldi	r20, 0xA7	; 167
 15e:	51 e6       	ldi	r21, 0x61	; 97
 160:	b1 50       	subi	r27, 0x01	; 1
 162:	40 40       	sbci	r20, 0x00	; 0
 164:	50 40       	sbci	r21, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <_Z4initv+0x60>
 168:	00 c0       	rjmp	.+0      	; 0x16a <_Z4initv+0x6a>
 16a:	00 00       	nop
	
	_delay_ms(1000); // Wait for stuff to power up etc
	
	oldA[0] = (PORTA.IN & 0b00010000);
 16c:	dc 01       	movw	r26, r24
 16e:	18 96       	adiw	r26, 0x08	; 8
 170:	4c 91       	ld	r20, X
 172:	18 97       	sbiw	r26, 0x08	; 8
 174:	cf e6       	ldi	r28, 0x6F	; 111
 176:	d0 e2       	ldi	r29, 0x20	; 32
 178:	42 95       	swap	r20
 17a:	41 70       	andi	r20, 0x01	; 1
 17c:	48 83       	st	Y, r20
	oldB[0] = (PORTA.IN & 0b00100000);
 17e:	18 96       	adiw	r26, 0x08	; 8
 180:	4c 91       	ld	r20, X
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	70 e2       	ldi	r23, 0x20	; 32
 186:	45 fb       	bst	r20, 5
 188:	44 27       	eor	r20, r20
 18a:	40 f9       	bld	r20, 0
 18c:	db 01       	movw	r26, r22
 18e:	4c 93       	st	X, r20
	oldA[1] = (PORTA.IN & 0b01000000);
 190:	dc 01       	movw	r26, r24
 192:	18 96       	adiw	r26, 0x08	; 8
 194:	4c 91       	ld	r20, X
 196:	18 97       	sbiw	r26, 0x08	; 8
 198:	46 fb       	bst	r20, 6
 19a:	44 27       	eor	r20, r20
 19c:	40 f9       	bld	r20, 0
 19e:	49 83       	std	Y+1, r20	; 0x01
	oldB[1] = (PORTA.IN & 0b10000000);
 1a0:	18 96       	adiw	r26, 0x08	; 8
 1a2:	4c 91       	ld	r20, X
 1a4:	44 1f       	adc	r20, r20
 1a6:	44 27       	eor	r20, r20
 1a8:	44 1f       	adc	r20, r20
 1aa:	db 01       	movw	r26, r22
 1ac:	11 96       	adiw	r26, 0x01	; 1
 1ae:	4c 93       	st	X, r20
	oldA[2] = (PORTD.IN & 0b00000001);
 1b0:	d9 01       	movw	r26, r18
 1b2:	18 96       	adiw	r26, 0x08	; 8
 1b4:	4c 91       	ld	r20, X
 1b6:	18 97       	sbiw	r26, 0x08	; 8
 1b8:	41 70       	andi	r20, 0x01	; 1
 1ba:	4a 83       	std	Y+2, r20	; 0x02
	oldB[2] = (PORTD.IN & 0b00000010);
 1bc:	18 96       	adiw	r26, 0x08	; 8
 1be:	4c 91       	ld	r20, X
 1c0:	46 95       	lsr	r20
 1c2:	41 70       	andi	r20, 0x01	; 1
 1c4:	db 01       	movw	r26, r22
 1c6:	12 96       	adiw	r26, 0x02	; 2
 1c8:	4c 93       	st	X, r20
	oldA[3] = (PORTD.IN & 0b00010000);
 1ca:	d9 01       	movw	r26, r18
 1cc:	18 96       	adiw	r26, 0x08	; 8
 1ce:	4c 91       	ld	r20, X
 1d0:	18 97       	sbiw	r26, 0x08	; 8
 1d2:	42 95       	swap	r20
 1d4:	41 70       	andi	r20, 0x01	; 1
 1d6:	4b 83       	std	Y+3, r20	; 0x03
	oldB[3] = (PORTD.IN & 0b00100000);
 1d8:	18 96       	adiw	r26, 0x08	; 8
 1da:	4c 91       	ld	r20, X
 1dc:	45 fb       	bst	r20, 5
 1de:	44 27       	eor	r20, r20
 1e0:	40 f9       	bld	r20, 0
 1e2:	db 01       	movw	r26, r22
 1e4:	13 96       	adiw	r26, 0x03	; 3
 1e6:	4c 93       	st	X, r20
	oldA[4] = (PORTD.IN & 0b01000000);
 1e8:	d9 01       	movw	r26, r18
 1ea:	18 96       	adiw	r26, 0x08	; 8
 1ec:	4c 91       	ld	r20, X
 1ee:	18 97       	sbiw	r26, 0x08	; 8
 1f0:	46 fb       	bst	r20, 6
 1f2:	44 27       	eor	r20, r20
 1f4:	40 f9       	bld	r20, 0
 1f6:	4c 83       	std	Y+4, r20	; 0x04
	oldB[4] = (PORTD.IN & 0b10000000);
 1f8:	18 96       	adiw	r26, 0x08	; 8
 1fa:	2c 91       	ld	r18, X
 1fc:	22 1f       	adc	r18, r18
 1fe:	22 27       	eor	r18, r18
 200:	22 1f       	adc	r18, r18
 202:	db 01       	movw	r26, r22
 204:	14 96       	adiw	r26, 0x04	; 4
 206:	2c 93       	st	X, r18
	oldA[5] = (PORTA.IN & 0b00001000);
 208:	dc 01       	movw	r26, r24
 20a:	18 96       	adiw	r26, 0x08	; 8
 20c:	2c 91       	ld	r18, X
 20e:	18 97       	sbiw	r26, 0x08	; 8
 210:	23 fb       	bst	r18, 3
 212:	22 27       	eor	r18, r18
 214:	20 f9       	bld	r18, 0
 216:	2d 83       	std	Y+5, r18	; 0x05
	oldB[5] = (PORTA.IN & 0b00000100);
 218:	18 96       	adiw	r26, 0x08	; 8
 21a:	2c 91       	ld	r18, X
 21c:	22 fb       	bst	r18, 2
 21e:	22 27       	eor	r18, r18
 220:	20 f9       	bld	r18, 0
 222:	db 01       	movw	r26, r22
 224:	15 96       	adiw	r26, 0x05	; 5
 226:	2c 93       	st	X, r18
	oldA[6] = (PORTA.IN & 0b00000010);
 228:	dc 01       	movw	r26, r24
 22a:	18 96       	adiw	r26, 0x08	; 8
 22c:	2c 91       	ld	r18, X
 22e:	18 97       	sbiw	r26, 0x08	; 8
 230:	26 95       	lsr	r18
 232:	21 70       	andi	r18, 0x01	; 1
 234:	2e 83       	std	Y+6, r18	; 0x06
	oldB[6] = (PORTA.IN & 0b00000001);
 236:	18 96       	adiw	r26, 0x08	; 8
 238:	8c 91       	ld	r24, X
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	db 01       	movw	r26, r22
 23e:	16 96       	adiw	r26, 0x06	; 6
 240:	8c 93       	st	X, r24
 242:	16 97       	sbiw	r26, 0x06	; 6
	oldA[7] = (PORTC.IN & 0b10000000);
 244:	80 85       	ldd	r24, Z+8	; 0x08
 246:	88 1f       	adc	r24, r24
 248:	88 27       	eor	r24, r24
 24a:	88 1f       	adc	r24, r24
 24c:	8f 83       	std	Y+7, r24	; 0x07
	oldB[7] = (PORTC.IN & 0b01000000);
 24e:	80 85       	ldd	r24, Z+8	; 0x08
 250:	86 fb       	bst	r24, 6
 252:	88 27       	eor	r24, r24
 254:	80 f9       	bld	r24, 0
 256:	17 96       	adiw	r26, 0x07	; 7
 258:	8c 93       	st	X, r24
 25a:	17 97       	sbiw	r26, 0x07	; 7
	oldA[8] = (PORTC.IN & 0b00100000);
 25c:	80 85       	ldd	r24, Z+8	; 0x08
 25e:	85 fb       	bst	r24, 5
 260:	88 27       	eor	r24, r24
 262:	80 f9       	bld	r24, 0
 264:	88 87       	std	Y+8, r24	; 0x08
	oldB[8] = (PORTC.IN & 0b00010000);
 266:	80 85       	ldd	r24, Z+8	; 0x08
 268:	82 95       	swap	r24
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	18 96       	adiw	r26, 0x08	; 8
 26e:	8c 93       	st	X, r24
 270:	18 97       	sbiw	r26, 0x08	; 8
	oldA[9] = (PORTC.IN & 0b00001000);
 272:	80 85       	ldd	r24, Z+8	; 0x08
 274:	83 fb       	bst	r24, 3
 276:	88 27       	eor	r24, r24
 278:	80 f9       	bld	r24, 0
 27a:	89 87       	std	Y+9, r24	; 0x09
	oldB[9] = (PORTC.IN & 0b00000100);
 27c:	80 85       	ldd	r24, Z+8	; 0x08
 27e:	82 fb       	bst	r24, 2
 280:	88 27       	eor	r24, r24
 282:	80 f9       	bld	r24, 0
 284:	19 96       	adiw	r26, 0x09	; 9
 286:	8c 93       	st	X, r24
 288:	19 97       	sbiw	r26, 0x09	; 9
	oldA[10] = (PORTC.IN & 0b00000001);
 28a:	80 85       	ldd	r24, Z+8	; 0x08
 28c:	81 70       	andi	r24, 0x01	; 1
 28e:	8a 87       	std	Y+10, r24	; 0x0a
	oldB[10] = (PORTC.IN & 0b00000010);
 290:	80 85       	ldd	r24, Z+8	; 0x08
 292:	86 95       	lsr	r24
 294:	81 70       	andi	r24, 0x01	; 1
 296:	1a 96       	adiw	r26, 0x0a	; 10
 298:	8c 93       	st	X, r24
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <_Z9initUSARTv>:

void initUSART(void)
{
	// Configure SPI interface and speeds etc for USARTD0 @ 9600bps
	USARTD0.BAUDCTRLA = 0x0C; // BSEL = 12
 2a0:	e0 ec       	ldi	r30, 0xC0	; 192
 2a2:	f9 e0       	ldi	r31, 0x09	; 9
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = 0x40; // BSCALE = 4 (2^(4-1) = 15)
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLA = 0x00; // Interrupts off
 2ac:	12 82       	std	Z+2, r1	; 0x02
	USARTD0.CTRLB = 0b00011000; // CLK2X = 0, Enable transmitter and receiver
 2ae:	88 e1       	ldi	r24, 0x18	; 24
 2b0:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.CTRLC = 0b00000011; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLD = 0b00000000; // Asynchronous, No parity, 1 stop bit, 8 data bits
 2b6:	15 82       	std	Z+5, r1	; 0x05
 2b8:	08 95       	ret

000002ba <_Z8sendCharci>:
}

void sendChar(char cToSend, int chanNum)
{
	switch(chanNum)
 2ba:	67 2b       	or	r22, r23
 2bc:	39 f4       	brne	.+14     	; 0x2cc <_Z8sendCharci+0x12>
	{
		case 0:
		while(!(USARTD0_STATUS & USART_DREIF_bm));
 2be:	e1 ec       	ldi	r30, 0xC1	; 193
 2c0:	f9 e0       	ldi	r31, 0x09	; 9
 2c2:	90 81       	ld	r25, Z
 2c4:	95 ff       	sbrs	r25, 5
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <_Z8sendCharci+0x8>
		USARTD0_DATA = cToSend;
 2c8:	80 93 c0 09 	sts	0x09C0, r24
 2cc:	08 95       	ret

000002ce <_Z7sendStrPci>:
		break;
	}
}

void sendStr(char *sToSend, int chanNum)
{
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
	while(*sToSend)
 2d8:	88 81       	ld	r24, Y
 2da:	88 23       	and	r24, r24
 2dc:	41 f0       	breq	.+16     	; 0x2ee <_Z7sendStrPci+0x20>
 2de:	8b 01       	movw	r16, r22
 2e0:	21 96       	adiw	r28, 0x01	; 1
	sendChar(*sToSend++, chanNum);
 2e2:	b8 01       	movw	r22, r16
 2e4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z8sendCharci>
	}
}

void sendStr(char *sToSend, int chanNum)
{
	while(*sToSend)
 2e8:	89 91       	ld	r24, Y+
 2ea:	81 11       	cpse	r24, r1
 2ec:	fa cf       	rjmp	.-12     	; 0x2e2 <_Z7sendStrPci+0x14>
	sendChar(*sToSend++, chanNum);
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <_Z7decodeBh>:
	}
	return temp;
}

void decodeB(unsigned char chanQ){
	oldB[chanQ] = !oldB[chanQ];
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	fc 01       	movw	r30, r24
 2fc:	ec 59       	subi	r30, 0x9C	; 156
 2fe:	ff 4d       	sbci	r31, 0xDF	; 223
 300:	30 81       	ld	r19, Z
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	23 27       	eor	r18, r19
 306:	20 83       	st	Z, r18
	if (oldB[chanQ] == oldA[chanQ]){
 308:	fc 01       	movw	r30, r24
 30a:	e1 59       	subi	r30, 0x91	; 145
 30c:	ff 4d       	sbci	r31, 0xDF	; 223
 30e:	30 81       	ld	r19, Z
 310:	23 13       	cpse	r18, r19
 312:	16 c0       	rjmp	.+44     	; 0x340 <_Z7decodeBh+0x48>
		qPos[chanQ]++;
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	fc 01       	movw	r30, r24
 31e:	e6 58       	subi	r30, 0x86	; 134
 320:	ff 4d       	sbci	r31, 0xDF	; 223
 322:	80 81       	ld	r24, Z
 324:	91 81       	ldd	r25, Z+1	; 0x01
 326:	a2 81       	ldd	r26, Z+2	; 0x02
 328:	b3 81       	ldd	r27, Z+3	; 0x03
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	a1 1d       	adc	r26, r1
 32e:	b1 1d       	adc	r27, r1
 330:	80 83       	st	Z, r24
 332:	91 83       	std	Z+1, r25	; 0x01
 334:	a2 83       	std	Z+2, r26	; 0x02
 336:	b3 83       	std	Z+3, r27	; 0x03
		qInc = 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 63 20 	sts	0x2063, r24
 33e:	08 95       	ret
	}
	else{
		qPos[chanQ]--;
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	fc 01       	movw	r30, r24
 34a:	e6 58       	subi	r30, 0x86	; 134
 34c:	ff 4d       	sbci	r31, 0xDF	; 223
 34e:	80 81       	ld	r24, Z
 350:	91 81       	ldd	r25, Z+1	; 0x01
 352:	a2 81       	ldd	r26, Z+2	; 0x02
 354:	b3 81       	ldd	r27, Z+3	; 0x03
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	a1 09       	sbc	r26, r1
 35a:	b1 09       	sbc	r27, r1
 35c:	80 83       	st	Z, r24
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	a2 83       	std	Z+2, r26	; 0x02
 362:	b3 83       	std	Z+3, r27	; 0x03
		qInc = 0;
 364:	10 92 63 20 	sts	0x2063, r1
 368:	08 95       	ret

0000036a <_Z7decodeAh>:
	}
}

void decodeA(unsigned char chanQ) {
	oldA[chanQ] = !oldA[chanQ];
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	fc 01       	movw	r30, r24
 36e:	e1 59       	subi	r30, 0x91	; 145
 370:	ff 4d       	sbci	r31, 0xDF	; 223
 372:	30 81       	ld	r19, Z
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	23 27       	eor	r18, r19
 378:	20 83       	st	Z, r18
	if (oldA[chanQ] != oldB[chanQ]){
 37a:	fc 01       	movw	r30, r24
 37c:	ec 59       	subi	r30, 0x9C	; 156
 37e:	ff 4d       	sbci	r31, 0xDF	; 223
 380:	30 81       	ld	r19, Z
 382:	23 17       	cp	r18, r19
 384:	b1 f0       	breq	.+44     	; 0x3b2 <_Z7decodeAh+0x48>
		qPos[chanQ]++;
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	fc 01       	movw	r30, r24
 390:	e6 58       	subi	r30, 0x86	; 134
 392:	ff 4d       	sbci	r31, 0xDF	; 223
 394:	80 81       	ld	r24, Z
 396:	91 81       	ldd	r25, Z+1	; 0x01
 398:	a2 81       	ldd	r26, Z+2	; 0x02
 39a:	b3 81       	ldd	r27, Z+3	; 0x03
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
 3a2:	80 83       	st	Z, r24
 3a4:	91 83       	std	Z+1, r25	; 0x01
 3a6:	a2 83       	std	Z+2, r26	; 0x02
 3a8:	b3 83       	std	Z+3, r27	; 0x03
		qInc = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 63 20 	sts	0x2063, r24
 3b0:	08 95       	ret
	}
	else{
		qPos[chanQ]--;
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	fc 01       	movw	r30, r24
 3bc:	e6 58       	subi	r30, 0x86	; 134
 3be:	ff 4d       	sbci	r31, 0xDF	; 223
 3c0:	80 81       	ld	r24, Z
 3c2:	91 81       	ldd	r25, Z+1	; 0x01
 3c4:	a2 81       	ldd	r26, Z+2	; 0x02
 3c6:	b3 81       	ldd	r27, Z+3	; 0x03
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	a1 09       	sbc	r26, r1
 3cc:	b1 09       	sbc	r27, r1
 3ce:	80 83       	st	Z, r24
 3d0:	91 83       	std	Z+1, r25	; 0x01
 3d2:	a2 83       	std	Z+2, r26	; 0x02
 3d4:	b3 83       	std	Z+3, r27	; 0x03
		qInc = 0;
 3d6:	10 92 63 20 	sts	0x2063, r1
 3da:	08 95       	ret

000003dc <_Z8get_msgSh>:
	}
}


void get_msgS(unsigned char qChan) {
	switch(qChan) {
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	8b 30       	cpi	r24, 0x0B	; 11
 3e0:	91 05       	cpc	r25, r1
 3e2:	08 f0       	brcs	.+2      	; 0x3e6 <_Z8get_msgSh+0xa>
 3e4:	ca c0       	rjmp	.+404    	; 0x57a <_Z8get_msgSh+0x19e>
 3e6:	fc 01       	movw	r30, r24
 3e8:	ea 5a       	subi	r30, 0xAA	; 170
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	0c 94 21 04 	jmp	0x842	; 0x842 <__tablejump2__>
		case 0:
		if(qInc)
 3f0:	80 91 63 20 	lds	r24, 0x2063
 3f4:	88 23       	and	r24, r24
 3f6:	39 f0       	breq	.+14     	; 0x406 <_Z8get_msgSh+0x2a>
		msgS = "Q0+";
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	90 e2       	ldi	r25, 0x20	; 32
 3fc:	80 93 00 20 	sts	0x2000, r24
 400:	90 93 01 20 	sts	0x2001, r25
 404:	08 95       	ret
		else
		msgS = "Q0-";
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	90 e2       	ldi	r25, 0x20	; 32
 40a:	80 93 00 20 	sts	0x2000, r24
 40e:	90 93 01 20 	sts	0x2001, r25
 412:	08 95       	ret
		break;
		case 1:
		if(qInc)
 414:	80 91 63 20 	lds	r24, 0x2063
 418:	88 23       	and	r24, r24
 41a:	39 f0       	breq	.+14     	; 0x42a <_Z8get_msgSh+0x4e>
		msgS = "Q1+";
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	90 e2       	ldi	r25, 0x20	; 32
 420:	80 93 00 20 	sts	0x2000, r24
 424:	90 93 01 20 	sts	0x2001, r25
 428:	08 95       	ret
		else
		msgS = "Q1-";
 42a:	8e e0       	ldi	r24, 0x0E	; 14
 42c:	90 e2       	ldi	r25, 0x20	; 32
 42e:	80 93 00 20 	sts	0x2000, r24
 432:	90 93 01 20 	sts	0x2001, r25
 436:	08 95       	ret
		break;
		case 2:
		if(qInc)
 438:	80 91 63 20 	lds	r24, 0x2063
 43c:	88 23       	and	r24, r24
 43e:	39 f0       	breq	.+14     	; 0x44e <_Z8get_msgSh+0x72>
		msgS = "Q2+";
 440:	82 e1       	ldi	r24, 0x12	; 18
 442:	90 e2       	ldi	r25, 0x20	; 32
 444:	80 93 00 20 	sts	0x2000, r24
 448:	90 93 01 20 	sts	0x2001, r25
 44c:	08 95       	ret
		else
		msgS = "Q2-";
 44e:	86 e1       	ldi	r24, 0x16	; 22
 450:	90 e2       	ldi	r25, 0x20	; 32
 452:	80 93 00 20 	sts	0x2000, r24
 456:	90 93 01 20 	sts	0x2001, r25
 45a:	08 95       	ret
		break;
		case 3:
		if(qInc)
 45c:	80 91 63 20 	lds	r24, 0x2063
 460:	88 23       	and	r24, r24
 462:	39 f0       	breq	.+14     	; 0x472 <_Z8get_msgSh+0x96>
		msgS = "Q3+";
 464:	8a e1       	ldi	r24, 0x1A	; 26
 466:	90 e2       	ldi	r25, 0x20	; 32
 468:	80 93 00 20 	sts	0x2000, r24
 46c:	90 93 01 20 	sts	0x2001, r25
 470:	08 95       	ret
		else
		msgS = "Q3-";
 472:	8e e1       	ldi	r24, 0x1E	; 30
 474:	90 e2       	ldi	r25, 0x20	; 32
 476:	80 93 00 20 	sts	0x2000, r24
 47a:	90 93 01 20 	sts	0x2001, r25
 47e:	08 95       	ret
		break;
		case 4:
		if(qInc)
 480:	80 91 63 20 	lds	r24, 0x2063
 484:	88 23       	and	r24, r24
 486:	39 f0       	breq	.+14     	; 0x496 <_Z8get_msgSh+0xba>
		msgS = "Q4+";
 488:	82 e2       	ldi	r24, 0x22	; 34
 48a:	90 e2       	ldi	r25, 0x20	; 32
 48c:	80 93 00 20 	sts	0x2000, r24
 490:	90 93 01 20 	sts	0x2001, r25
 494:	08 95       	ret
		else
		msgS = "Q4-";
 496:	86 e2       	ldi	r24, 0x26	; 38
 498:	90 e2       	ldi	r25, 0x20	; 32
 49a:	80 93 00 20 	sts	0x2000, r24
 49e:	90 93 01 20 	sts	0x2001, r25
 4a2:	08 95       	ret
		break;
		case 5:
		if(qInc)
 4a4:	80 91 63 20 	lds	r24, 0x2063
 4a8:	88 23       	and	r24, r24
 4aa:	39 f0       	breq	.+14     	; 0x4ba <_Z8get_msgSh+0xde>
		msgS = "Q5+";
 4ac:	8a e2       	ldi	r24, 0x2A	; 42
 4ae:	90 e2       	ldi	r25, 0x20	; 32
 4b0:	80 93 00 20 	sts	0x2000, r24
 4b4:	90 93 01 20 	sts	0x2001, r25
 4b8:	08 95       	ret
		else
		msgS = "Q5-";
 4ba:	8e e2       	ldi	r24, 0x2E	; 46
 4bc:	90 e2       	ldi	r25, 0x20	; 32
 4be:	80 93 00 20 	sts	0x2000, r24
 4c2:	90 93 01 20 	sts	0x2001, r25
 4c6:	08 95       	ret
		break;
		case 6:
		if(qInc)
 4c8:	80 91 63 20 	lds	r24, 0x2063
 4cc:	88 23       	and	r24, r24
 4ce:	39 f0       	breq	.+14     	; 0x4de <_Z8get_msgSh+0x102>
		msgS = "Q6+";
 4d0:	82 e3       	ldi	r24, 0x32	; 50
 4d2:	90 e2       	ldi	r25, 0x20	; 32
 4d4:	80 93 00 20 	sts	0x2000, r24
 4d8:	90 93 01 20 	sts	0x2001, r25
 4dc:	08 95       	ret
		else
		msgS = "Q6-";
 4de:	86 e3       	ldi	r24, 0x36	; 54
 4e0:	90 e2       	ldi	r25, 0x20	; 32
 4e2:	80 93 00 20 	sts	0x2000, r24
 4e6:	90 93 01 20 	sts	0x2001, r25
 4ea:	08 95       	ret
		break;
		case 7:
		if(qInc)
 4ec:	80 91 63 20 	lds	r24, 0x2063
 4f0:	88 23       	and	r24, r24
 4f2:	39 f0       	breq	.+14     	; 0x502 <_Z8get_msgSh+0x126>
		msgS = "Q7+";
 4f4:	8a e3       	ldi	r24, 0x3A	; 58
 4f6:	90 e2       	ldi	r25, 0x20	; 32
 4f8:	80 93 00 20 	sts	0x2000, r24
 4fc:	90 93 01 20 	sts	0x2001, r25
 500:	08 95       	ret
		else
		msgS = "Q7-";
 502:	8e e3       	ldi	r24, 0x3E	; 62
 504:	90 e2       	ldi	r25, 0x20	; 32
 506:	80 93 00 20 	sts	0x2000, r24
 50a:	90 93 01 20 	sts	0x2001, r25
 50e:	08 95       	ret
		break;
		case 8:
		if(qInc)
 510:	80 91 63 20 	lds	r24, 0x2063
 514:	88 23       	and	r24, r24
 516:	39 f0       	breq	.+14     	; 0x526 <_Z8get_msgSh+0x14a>
		msgS = "Q8+";
 518:	82 e4       	ldi	r24, 0x42	; 66
 51a:	90 e2       	ldi	r25, 0x20	; 32
 51c:	80 93 00 20 	sts	0x2000, r24
 520:	90 93 01 20 	sts	0x2001, r25
 524:	08 95       	ret
		else
		msgS = "Q8-";
 526:	86 e4       	ldi	r24, 0x46	; 70
 528:	90 e2       	ldi	r25, 0x20	; 32
 52a:	80 93 00 20 	sts	0x2000, r24
 52e:	90 93 01 20 	sts	0x2001, r25
 532:	08 95       	ret
		break;
		case 9:
		if(qInc)
 534:	80 91 63 20 	lds	r24, 0x2063
 538:	88 23       	and	r24, r24
 53a:	39 f0       	breq	.+14     	; 0x54a <_Z8get_msgSh+0x16e>
		msgS = "Q9+";
 53c:	8a e4       	ldi	r24, 0x4A	; 74
 53e:	90 e2       	ldi	r25, 0x20	; 32
 540:	80 93 00 20 	sts	0x2000, r24
 544:	90 93 01 20 	sts	0x2001, r25
 548:	08 95       	ret
		else
		msgS = "Q9-";
 54a:	8e e4       	ldi	r24, 0x4E	; 78
 54c:	90 e2       	ldi	r25, 0x20	; 32
 54e:	80 93 00 20 	sts	0x2000, r24
 552:	90 93 01 20 	sts	0x2001, r25
 556:	08 95       	ret
		break;
		case 10:
		if(qInc)
 558:	80 91 63 20 	lds	r24, 0x2063
 55c:	88 23       	and	r24, r24
 55e:	39 f0       	breq	.+14     	; 0x56e <_Z8get_msgSh+0x192>
		msgS = "QA+";
 560:	82 e5       	ldi	r24, 0x52	; 82
 562:	90 e2       	ldi	r25, 0x20	; 32
 564:	80 93 00 20 	sts	0x2000, r24
 568:	90 93 01 20 	sts	0x2001, r25
 56c:	08 95       	ret
		else
		msgS = "QA-";
 56e:	86 e5       	ldi	r24, 0x56	; 86
 570:	90 e2       	ldi	r25, 0x20	; 32
 572:	80 93 00 20 	sts	0x2000, r24
 576:	90 93 01 20 	sts	0x2001, r25
 57a:	08 95       	ret

0000057c <main>:
char* msgL = "Q0_0000"; // Quadrature position string
char* msgS = "Q0+"; // Quadrature change string, 0-A (11 knobs)

int main(void)
{
	init();
 57c:	0e 94 80 00 	call	0x100	; 0x100 <_Z4initv>
	initUSART();
 580:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z9initUSARTv>
	
	while (1)
	{
		if(((PORTA.INTFLAGS & 0xff) != 0) || ((PORTC.INTFLAGS & 0xff) != 0)  || ((PORTD.INTFLAGS & 0xff) != 0) ) {
 584:	c0 e0       	ldi	r28, 0x00	; 0
 586:	d6 e0       	ldi	r29, 0x06	; 6
 588:	0f 2e       	mov	r0, r31
 58a:	f0 e4       	ldi	r31, 0x40	; 64
 58c:	ef 2e       	mov	r14, r31
 58e:	f6 e0       	ldi	r31, 0x06	; 6
 590:	ff 2e       	mov	r15, r31
 592:	f0 2d       	mov	r31, r0
 594:	00 e6       	ldi	r16, 0x60	; 96
 596:	16 e0       	ldi	r17, 0x06	; 6
				qNum = 10;
				decodeA(qNum);
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00000001;
			}
			else if((PORTC.INTFLAGS & 0b00000010) != 0) { // B10 has been triggered
				qNum = 10;
 598:	0f 2e       	mov	r0, r31
 59a:	fa e0       	ldi	r31, 0x0A	; 10
 59c:	7f 2e       	mov	r7, r31
 59e:	f0 2d       	mov	r31, r0
				qNum = 9;
				decodeA(qNum);
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00001000;
			}
			else if((PORTC.INTFLAGS & 0b00000100) != 0) { // B9 has been triggered
				qNum = 9;
 5a0:	0f 2e       	mov	r0, r31
 5a2:	f9 e0       	ldi	r31, 0x09	; 9
 5a4:	8f 2e       	mov	r8, r31
 5a6:	f0 2d       	mov	r31, r0
				qNum = 8;
				decodeA(qNum);
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00100000;
			}
			else if((PORTC.INTFLAGS & 0b00010000) != 0) { // B8 has been triggered
				qNum = 8;
 5a8:	68 94       	set
 5aa:	99 24       	eor	r9, r9
 5ac:	93 f8       	bld	r9, 3
				qNum = 7;
				decodeA(qNum);
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b10000000;
			}
			else if((PORTC.INTFLAGS & 0b01000000) != 0) { // B7 has been triggered
				qNum = 7;
 5ae:	0f 2e       	mov	r0, r31
 5b0:	f7 e0       	ldi	r31, 0x07	; 7
 5b2:	af 2e       	mov	r10, r31
 5b4:	f0 2d       	mov	r31, r0
				qNum = 6;
				decodeA(qNum);
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00000010;
			}
			else if((PORTA.INTFLAGS & 0b00000001) != 0) { // B6 has been triggered
				qNum = 6;
 5b6:	0f 2e       	mov	r0, r31
 5b8:	f6 e0       	ldi	r31, 0x06	; 6
 5ba:	bf 2e       	mov	r11, r31
 5bc:	f0 2d       	mov	r31, r0
				qNum = 5;
				decodeA(qNum);
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00001000;
			}
			else if((PORTA.INTFLAGS & 0b00000100) != 0) { // B5 has been triggered
				qNum = 5;
 5be:	0f 2e       	mov	r0, r31
 5c0:	f5 e0       	ldi	r31, 0x05	; 5
 5c2:	cf 2e       	mov	r12, r31
 5c4:	f0 2d       	mov	r31, r0
				qNum = 4;
				decodeA(qNum);
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b01000000;
			}
			else if((PORTD.INTFLAGS & 0b10000000) != 0) { // B4 has been triggered
				qNum = 4;
 5c6:	68 94       	set
 5c8:	dd 24       	eor	r13, r13
 5ca:	d2 f8       	bld	r13, 2
	init();
	initUSART();
	
	while (1)
	{
		if(((PORTA.INTFLAGS & 0xff) != 0) || ((PORTC.INTFLAGS & 0xff) != 0)  || ((PORTD.INTFLAGS & 0xff) != 0) ) {
 5cc:	9c 85       	ldd	r25, Y+12	; 0x0c
 5ce:	91 11       	cpse	r25, r1
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <main+0x66>
 5d2:	f7 01       	movw	r30, r14
 5d4:	94 85       	ldd	r25, Z+12	; 0x0c
 5d6:	91 11       	cpse	r25, r1
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <main+0x66>
 5da:	f8 01       	movw	r30, r16
 5dc:	94 85       	ldd	r25, Z+12	; 0x0c
 5de:	99 23       	and	r25, r25
 5e0:	a9 f3       	breq	.-22     	; 0x5cc <main+0x50>
			if((PORTA.INTFLAGS & 0b00010000) != 0) { // A0 has been triggered
 5e2:	9c 85       	ldd	r25, Y+12	; 0x0c
 5e4:	94 ff       	sbrs	r25, 4
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <main+0x7e>
				qNum = 0;
 5e8:	10 92 62 20 	sts	0x2062, r1
				decodeA(qNum);
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00010000;
 5f2:	8c 85       	ldd	r24, Y+12	; 0x0c
 5f4:	80 61       	ori	r24, 0x10	; 16
 5f6:	8c 87       	std	Y+12, r24	; 0x0c
 5f8:	17 c1       	rjmp	.+558    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b00100000) != 0) { // B0 has been triggered
 5fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 5fc:	95 ff       	sbrs	r25, 5
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <main+0x96>
				qNum = 0;
 600:	10 92 62 20 	sts	0x2062, r1
				decodeB(qNum);
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00100000;
 60a:	8c 85       	ldd	r24, Y+12	; 0x0c
 60c:	80 62       	ori	r24, 0x20	; 32
 60e:	8c 87       	std	Y+12, r24	; 0x0c
 610:	0b c1       	rjmp	.+534    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b01000000) != 0) { // A1 has been triggered
 612:	8c 85       	ldd	r24, Y+12	; 0x0c
 614:	86 ff       	sbrs	r24, 6
 616:	09 c0       	rjmp	.+18     	; 0x62a <main+0xae>
				qNum = 1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 62 20 	sts	0x2062, r24
				decodeA(qNum);
 61e:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b01000000;
 622:	8c 85       	ldd	r24, Y+12	; 0x0c
 624:	80 64       	ori	r24, 0x40	; 64
 626:	8c 87       	std	Y+12, r24	; 0x0c
 628:	ff c0       	rjmp	.+510    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b10000000) != 0) { // B1 has been triggered
 62a:	8c 85       	ldd	r24, Y+12	; 0x0c
 62c:	88 23       	and	r24, r24
 62e:	4c f4       	brge	.+18     	; 0x642 <main+0xc6>
				qNum = 1;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 62 20 	sts	0x2062, r24
				decodeB(qNum);
 636:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b10000000;
 63a:	8c 85       	ldd	r24, Y+12	; 0x0c
 63c:	80 68       	ori	r24, 0x80	; 128
 63e:	8c 87       	std	Y+12, r24	; 0x0c
 640:	f3 c0       	rjmp	.+486    	; 0x828 <main+0x2ac>
			}
			else if((PORTD.INTFLAGS & 0b00000001) != 0) { // A2 has been triggered
 642:	f8 01       	movw	r30, r16
 644:	84 85       	ldd	r24, Z+12	; 0x0c
 646:	80 ff       	sbrs	r24, 0
 648:	0a c0       	rjmp	.+20     	; 0x65e <main+0xe2>
				qNum = 2;
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	80 93 62 20 	sts	0x2062, r24
				decodeA(qNum);
 650:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b00000001;
 654:	f8 01       	movw	r30, r16
 656:	84 85       	ldd	r24, Z+12	; 0x0c
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	84 87       	std	Z+12, r24	; 0x0c
 65c:	e5 c0       	rjmp	.+458    	; 0x828 <main+0x2ac>
			}
			else if((PORTD.INTFLAGS & 0b00000010) != 0) { // B2 has been triggered
 65e:	f8 01       	movw	r30, r16
 660:	84 85       	ldd	r24, Z+12	; 0x0c
 662:	81 ff       	sbrs	r24, 1
 664:	0a c0       	rjmp	.+20     	; 0x67a <main+0xfe>
				qNum = 2;
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	80 93 62 20 	sts	0x2062, r24
				decodeB(qNum);
 66c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b00000010;
 670:	f8 01       	movw	r30, r16
 672:	84 85       	ldd	r24, Z+12	; 0x0c
 674:	82 60       	ori	r24, 0x02	; 2
 676:	84 87       	std	Z+12, r24	; 0x0c
 678:	d7 c0       	rjmp	.+430    	; 0x828 <main+0x2ac>
			}
			else if((PORTD.INTFLAGS & 0b00010000) != 0) { // A3 has been triggered
 67a:	f8 01       	movw	r30, r16
 67c:	84 85       	ldd	r24, Z+12	; 0x0c
 67e:	84 ff       	sbrs	r24, 4
 680:	0a c0       	rjmp	.+20     	; 0x696 <main+0x11a>
				qNum = 3;
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	80 93 62 20 	sts	0x2062, r24
				decodeA(qNum);
 688:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b00010000;
 68c:	f8 01       	movw	r30, r16
 68e:	84 85       	ldd	r24, Z+12	; 0x0c
 690:	80 61       	ori	r24, 0x10	; 16
 692:	84 87       	std	Z+12, r24	; 0x0c
 694:	c9 c0       	rjmp	.+402    	; 0x828 <main+0x2ac>
			}
			else if((PORTD.INTFLAGS & 0b00100000) != 0) { // B3 has been triggered
 696:	f8 01       	movw	r30, r16
 698:	84 85       	ldd	r24, Z+12	; 0x0c
 69a:	85 ff       	sbrs	r24, 5
 69c:	0a c0       	rjmp	.+20     	; 0x6b2 <main+0x136>
				qNum = 3;
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	80 93 62 20 	sts	0x2062, r24
				decodeB(qNum);
 6a4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b00100000;
 6a8:	f8 01       	movw	r30, r16
 6aa:	84 85       	ldd	r24, Z+12	; 0x0c
 6ac:	80 62       	ori	r24, 0x20	; 32
 6ae:	84 87       	std	Z+12, r24	; 0x0c
 6b0:	bb c0       	rjmp	.+374    	; 0x828 <main+0x2ac>
			}
			else if((PORTD.INTFLAGS & 0b01000000) != 0) { // A4 has been triggered
 6b2:	f8 01       	movw	r30, r16
 6b4:	84 85       	ldd	r24, Z+12	; 0x0c
 6b6:	86 ff       	sbrs	r24, 6
 6b8:	0a c0       	rjmp	.+20     	; 0x6ce <main+0x152>
				qNum = 4;
 6ba:	d0 92 62 20 	sts	0x2062, r13
				decodeA(qNum);
 6be:	8d 2d       	mov	r24, r13
 6c0:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b01000000;
 6c4:	f8 01       	movw	r30, r16
 6c6:	84 85       	ldd	r24, Z+12	; 0x0c
 6c8:	80 64       	ori	r24, 0x40	; 64
 6ca:	84 87       	std	Z+12, r24	; 0x0c
 6cc:	ad c0       	rjmp	.+346    	; 0x828 <main+0x2ac>
			}
			else if((PORTD.INTFLAGS & 0b10000000) != 0) { // B4 has been triggered
 6ce:	f8 01       	movw	r30, r16
 6d0:	84 85       	ldd	r24, Z+12	; 0x0c
 6d2:	88 23       	and	r24, r24
 6d4:	54 f4       	brge	.+20     	; 0x6ea <main+0x16e>
				qNum = 4;
 6d6:	d0 92 62 20 	sts	0x2062, r13
				decodeB(qNum);
 6da:	8d 2d       	mov	r24, r13
 6dc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTD.INTFLAGS = PORTD.INTFLAGS | 0b10000000;
 6e0:	f8 01       	movw	r30, r16
 6e2:	84 85       	ldd	r24, Z+12	; 0x0c
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	84 87       	std	Z+12, r24	; 0x0c
 6e8:	9f c0       	rjmp	.+318    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b00001000) != 0) { // A5 has been triggered
 6ea:	8c 85       	ldd	r24, Y+12	; 0x0c
 6ec:	83 ff       	sbrs	r24, 3
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <main+0x186>
				qNum = 5;
 6f0:	c0 92 62 20 	sts	0x2062, r12
				decodeA(qNum);
 6f4:	8c 2d       	mov	r24, r12
 6f6:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00001000;
 6fa:	8c 85       	ldd	r24, Y+12	; 0x0c
 6fc:	88 60       	ori	r24, 0x08	; 8
 6fe:	8c 87       	std	Y+12, r24	; 0x0c
 700:	93 c0       	rjmp	.+294    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b00000100) != 0) { // B5 has been triggered
 702:	8c 85       	ldd	r24, Y+12	; 0x0c
 704:	82 ff       	sbrs	r24, 2
 706:	09 c0       	rjmp	.+18     	; 0x71a <main+0x19e>
				qNum = 5;
 708:	c0 92 62 20 	sts	0x2062, r12
				decodeB(qNum);
 70c:	8c 2d       	mov	r24, r12
 70e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00000100;
 712:	8c 85       	ldd	r24, Y+12	; 0x0c
 714:	84 60       	ori	r24, 0x04	; 4
 716:	8c 87       	std	Y+12, r24	; 0x0c
 718:	87 c0       	rjmp	.+270    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b00000010) != 0) { // A6 has been triggered
 71a:	8c 85       	ldd	r24, Y+12	; 0x0c
 71c:	81 ff       	sbrs	r24, 1
 71e:	09 c0       	rjmp	.+18     	; 0x732 <main+0x1b6>
				qNum = 6;
 720:	b0 92 62 20 	sts	0x2062, r11
				decodeA(qNum);
 724:	8b 2d       	mov	r24, r11
 726:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00000010;
 72a:	8c 85       	ldd	r24, Y+12	; 0x0c
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	8c 87       	std	Y+12, r24	; 0x0c
 730:	7b c0       	rjmp	.+246    	; 0x828 <main+0x2ac>
			}
			else if((PORTA.INTFLAGS & 0b00000001) != 0) { // B6 has been triggered
 732:	8c 85       	ldd	r24, Y+12	; 0x0c
 734:	80 ff       	sbrs	r24, 0
 736:	09 c0       	rjmp	.+18     	; 0x74a <main+0x1ce>
				qNum = 6;
 738:	b0 92 62 20 	sts	0x2062, r11
				decodeB(qNum);
 73c:	8b 2d       	mov	r24, r11
 73e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTA.INTFLAGS = PORTA.INTFLAGS | 0b00000001;
 742:	8c 85       	ldd	r24, Y+12	; 0x0c
 744:	81 60       	ori	r24, 0x01	; 1
 746:	8c 87       	std	Y+12, r24	; 0x0c
 748:	6f c0       	rjmp	.+222    	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b10000000) != 0) { // A7 has been triggered
 74a:	f7 01       	movw	r30, r14
 74c:	84 85       	ldd	r24, Z+12	; 0x0c
 74e:	88 23       	and	r24, r24
 750:	54 f4       	brge	.+20     	; 0x766 <main+0x1ea>
				qNum = 7;
 752:	a0 92 62 20 	sts	0x2062, r10
				decodeA(qNum);
 756:	8a 2d       	mov	r24, r10
 758:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b10000000;
 75c:	f7 01       	movw	r30, r14
 75e:	84 85       	ldd	r24, Z+12	; 0x0c
 760:	80 68       	ori	r24, 0x80	; 128
 762:	84 87       	std	Z+12, r24	; 0x0c
 764:	61 c0       	rjmp	.+194    	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b01000000) != 0) { // B7 has been triggered
 766:	f7 01       	movw	r30, r14
 768:	84 85       	ldd	r24, Z+12	; 0x0c
 76a:	86 ff       	sbrs	r24, 6
 76c:	0a c0       	rjmp	.+20     	; 0x782 <main+0x206>
				qNum = 7;
 76e:	a0 92 62 20 	sts	0x2062, r10
				decodeB(qNum);
 772:	8a 2d       	mov	r24, r10
 774:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b01000000;
 778:	f7 01       	movw	r30, r14
 77a:	84 85       	ldd	r24, Z+12	; 0x0c
 77c:	80 64       	ori	r24, 0x40	; 64
 77e:	84 87       	std	Z+12, r24	; 0x0c
 780:	53 c0       	rjmp	.+166    	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b00100000) != 0) { // A8 has been triggered
 782:	f7 01       	movw	r30, r14
 784:	84 85       	ldd	r24, Z+12	; 0x0c
 786:	85 ff       	sbrs	r24, 5
 788:	0a c0       	rjmp	.+20     	; 0x79e <main+0x222>
				qNum = 8;
 78a:	90 92 62 20 	sts	0x2062, r9
				decodeA(qNum);
 78e:	89 2d       	mov	r24, r9
 790:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00100000;
 794:	f7 01       	movw	r30, r14
 796:	84 85       	ldd	r24, Z+12	; 0x0c
 798:	80 62       	ori	r24, 0x20	; 32
 79a:	84 87       	std	Z+12, r24	; 0x0c
 79c:	45 c0       	rjmp	.+138    	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b00010000) != 0) { // B8 has been triggered
 79e:	f7 01       	movw	r30, r14
 7a0:	84 85       	ldd	r24, Z+12	; 0x0c
 7a2:	84 ff       	sbrs	r24, 4
 7a4:	0a c0       	rjmp	.+20     	; 0x7ba <main+0x23e>
				qNum = 8;
 7a6:	90 92 62 20 	sts	0x2062, r9
				decodeB(qNum);
 7aa:	89 2d       	mov	r24, r9
 7ac:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00010000;
 7b0:	f7 01       	movw	r30, r14
 7b2:	84 85       	ldd	r24, Z+12	; 0x0c
 7b4:	80 61       	ori	r24, 0x10	; 16
 7b6:	84 87       	std	Z+12, r24	; 0x0c
 7b8:	37 c0       	rjmp	.+110    	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b00001000) != 0) { // A9 has been triggered
 7ba:	f7 01       	movw	r30, r14
 7bc:	84 85       	ldd	r24, Z+12	; 0x0c
 7be:	83 ff       	sbrs	r24, 3
 7c0:	0a c0       	rjmp	.+20     	; 0x7d6 <main+0x25a>
				qNum = 9;
 7c2:	80 92 62 20 	sts	0x2062, r8
				decodeA(qNum);
 7c6:	88 2d       	mov	r24, r8
 7c8:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00001000;
 7cc:	f7 01       	movw	r30, r14
 7ce:	84 85       	ldd	r24, Z+12	; 0x0c
 7d0:	88 60       	ori	r24, 0x08	; 8
 7d2:	84 87       	std	Z+12, r24	; 0x0c
 7d4:	29 c0       	rjmp	.+82     	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b00000100) != 0) { // B9 has been triggered
 7d6:	f7 01       	movw	r30, r14
 7d8:	84 85       	ldd	r24, Z+12	; 0x0c
 7da:	82 ff       	sbrs	r24, 2
 7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <main+0x276>
				qNum = 9;
 7de:	80 92 62 20 	sts	0x2062, r8
				decodeB(qNum);
 7e2:	88 2d       	mov	r24, r8
 7e4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00000100;
 7e8:	f7 01       	movw	r30, r14
 7ea:	84 85       	ldd	r24, Z+12	; 0x0c
 7ec:	84 60       	ori	r24, 0x04	; 4
 7ee:	84 87       	std	Z+12, r24	; 0x0c
 7f0:	1b c0       	rjmp	.+54     	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b00000001) != 0) { // A10 has been triggered
 7f2:	f7 01       	movw	r30, r14
 7f4:	84 85       	ldd	r24, Z+12	; 0x0c
 7f6:	80 ff       	sbrs	r24, 0
 7f8:	0a c0       	rjmp	.+20     	; 0x80e <main+0x292>
				qNum = 10;
 7fa:	70 92 62 20 	sts	0x2062, r7
				decodeA(qNum);
 7fe:	87 2d       	mov	r24, r7
 800:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z7decodeAh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00000001;
 804:	f7 01       	movw	r30, r14
 806:	84 85       	ldd	r24, Z+12	; 0x0c
 808:	81 60       	ori	r24, 0x01	; 1
 80a:	84 87       	std	Z+12, r24	; 0x0c
 80c:	0d c0       	rjmp	.+26     	; 0x828 <main+0x2ac>
			}
			else if((PORTC.INTFLAGS & 0b00000010) != 0) { // B10 has been triggered
 80e:	f7 01       	movw	r30, r14
 810:	84 85       	ldd	r24, Z+12	; 0x0c
 812:	81 ff       	sbrs	r24, 1
 814:	09 c0       	rjmp	.+18     	; 0x828 <main+0x2ac>
				qNum = 10;
 816:	70 92 62 20 	sts	0x2062, r7
				decodeB(qNum);
 81a:	87 2d       	mov	r24, r7
 81c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z7decodeBh>
				PORTC.INTFLAGS = PORTC.INTFLAGS | 0b00000010;
 820:	f7 01       	movw	r30, r14
 822:	84 85       	ldd	r24, Z+12	; 0x0c
 824:	82 60       	ori	r24, 0x02	; 2
 826:	84 87       	std	Z+12, r24	; 0x0c
			}
			get_msgS(qNum);
 828:	80 91 62 20 	lds	r24, 0x2062
 82c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_Z8get_msgSh>
			sendStr(msgS, 0);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	80 91 00 20 	lds	r24, 0x2000
 838:	90 91 01 20 	lds	r25, 0x2001
 83c:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z7sendStrPci>
 840:	c5 ce       	rjmp	.-630    	; 0x5cc <main+0x50>

00000842 <__tablejump2__>:
 842:	ee 0f       	add	r30, r30
 844:	ff 1f       	adc	r31, r31
 846:	05 90       	lpm	r0, Z+
 848:	f4 91       	lpm	r31, Z
 84a:	e0 2d       	mov	r30, r0
 84c:	09 94       	ijmp

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
